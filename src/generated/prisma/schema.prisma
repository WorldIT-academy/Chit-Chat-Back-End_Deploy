model Album {
  id         Int                     @id @default(autoincrement())
  name       String
  // theme String?
  // year String?
  images     post_app_album_images[]
  created_at DateTime                @default(now())
  shown      Boolean                 @default(false)
  topic      post_app_album_tags[]
  author     Profile                 @relation(fields: [author_id], references: [id])
  author_id  Int
}

model post_app_album_images {
  id       Int   @id @default(autoincrement())
  album_id Int
  image_id Int
  album    Album @relation(fields: [album_id], references: [id])
  image    Image @relation(fields: [image_id], references: [id])
  // @@id([album_id, image_id])
}

model post_app_album_tags {
  album_id Int
  tag_id   Int
  album    Album @relation(fields: [album_id], references: [id])
  tag      Tags  @relation(fields: [tag_id], references: [id])
  id       Int   @id @default(autoincrement())
}

model ChatGroup {
  id               Int                          @id @default(autoincrement())
  name             String
  is_personal_chat Boolean                      @default(false)
  members          chat_app_chatgroup_members[]
  admin            Profile                      @relation("administeredGroup", fields: [admin_id], references: [id])
  admin_id         Int
  avatar           String
  chat_messages    ChatMessage[]
}

model ChatMessage {
  id             Int       @id @default(autoincrement())
  content        String
  sent_at        DateTime  @default(now())
  author         Profile   @relation(fields: [author_id], references: [id])
  author_id      Int
  chat_group     ChatGroup @relation(fields: [chat_groupId], references: [id])
  chat_groupId   Int
  attached_image String
}

model chat_app_chatgroup_members {
  chat_groupId Int
  profile_id   Int
  chat_group   ChatGroup @relation(fields: [chat_groupId], references: [id])
  profile      Profile   @relation(fields: [profile_id], references: [id])

  @@id([chat_groupId, profile_id])
}

model Friendship {
  id          Int     @id @default(autoincrement())
  profile1    Profile @relation("friendshipFrom", fields: [profile1_id], references: [id])
  profile2    Profile @relation("friendshipTo", fields: [profile2_id], references: [id])
  profile1_id Int
  profile2_id Int
  accepted    Boolean @default(false)

  @@unique([profile1_id, profile2_id])
}

model Image {
  id          Int      @id @default(autoincrement())
  filename    String
  file        String
  uploaded_at DateTime @default(now())

  // post UserPost? @relation(fields: [userPostId], references: [id])
  // userPostId Int?

  // album Album? @relation(fields: [albumId], references: [id])
  // albumId Int?

  album_images post_app_album_images[]
  PostImages   post_app_post_image[]
}

model Post {
  id        Int                   @id @default(autoincrement())
  title     String
  tags      post_app_post_tag[]
  content   String
  images    post_app_post_image[]
  views     post_app_post_views[]
  likes     post_app_post_likes[]
  author    Profile               @relation(fields: [author_id], references: [id])
  author_id Int
  link      Link?                 @relation(fields: [linkId], references: [id])
  linkId    Int?
}

model Tags {
  id         Int                   @id @default(autoincrement())
  name       String                @unique
  posts      post_app_post_tag[]
  album_tags post_app_album_tags[]
}

model Link {
  id   Int    @id @default(autoincrement())
  url  String
  post Post[] @relation()
}

model post_app_post_tag {
  post_id Int
  tag_id  Int
  post    Post @relation(fields: [post_id], references: [id])
  tag     Tags @relation(fields: [tag_id], references: [id])
  id      Int  @id @default(autoincrement())
}

model post_app_post_likes {
  post_id Int
  post    Post @relation(fields: [post_id], references: [id])
  id      Int  @id @default(autoincrement())
}

model post_app_post_views {
  post_id Int
  post    Post @relation(fields: [post_id], references: [id])
  id      Int  @id @default(autoincrement())
}

model post_app_post_image {
  post_id  Int
  image_id Int
  post     Post  @relation(fields: [post_id], references: [id])
  image    Image @relation(fields: [image_id], references: [id])
  id       Int   @id @default(autoincrement())
}

model Profile {
  id                  Int                          @id @default(autoincrement())
  name                String?
  username            String?                      @unique
  surname             String?
  date_of_birth       DateTime?
  email               String                       @unique
  password            String
  image               String?
  about               String?
  signature           String?
  post                Post[]
  album               Album[]
  administered_groups ChatGroup[]                  @relation("administeredGroup")
  chat_messages       ChatMessage[]
  avatar              Avatar?
  friendship_from     Friendship[]                 @relation("friendshipFrom")
  friendship_to       Friendship[]                 @relation("friendshipTo")
  // profile_views       ProfileViews[]
  // profile_likes       ProfileLikes[]
  chat_group_members  chat_app_chatgroup_members[]
}

model Avatar {
  id         Int     @id @default(autoincrement())
  image      String
  profile    Profile @relation(fields: [profile_id], references: [id])
  profile_id Int     @unique
  shown      Boolean @default(true)
  active     Boolean @default(true)
}

// model ProfileViews {
//     profile_id Int
//     profile   user_app_profile @relation(fields: [profile_id], references: [id])
//     @@id([profile_id])
// }

// model ProfileLikes {
//     profile_id Int
//     profile user_app_profile @relation(fields: [profile_id], references: [id])
//     @@id([profile_id])
// }

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
