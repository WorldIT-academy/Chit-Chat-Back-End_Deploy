
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Album
 * 
 */
export type Album = $Result.DefaultSelection<Prisma.$AlbumPayload>
/**
 * Model post_app_album_images
 * 
 */
export type post_app_album_images = $Result.DefaultSelection<Prisma.$post_app_album_imagesPayload>
/**
 * Model post_app_album_tags
 * 
 */
export type post_app_album_tags = $Result.DefaultSelection<Prisma.$post_app_album_tagsPayload>
/**
 * Model ChatGroup
 * 
 */
export type ChatGroup = $Result.DefaultSelection<Prisma.$ChatGroupPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model chat_app_chatgroup_members
 * 
 */
export type chat_app_chatgroup_members = $Result.DefaultSelection<Prisma.$chat_app_chatgroup_membersPayload>
/**
 * Model Friendship
 * 
 */
export type Friendship = $Result.DefaultSelection<Prisma.$FriendshipPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Tags
 * 
 */
export type Tags = $Result.DefaultSelection<Prisma.$TagsPayload>
/**
 * Model Link
 * 
 */
export type Link = $Result.DefaultSelection<Prisma.$LinkPayload>
/**
 * Model post_app_post_tag
 * 
 */
export type post_app_post_tag = $Result.DefaultSelection<Prisma.$post_app_post_tagPayload>
/**
 * Model post_app_post_likes
 * 
 */
export type post_app_post_likes = $Result.DefaultSelection<Prisma.$post_app_post_likesPayload>
/**
 * Model post_app_post_views
 * 
 */
export type post_app_post_views = $Result.DefaultSelection<Prisma.$post_app_post_viewsPayload>
/**
 * Model post_app_post_image
 * 
 */
export type post_app_post_image = $Result.DefaultSelection<Prisma.$post_app_post_imagePayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Avatar
 * 
 */
export type Avatar = $Result.DefaultSelection<Prisma.$AvatarPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Albums
 * const albums = await prisma.album.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Albums
   * const albums = await prisma.album.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post_app_album_images`: Exposes CRUD operations for the **post_app_album_images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_app_album_images
    * const post_app_album_images = await prisma.post_app_album_images.findMany()
    * ```
    */
  get post_app_album_images(): Prisma.post_app_album_imagesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post_app_album_tags`: Exposes CRUD operations for the **post_app_album_tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_app_album_tags
    * const post_app_album_tags = await prisma.post_app_album_tags.findMany()
    * ```
    */
  get post_app_album_tags(): Prisma.post_app_album_tagsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatGroup`: Exposes CRUD operations for the **ChatGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatGroups
    * const chatGroups = await prisma.chatGroup.findMany()
    * ```
    */
  get chatGroup(): Prisma.ChatGroupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chat_app_chatgroup_members`: Exposes CRUD operations for the **chat_app_chatgroup_members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chat_app_chatgroup_members
    * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.findMany()
    * ```
    */
  get chat_app_chatgroup_members(): Prisma.chat_app_chatgroup_membersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **Friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.FriendshipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tags`: Exposes CRUD operations for the **Tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tags.findMany()
    * ```
    */
  get tags(): Prisma.TagsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.link`: Exposes CRUD operations for the **Link** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Links
    * const links = await prisma.link.findMany()
    * ```
    */
  get link(): Prisma.LinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post_app_post_tag`: Exposes CRUD operations for the **post_app_post_tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_app_post_tags
    * const post_app_post_tags = await prisma.post_app_post_tag.findMany()
    * ```
    */
  get post_app_post_tag(): Prisma.post_app_post_tagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post_app_post_likes`: Exposes CRUD operations for the **post_app_post_likes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_app_post_likes
    * const post_app_post_likes = await prisma.post_app_post_likes.findMany()
    * ```
    */
  get post_app_post_likes(): Prisma.post_app_post_likesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post_app_post_views`: Exposes CRUD operations for the **post_app_post_views** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_app_post_views
    * const post_app_post_views = await prisma.post_app_post_views.findMany()
    * ```
    */
  get post_app_post_views(): Prisma.post_app_post_viewsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post_app_post_image`: Exposes CRUD operations for the **post_app_post_image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_app_post_images
    * const post_app_post_images = await prisma.post_app_post_image.findMany()
    * ```
    */
  get post_app_post_image(): Prisma.post_app_post_imageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.avatar`: Exposes CRUD operations for the **Avatar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avatars
    * const avatars = await prisma.avatar.findMany()
    * ```
    */
  get avatar(): Prisma.AvatarDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Album: 'Album',
    post_app_album_images: 'post_app_album_images',
    post_app_album_tags: 'post_app_album_tags',
    ChatGroup: 'ChatGroup',
    ChatMessage: 'ChatMessage',
    chat_app_chatgroup_members: 'chat_app_chatgroup_members',
    Friendship: 'Friendship',
    Image: 'Image',
    Post: 'Post',
    Tags: 'Tags',
    Link: 'Link',
    post_app_post_tag: 'post_app_post_tag',
    post_app_post_likes: 'post_app_post_likes',
    post_app_post_views: 'post_app_post_views',
    post_app_post_image: 'post_app_post_image',
    Profile: 'Profile',
    Avatar: 'Avatar'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "album" | "post_app_album_images" | "post_app_album_tags" | "chatGroup" | "chatMessage" | "chat_app_chatgroup_members" | "friendship" | "image" | "post" | "tags" | "link" | "post_app_post_tag" | "post_app_post_likes" | "post_app_post_views" | "post_app_post_image" | "profile" | "avatar"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Album: {
        payload: Prisma.$AlbumPayload<ExtArgs>
        fields: Prisma.AlbumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findFirst: {
            args: Prisma.AlbumFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findMany: {
            args: Prisma.AlbumFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          create: {
            args: Prisma.AlbumCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          createMany: {
            args: Prisma.AlbumCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlbumCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          delete: {
            args: Prisma.AlbumDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          update: {
            args: Prisma.AlbumUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          deleteMany: {
            args: Prisma.AlbumDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlbumUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          upsert: {
            args: Prisma.AlbumUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          aggregate: {
            args: Prisma.AlbumAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlbum>
          }
          groupBy: {
            args: Prisma.AlbumGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlbumGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumCountArgs<ExtArgs>
            result: $Utils.Optional<AlbumCountAggregateOutputType> | number
          }
        }
      }
      post_app_album_images: {
        payload: Prisma.$post_app_album_imagesPayload<ExtArgs>
        fields: Prisma.post_app_album_imagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.post_app_album_imagesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.post_app_album_imagesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>
          }
          findFirst: {
            args: Prisma.post_app_album_imagesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.post_app_album_imagesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>
          }
          findMany: {
            args: Prisma.post_app_album_imagesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>[]
          }
          create: {
            args: Prisma.post_app_album_imagesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>
          }
          createMany: {
            args: Prisma.post_app_album_imagesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.post_app_album_imagesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>[]
          }
          delete: {
            args: Prisma.post_app_album_imagesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>
          }
          update: {
            args: Prisma.post_app_album_imagesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>
          }
          deleteMany: {
            args: Prisma.post_app_album_imagesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.post_app_album_imagesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.post_app_album_imagesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>[]
          }
          upsert: {
            args: Prisma.post_app_album_imagesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_imagesPayload>
          }
          aggregate: {
            args: Prisma.Post_app_album_imagesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost_app_album_images>
          }
          groupBy: {
            args: Prisma.post_app_album_imagesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Post_app_album_imagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.post_app_album_imagesCountArgs<ExtArgs>
            result: $Utils.Optional<Post_app_album_imagesCountAggregateOutputType> | number
          }
        }
      }
      post_app_album_tags: {
        payload: Prisma.$post_app_album_tagsPayload<ExtArgs>
        fields: Prisma.post_app_album_tagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.post_app_album_tagsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.post_app_album_tagsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>
          }
          findFirst: {
            args: Prisma.post_app_album_tagsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.post_app_album_tagsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>
          }
          findMany: {
            args: Prisma.post_app_album_tagsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>[]
          }
          create: {
            args: Prisma.post_app_album_tagsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>
          }
          createMany: {
            args: Prisma.post_app_album_tagsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.post_app_album_tagsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>[]
          }
          delete: {
            args: Prisma.post_app_album_tagsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>
          }
          update: {
            args: Prisma.post_app_album_tagsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>
          }
          deleteMany: {
            args: Prisma.post_app_album_tagsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.post_app_album_tagsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.post_app_album_tagsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>[]
          }
          upsert: {
            args: Prisma.post_app_album_tagsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_album_tagsPayload>
          }
          aggregate: {
            args: Prisma.Post_app_album_tagsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost_app_album_tags>
          }
          groupBy: {
            args: Prisma.post_app_album_tagsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Post_app_album_tagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.post_app_album_tagsCountArgs<ExtArgs>
            result: $Utils.Optional<Post_app_album_tagsCountAggregateOutputType> | number
          }
        }
      }
      ChatGroup: {
        payload: Prisma.$ChatGroupPayload<ExtArgs>
        fields: Prisma.ChatGroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatGroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatGroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>
          }
          findFirst: {
            args: Prisma.ChatGroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatGroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>
          }
          findMany: {
            args: Prisma.ChatGroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>[]
          }
          create: {
            args: Prisma.ChatGroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>
          }
          createMany: {
            args: Prisma.ChatGroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatGroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>[]
          }
          delete: {
            args: Prisma.ChatGroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>
          }
          update: {
            args: Prisma.ChatGroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>
          }
          deleteMany: {
            args: Prisma.ChatGroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatGroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatGroupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>[]
          }
          upsert: {
            args: Prisma.ChatGroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatGroupPayload>
          }
          aggregate: {
            args: Prisma.ChatGroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatGroup>
          }
          groupBy: {
            args: Prisma.ChatGroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatGroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatGroupCountArgs<ExtArgs>
            result: $Utils.Optional<ChatGroupCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      chat_app_chatgroup_members: {
        payload: Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>
        fields: Prisma.chat_app_chatgroup_membersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.chat_app_chatgroup_membersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.chat_app_chatgroup_membersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>
          }
          findFirst: {
            args: Prisma.chat_app_chatgroup_membersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.chat_app_chatgroup_membersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>
          }
          findMany: {
            args: Prisma.chat_app_chatgroup_membersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>[]
          }
          create: {
            args: Prisma.chat_app_chatgroup_membersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>
          }
          createMany: {
            args: Prisma.chat_app_chatgroup_membersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.chat_app_chatgroup_membersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>[]
          }
          delete: {
            args: Prisma.chat_app_chatgroup_membersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>
          }
          update: {
            args: Prisma.chat_app_chatgroup_membersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>
          }
          deleteMany: {
            args: Prisma.chat_app_chatgroup_membersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.chat_app_chatgroup_membersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.chat_app_chatgroup_membersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>[]
          }
          upsert: {
            args: Prisma.chat_app_chatgroup_membersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chat_app_chatgroup_membersPayload>
          }
          aggregate: {
            args: Prisma.Chat_app_chatgroup_membersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChat_app_chatgroup_members>
          }
          groupBy: {
            args: Prisma.chat_app_chatgroup_membersGroupByArgs<ExtArgs>
            result: $Utils.Optional<Chat_app_chatgroup_membersGroupByOutputType>[]
          }
          count: {
            args: Prisma.chat_app_chatgroup_membersCountArgs<ExtArgs>
            result: $Utils.Optional<Chat_app_chatgroup_membersCountAggregateOutputType> | number
          }
        }
      }
      Friendship: {
        payload: Prisma.$FriendshipPayload<ExtArgs>
        fields: Prisma.FriendshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FriendshipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FriendshipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          findFirst: {
            args: Prisma.FriendshipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FriendshipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          findMany: {
            args: Prisma.FriendshipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          create: {
            args: Prisma.FriendshipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          createMany: {
            args: Prisma.FriendshipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FriendshipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          delete: {
            args: Prisma.FriendshipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          update: {
            args: Prisma.FriendshipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          deleteMany: {
            args: Prisma.FriendshipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FriendshipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FriendshipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>[]
          }
          upsert: {
            args: Prisma.FriendshipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FriendshipPayload>
          }
          aggregate: {
            args: Prisma.FriendshipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFriendship>
          }
          groupBy: {
            args: Prisma.FriendshipGroupByArgs<ExtArgs>
            result: $Utils.Optional<FriendshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.FriendshipCountArgs<ExtArgs>
            result: $Utils.Optional<FriendshipCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Tags: {
        payload: Prisma.$TagsPayload<ExtArgs>
        fields: Prisma.TagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          findFirst: {
            args: Prisma.TagsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          findMany: {
            args: Prisma.TagsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>[]
          }
          create: {
            args: Prisma.TagsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          createMany: {
            args: Prisma.TagsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>[]
          }
          delete: {
            args: Prisma.TagsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          update: {
            args: Prisma.TagsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          deleteMany: {
            args: Prisma.TagsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TagsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>[]
          }
          upsert: {
            args: Prisma.TagsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          aggregate: {
            args: Prisma.TagsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTags>
          }
          groupBy: {
            args: Prisma.TagsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagsCountArgs<ExtArgs>
            result: $Utils.Optional<TagsCountAggregateOutputType> | number
          }
        }
      }
      Link: {
        payload: Prisma.$LinkPayload<ExtArgs>
        fields: Prisma.LinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          findFirst: {
            args: Prisma.LinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          findMany: {
            args: Prisma.LinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>[]
          }
          create: {
            args: Prisma.LinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          createMany: {
            args: Prisma.LinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>[]
          }
          delete: {
            args: Prisma.LinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          update: {
            args: Prisma.LinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          deleteMany: {
            args: Prisma.LinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>[]
          }
          upsert: {
            args: Prisma.LinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          aggregate: {
            args: Prisma.LinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLink>
          }
          groupBy: {
            args: Prisma.LinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<LinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.LinkCountArgs<ExtArgs>
            result: $Utils.Optional<LinkCountAggregateOutputType> | number
          }
        }
      }
      post_app_post_tag: {
        payload: Prisma.$post_app_post_tagPayload<ExtArgs>
        fields: Prisma.post_app_post_tagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.post_app_post_tagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.post_app_post_tagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>
          }
          findFirst: {
            args: Prisma.post_app_post_tagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.post_app_post_tagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>
          }
          findMany: {
            args: Prisma.post_app_post_tagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>[]
          }
          create: {
            args: Prisma.post_app_post_tagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>
          }
          createMany: {
            args: Prisma.post_app_post_tagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.post_app_post_tagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>[]
          }
          delete: {
            args: Prisma.post_app_post_tagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>
          }
          update: {
            args: Prisma.post_app_post_tagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>
          }
          deleteMany: {
            args: Prisma.post_app_post_tagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.post_app_post_tagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.post_app_post_tagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>[]
          }
          upsert: {
            args: Prisma.post_app_post_tagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_tagPayload>
          }
          aggregate: {
            args: Prisma.Post_app_post_tagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost_app_post_tag>
          }
          groupBy: {
            args: Prisma.post_app_post_tagGroupByArgs<ExtArgs>
            result: $Utils.Optional<Post_app_post_tagGroupByOutputType>[]
          }
          count: {
            args: Prisma.post_app_post_tagCountArgs<ExtArgs>
            result: $Utils.Optional<Post_app_post_tagCountAggregateOutputType> | number
          }
        }
      }
      post_app_post_likes: {
        payload: Prisma.$post_app_post_likesPayload<ExtArgs>
        fields: Prisma.post_app_post_likesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.post_app_post_likesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.post_app_post_likesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>
          }
          findFirst: {
            args: Prisma.post_app_post_likesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.post_app_post_likesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>
          }
          findMany: {
            args: Prisma.post_app_post_likesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>[]
          }
          create: {
            args: Prisma.post_app_post_likesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>
          }
          createMany: {
            args: Prisma.post_app_post_likesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.post_app_post_likesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>[]
          }
          delete: {
            args: Prisma.post_app_post_likesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>
          }
          update: {
            args: Prisma.post_app_post_likesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>
          }
          deleteMany: {
            args: Prisma.post_app_post_likesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.post_app_post_likesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.post_app_post_likesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>[]
          }
          upsert: {
            args: Prisma.post_app_post_likesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_likesPayload>
          }
          aggregate: {
            args: Prisma.Post_app_post_likesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost_app_post_likes>
          }
          groupBy: {
            args: Prisma.post_app_post_likesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Post_app_post_likesGroupByOutputType>[]
          }
          count: {
            args: Prisma.post_app_post_likesCountArgs<ExtArgs>
            result: $Utils.Optional<Post_app_post_likesCountAggregateOutputType> | number
          }
        }
      }
      post_app_post_views: {
        payload: Prisma.$post_app_post_viewsPayload<ExtArgs>
        fields: Prisma.post_app_post_viewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.post_app_post_viewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.post_app_post_viewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>
          }
          findFirst: {
            args: Prisma.post_app_post_viewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.post_app_post_viewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>
          }
          findMany: {
            args: Prisma.post_app_post_viewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>[]
          }
          create: {
            args: Prisma.post_app_post_viewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>
          }
          createMany: {
            args: Prisma.post_app_post_viewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.post_app_post_viewsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>[]
          }
          delete: {
            args: Prisma.post_app_post_viewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>
          }
          update: {
            args: Prisma.post_app_post_viewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>
          }
          deleteMany: {
            args: Prisma.post_app_post_viewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.post_app_post_viewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.post_app_post_viewsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>[]
          }
          upsert: {
            args: Prisma.post_app_post_viewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_viewsPayload>
          }
          aggregate: {
            args: Prisma.Post_app_post_viewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost_app_post_views>
          }
          groupBy: {
            args: Prisma.post_app_post_viewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Post_app_post_viewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.post_app_post_viewsCountArgs<ExtArgs>
            result: $Utils.Optional<Post_app_post_viewsCountAggregateOutputType> | number
          }
        }
      }
      post_app_post_image: {
        payload: Prisma.$post_app_post_imagePayload<ExtArgs>
        fields: Prisma.post_app_post_imageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.post_app_post_imageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.post_app_post_imageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>
          }
          findFirst: {
            args: Prisma.post_app_post_imageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.post_app_post_imageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>
          }
          findMany: {
            args: Prisma.post_app_post_imageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>[]
          }
          create: {
            args: Prisma.post_app_post_imageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>
          }
          createMany: {
            args: Prisma.post_app_post_imageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.post_app_post_imageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>[]
          }
          delete: {
            args: Prisma.post_app_post_imageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>
          }
          update: {
            args: Prisma.post_app_post_imageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>
          }
          deleteMany: {
            args: Prisma.post_app_post_imageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.post_app_post_imageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.post_app_post_imageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>[]
          }
          upsert: {
            args: Prisma.post_app_post_imageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_app_post_imagePayload>
          }
          aggregate: {
            args: Prisma.Post_app_post_imageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost_app_post_image>
          }
          groupBy: {
            args: Prisma.post_app_post_imageGroupByArgs<ExtArgs>
            result: $Utils.Optional<Post_app_post_imageGroupByOutputType>[]
          }
          count: {
            args: Prisma.post_app_post_imageCountArgs<ExtArgs>
            result: $Utils.Optional<Post_app_post_imageCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Avatar: {
        payload: Prisma.$AvatarPayload<ExtArgs>
        fields: Prisma.AvatarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AvatarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AvatarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          findFirst: {
            args: Prisma.AvatarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AvatarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          findMany: {
            args: Prisma.AvatarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>[]
          }
          create: {
            args: Prisma.AvatarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          createMany: {
            args: Prisma.AvatarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AvatarCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>[]
          }
          delete: {
            args: Prisma.AvatarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          update: {
            args: Prisma.AvatarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          deleteMany: {
            args: Prisma.AvatarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AvatarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AvatarUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>[]
          }
          upsert: {
            args: Prisma.AvatarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          aggregate: {
            args: Prisma.AvatarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAvatar>
          }
          groupBy: {
            args: Prisma.AvatarGroupByArgs<ExtArgs>
            result: $Utils.Optional<AvatarGroupByOutputType>[]
          }
          count: {
            args: Prisma.AvatarCountArgs<ExtArgs>
            result: $Utils.Optional<AvatarCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    album?: AlbumOmit
    post_app_album_images?: post_app_album_imagesOmit
    post_app_album_tags?: post_app_album_tagsOmit
    chatGroup?: ChatGroupOmit
    chatMessage?: ChatMessageOmit
    chat_app_chatgroup_members?: chat_app_chatgroup_membersOmit
    friendship?: FriendshipOmit
    image?: ImageOmit
    post?: PostOmit
    tags?: TagsOmit
    link?: LinkOmit
    post_app_post_tag?: post_app_post_tagOmit
    post_app_post_likes?: post_app_post_likesOmit
    post_app_post_views?: post_app_post_viewsOmit
    post_app_post_image?: post_app_post_imageOmit
    profile?: ProfileOmit
    avatar?: AvatarOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AlbumCountOutputType
   */

  export type AlbumCountOutputType = {
    images: number
    topic: number
  }

  export type AlbumCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | AlbumCountOutputTypeCountImagesArgs
    topic?: boolean | AlbumCountOutputTypeCountTopicArgs
  }

  // Custom InputTypes
  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     */
    select?: AlbumCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_album_imagesWhereInput
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountTopicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_album_tagsWhereInput
  }


  /**
   * Count Type ChatGroupCountOutputType
   */

  export type ChatGroupCountOutputType = {
    members: number
    chat_messages: number
  }

  export type ChatGroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | ChatGroupCountOutputTypeCountMembersArgs
    chat_messages?: boolean | ChatGroupCountOutputTypeCountChat_messagesArgs
  }

  // Custom InputTypes
  /**
   * ChatGroupCountOutputType without action
   */
  export type ChatGroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroupCountOutputType
     */
    select?: ChatGroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatGroupCountOutputType without action
   */
  export type ChatGroupCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chat_app_chatgroup_membersWhereInput
  }

  /**
   * ChatGroupCountOutputType without action
   */
  export type ChatGroupCountOutputTypeCountChat_messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type ImageCountOutputType
   */

  export type ImageCountOutputType = {
    album_images: number
    PostImages: number
  }

  export type ImageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album_images?: boolean | ImageCountOutputTypeCountAlbum_imagesArgs
    PostImages?: boolean | ImageCountOutputTypeCountPostImagesArgs
  }

  // Custom InputTypes
  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageCountOutputType
     */
    select?: ImageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeCountAlbum_imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_album_imagesWhereInput
  }

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeCountPostImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_imageWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    tags: number
    images: number
    views: number
    likes: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | PostCountOutputTypeCountTagsArgs
    images?: boolean | PostCountOutputTypeCountImagesArgs
    views?: boolean | PostCountOutputTypeCountViewsArgs
    likes?: boolean | PostCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_tagWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_imageWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_viewsWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_likesWhereInput
  }


  /**
   * Count Type TagsCountOutputType
   */

  export type TagsCountOutputType = {
    posts: number
    album_tags: number
  }

  export type TagsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | TagsCountOutputTypeCountPostsArgs
    album_tags?: boolean | TagsCountOutputTypeCountAlbum_tagsArgs
  }

  // Custom InputTypes
  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsCountOutputType
     */
    select?: TagsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_tagWhereInput
  }

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountAlbum_tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_album_tagsWhereInput
  }


  /**
   * Count Type LinkCountOutputType
   */

  export type LinkCountOutputType = {
    post: number
  }

  export type LinkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | LinkCountOutputTypeCountPostArgs
  }

  // Custom InputTypes
  /**
   * LinkCountOutputType without action
   */
  export type LinkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkCountOutputType
     */
    select?: LinkCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LinkCountOutputType without action
   */
  export type LinkCountOutputTypeCountPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    post: number
    album: number
    administered_groups: number
    chat_messages: number
    friendship_from: number
    friendship_to: number
    chat_group_members: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ProfileCountOutputTypeCountPostArgs
    album?: boolean | ProfileCountOutputTypeCountAlbumArgs
    administered_groups?: boolean | ProfileCountOutputTypeCountAdministered_groupsArgs
    chat_messages?: boolean | ProfileCountOutputTypeCountChat_messagesArgs
    friendship_from?: boolean | ProfileCountOutputTypeCountFriendship_fromArgs
    friendship_to?: boolean | ProfileCountOutputTypeCountFriendship_toArgs
    chat_group_members?: boolean | ProfileCountOutputTypeCountChat_group_membersArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountAlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountAdministered_groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatGroupWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountChat_messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountFriendship_fromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountFriendship_toArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountChat_group_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chat_app_chatgroup_membersWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Album
   */

  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumAvgAggregateOutputType = {
    id: number | null
    author_id: number | null
  }

  export type AlbumSumAggregateOutputType = {
    id: number | null
    author_id: number | null
  }

  export type AlbumMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    shown: boolean | null
    author_id: number | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    shown: boolean | null
    author_id: number | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    shown: number
    author_id: number
    _all: number
  }


  export type AlbumAvgAggregateInputType = {
    id?: true
    author_id?: true
  }

  export type AlbumSumAggregateInputType = {
    id?: true
    author_id?: true
  }

  export type AlbumMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    shown?: true
    author_id?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    shown?: true
    author_id?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    shown?: true
    author_id?: true
    _all?: true
  }

  export type AlbumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Album to aggregate.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithAggregationInput | AlbumOrderByWithAggregationInput[]
    by: AlbumScalarFieldEnum[] | AlbumScalarFieldEnum
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _avg?: AlbumAvgAggregateInputType
    _sum?: AlbumSumAggregateInputType
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }

  export type AlbumGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    shown: boolean
    author_id: number
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    shown?: boolean
    author_id?: boolean
    images?: boolean | Album$imagesArgs<ExtArgs>
    topic?: boolean | Album$topicArgs<ExtArgs>
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    shown?: boolean
    author_id?: boolean
    author?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    shown?: boolean
    author_id?: boolean
    author?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    shown?: boolean
    author_id?: boolean
  }

  export type AlbumOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "created_at" | "shown" | "author_id", ExtArgs["result"]["album"]>
  export type AlbumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | Album$imagesArgs<ExtArgs>
    topic?: boolean | Album$topicArgs<ExtArgs>
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlbumIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type AlbumIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $AlbumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Album"
    objects: {
      images: Prisma.$post_app_album_imagesPayload<ExtArgs>[]
      topic: Prisma.$post_app_album_tagsPayload<ExtArgs>[]
      author: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      shown: boolean
      author_id: number
    }, ExtArgs["result"]["album"]>
    composites: {}
  }

  type AlbumGetPayload<S extends boolean | null | undefined | AlbumDefaultArgs> = $Result.GetResult<Prisma.$AlbumPayload, S>

  type AlbumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlbumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlbumCountAggregateInputType | true
    }

  export interface AlbumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Album'], meta: { name: 'Album' } }
    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlbumFindUniqueArgs>(args: SelectSubset<T, AlbumFindUniqueArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Album that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs>(args: SelectSubset<T, AlbumFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlbumFindFirstArgs>(args?: SelectSubset<T, AlbumFindFirstArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Album that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs>(args?: SelectSubset<T, AlbumFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlbumFindManyArgs>(args?: SelectSubset<T, AlbumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
     */
    create<T extends AlbumCreateArgs>(args: SelectSubset<T, AlbumCreateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Albums.
     * @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlbumCreateManyArgs>(args?: SelectSubset<T, AlbumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Albums and returns the data saved in the database.
     * @param {AlbumCreateManyAndReturnArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Albums and only return the `id`
     * const albumWithIdOnly = await prisma.album.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlbumCreateManyAndReturnArgs>(args?: SelectSubset<T, AlbumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
     */
    delete<T extends AlbumDeleteArgs>(args: SelectSubset<T, AlbumDeleteArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlbumUpdateArgs>(args: SelectSubset<T, AlbumUpdateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlbumDeleteManyArgs>(args?: SelectSubset<T, AlbumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlbumUpdateManyArgs>(args: SelectSubset<T, AlbumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums and returns the data updated in the database.
     * @param {AlbumUpdateManyAndReturnArgs} args - Arguments to update many Albums.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Albums and only return the `id`
     * const albumWithIdOnly = await prisma.album.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlbumUpdateManyAndReturnArgs>(args: SelectSubset<T, AlbumUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
     */
    upsert<T extends AlbumUpsertArgs>(args: SelectSubset<T, AlbumUpsertArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): Prisma.PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Album model
   */
  readonly fields: AlbumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends Album$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Album$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    topic<T extends Album$topicArgs<ExtArgs> = {}>(args?: Subset<T, Album$topicArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    author<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Album model
   */
  interface AlbumFieldRefs {
    readonly id: FieldRef<"Album", 'Int'>
    readonly name: FieldRef<"Album", 'String'>
    readonly created_at: FieldRef<"Album", 'DateTime'>
    readonly shown: FieldRef<"Album", 'Boolean'>
    readonly author_id: FieldRef<"Album", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Album findUnique
   */
  export type AlbumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findFirst
   */
  export type AlbumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findMany
   */
  export type AlbumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Albums to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album create
   */
  export type AlbumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to create a Album.
     */
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }

  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
  }

  /**
   * Album createManyAndReturn
   */
  export type AlbumCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Album update
   */
  export type AlbumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to update a Album.
     */
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to update.
     */
    limit?: number
  }

  /**
   * Album updateManyAndReturn
   */
  export type AlbumUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Album upsert
   */
  export type AlbumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The filter to search for the Album to update in case it exists.
     */
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     */
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }

  /**
   * Album delete
   */
  export type AlbumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter which Album to delete.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Albums to delete
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to delete.
     */
    limit?: number
  }

  /**
   * Album.images
   */
  export type Album$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    where?: post_app_album_imagesWhereInput
    orderBy?: post_app_album_imagesOrderByWithRelationInput | post_app_album_imagesOrderByWithRelationInput[]
    cursor?: post_app_album_imagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_album_imagesScalarFieldEnum | Post_app_album_imagesScalarFieldEnum[]
  }

  /**
   * Album.topic
   */
  export type Album$topicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    where?: post_app_album_tagsWhereInput
    orderBy?: post_app_album_tagsOrderByWithRelationInput | post_app_album_tagsOrderByWithRelationInput[]
    cursor?: post_app_album_tagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_album_tagsScalarFieldEnum | Post_app_album_tagsScalarFieldEnum[]
  }

  /**
   * Album without action
   */
  export type AlbumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
  }


  /**
   * Model post_app_album_images
   */

  export type AggregatePost_app_album_images = {
    _count: Post_app_album_imagesCountAggregateOutputType | null
    _avg: Post_app_album_imagesAvgAggregateOutputType | null
    _sum: Post_app_album_imagesSumAggregateOutputType | null
    _min: Post_app_album_imagesMinAggregateOutputType | null
    _max: Post_app_album_imagesMaxAggregateOutputType | null
  }

  export type Post_app_album_imagesAvgAggregateOutputType = {
    id: number | null
    album_id: number | null
    image_id: number | null
  }

  export type Post_app_album_imagesSumAggregateOutputType = {
    id: number | null
    album_id: number | null
    image_id: number | null
  }

  export type Post_app_album_imagesMinAggregateOutputType = {
    id: number | null
    album_id: number | null
    image_id: number | null
  }

  export type Post_app_album_imagesMaxAggregateOutputType = {
    id: number | null
    album_id: number | null
    image_id: number | null
  }

  export type Post_app_album_imagesCountAggregateOutputType = {
    id: number
    album_id: number
    image_id: number
    _all: number
  }


  export type Post_app_album_imagesAvgAggregateInputType = {
    id?: true
    album_id?: true
    image_id?: true
  }

  export type Post_app_album_imagesSumAggregateInputType = {
    id?: true
    album_id?: true
    image_id?: true
  }

  export type Post_app_album_imagesMinAggregateInputType = {
    id?: true
    album_id?: true
    image_id?: true
  }

  export type Post_app_album_imagesMaxAggregateInputType = {
    id?: true
    album_id?: true
    image_id?: true
  }

  export type Post_app_album_imagesCountAggregateInputType = {
    id?: true
    album_id?: true
    image_id?: true
    _all?: true
  }

  export type Post_app_album_imagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_album_images to aggregate.
     */
    where?: post_app_album_imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_album_images to fetch.
     */
    orderBy?: post_app_album_imagesOrderByWithRelationInput | post_app_album_imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: post_app_album_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_album_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_album_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned post_app_album_images
    **/
    _count?: true | Post_app_album_imagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_app_album_imagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_app_album_imagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_app_album_imagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_app_album_imagesMaxAggregateInputType
  }

  export type GetPost_app_album_imagesAggregateType<T extends Post_app_album_imagesAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_app_album_images]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_app_album_images[P]>
      : GetScalarType<T[P], AggregatePost_app_album_images[P]>
  }




  export type post_app_album_imagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_album_imagesWhereInput
    orderBy?: post_app_album_imagesOrderByWithAggregationInput | post_app_album_imagesOrderByWithAggregationInput[]
    by: Post_app_album_imagesScalarFieldEnum[] | Post_app_album_imagesScalarFieldEnum
    having?: post_app_album_imagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_app_album_imagesCountAggregateInputType | true
    _avg?: Post_app_album_imagesAvgAggregateInputType
    _sum?: Post_app_album_imagesSumAggregateInputType
    _min?: Post_app_album_imagesMinAggregateInputType
    _max?: Post_app_album_imagesMaxAggregateInputType
  }

  export type Post_app_album_imagesGroupByOutputType = {
    id: number
    album_id: number
    image_id: number
    _count: Post_app_album_imagesCountAggregateOutputType | null
    _avg: Post_app_album_imagesAvgAggregateOutputType | null
    _sum: Post_app_album_imagesSumAggregateOutputType | null
    _min: Post_app_album_imagesMinAggregateOutputType | null
    _max: Post_app_album_imagesMaxAggregateOutputType | null
  }

  type GetPost_app_album_imagesGroupByPayload<T extends post_app_album_imagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Post_app_album_imagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_app_album_imagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_app_album_imagesGroupByOutputType[P]>
            : GetScalarType<T[P], Post_app_album_imagesGroupByOutputType[P]>
        }
      >
    >


  export type post_app_album_imagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    album_id?: boolean
    image_id?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_album_images"]>

  export type post_app_album_imagesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    album_id?: boolean
    image_id?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_album_images"]>

  export type post_app_album_imagesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    album_id?: boolean
    image_id?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_album_images"]>

  export type post_app_album_imagesSelectScalar = {
    id?: boolean
    album_id?: boolean
    image_id?: boolean
  }

  export type post_app_album_imagesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "album_id" | "image_id", ExtArgs["result"]["post_app_album_images"]>
  export type post_app_album_imagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }
  export type post_app_album_imagesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }
  export type post_app_album_imagesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }

  export type $post_app_album_imagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post_app_album_images"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      image: Prisma.$ImagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      album_id: number
      image_id: number
    }, ExtArgs["result"]["post_app_album_images"]>
    composites: {}
  }

  type post_app_album_imagesGetPayload<S extends boolean | null | undefined | post_app_album_imagesDefaultArgs> = $Result.GetResult<Prisma.$post_app_album_imagesPayload, S>

  type post_app_album_imagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<post_app_album_imagesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Post_app_album_imagesCountAggregateInputType | true
    }

  export interface post_app_album_imagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post_app_album_images'], meta: { name: 'post_app_album_images' } }
    /**
     * Find zero or one Post_app_album_images that matches the filter.
     * @param {post_app_album_imagesFindUniqueArgs} args - Arguments to find a Post_app_album_images
     * @example
     * // Get one Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends post_app_album_imagesFindUniqueArgs>(args: SelectSubset<T, post_app_album_imagesFindUniqueArgs<ExtArgs>>): Prisma__post_app_album_imagesClient<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post_app_album_images that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {post_app_album_imagesFindUniqueOrThrowArgs} args - Arguments to find a Post_app_album_images
     * @example
     * // Get one Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends post_app_album_imagesFindUniqueOrThrowArgs>(args: SelectSubset<T, post_app_album_imagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__post_app_album_imagesClient<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_album_images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_imagesFindFirstArgs} args - Arguments to find a Post_app_album_images
     * @example
     * // Get one Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends post_app_album_imagesFindFirstArgs>(args?: SelectSubset<T, post_app_album_imagesFindFirstArgs<ExtArgs>>): Prisma__post_app_album_imagesClient<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_album_images that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_imagesFindFirstOrThrowArgs} args - Arguments to find a Post_app_album_images
     * @example
     * // Get one Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends post_app_album_imagesFindFirstOrThrowArgs>(args?: SelectSubset<T, post_app_album_imagesFindFirstOrThrowArgs<ExtArgs>>): Prisma__post_app_album_imagesClient<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Post_app_album_images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_imagesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.findMany()
     * 
     * // Get first 10 Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const post_app_album_imagesWithIdOnly = await prisma.post_app_album_images.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends post_app_album_imagesFindManyArgs>(args?: SelectSubset<T, post_app_album_imagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post_app_album_images.
     * @param {post_app_album_imagesCreateArgs} args - Arguments to create a Post_app_album_images.
     * @example
     * // Create one Post_app_album_images
     * const Post_app_album_images = await prisma.post_app_album_images.create({
     *   data: {
     *     // ... data to create a Post_app_album_images
     *   }
     * })
     * 
     */
    create<T extends post_app_album_imagesCreateArgs>(args: SelectSubset<T, post_app_album_imagesCreateArgs<ExtArgs>>): Prisma__post_app_album_imagesClient<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Post_app_album_images.
     * @param {post_app_album_imagesCreateManyArgs} args - Arguments to create many Post_app_album_images.
     * @example
     * // Create many Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends post_app_album_imagesCreateManyArgs>(args?: SelectSubset<T, post_app_album_imagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Post_app_album_images and returns the data saved in the database.
     * @param {post_app_album_imagesCreateManyAndReturnArgs} args - Arguments to create many Post_app_album_images.
     * @example
     * // Create many Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Post_app_album_images and only return the `id`
     * const post_app_album_imagesWithIdOnly = await prisma.post_app_album_images.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends post_app_album_imagesCreateManyAndReturnArgs>(args?: SelectSubset<T, post_app_album_imagesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post_app_album_images.
     * @param {post_app_album_imagesDeleteArgs} args - Arguments to delete one Post_app_album_images.
     * @example
     * // Delete one Post_app_album_images
     * const Post_app_album_images = await prisma.post_app_album_images.delete({
     *   where: {
     *     // ... filter to delete one Post_app_album_images
     *   }
     * })
     * 
     */
    delete<T extends post_app_album_imagesDeleteArgs>(args: SelectSubset<T, post_app_album_imagesDeleteArgs<ExtArgs>>): Prisma__post_app_album_imagesClient<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post_app_album_images.
     * @param {post_app_album_imagesUpdateArgs} args - Arguments to update one Post_app_album_images.
     * @example
     * // Update one Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends post_app_album_imagesUpdateArgs>(args: SelectSubset<T, post_app_album_imagesUpdateArgs<ExtArgs>>): Prisma__post_app_album_imagesClient<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Post_app_album_images.
     * @param {post_app_album_imagesDeleteManyArgs} args - Arguments to filter Post_app_album_images to delete.
     * @example
     * // Delete a few Post_app_album_images
     * const { count } = await prisma.post_app_album_images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends post_app_album_imagesDeleteManyArgs>(args?: SelectSubset<T, post_app_album_imagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_album_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_imagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends post_app_album_imagesUpdateManyArgs>(args: SelectSubset<T, post_app_album_imagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_album_images and returns the data updated in the database.
     * @param {post_app_album_imagesUpdateManyAndReturnArgs} args - Arguments to update many Post_app_album_images.
     * @example
     * // Update many Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Post_app_album_images and only return the `id`
     * const post_app_album_imagesWithIdOnly = await prisma.post_app_album_images.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends post_app_album_imagesUpdateManyAndReturnArgs>(args: SelectSubset<T, post_app_album_imagesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post_app_album_images.
     * @param {post_app_album_imagesUpsertArgs} args - Arguments to update or create a Post_app_album_images.
     * @example
     * // Update or create a Post_app_album_images
     * const post_app_album_images = await prisma.post_app_album_images.upsert({
     *   create: {
     *     // ... data to create a Post_app_album_images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_app_album_images we want to update
     *   }
     * })
     */
    upsert<T extends post_app_album_imagesUpsertArgs>(args: SelectSubset<T, post_app_album_imagesUpsertArgs<ExtArgs>>): Prisma__post_app_album_imagesClient<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Post_app_album_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_imagesCountArgs} args - Arguments to filter Post_app_album_images to count.
     * @example
     * // Count the number of Post_app_album_images
     * const count = await prisma.post_app_album_images.count({
     *   where: {
     *     // ... the filter for the Post_app_album_images we want to count
     *   }
     * })
    **/
    count<T extends post_app_album_imagesCountArgs>(
      args?: Subset<T, post_app_album_imagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_app_album_imagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_app_album_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_app_album_imagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_app_album_imagesAggregateArgs>(args: Subset<T, Post_app_album_imagesAggregateArgs>): Prisma.PrismaPromise<GetPost_app_album_imagesAggregateType<T>>

    /**
     * Group by Post_app_album_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_imagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends post_app_album_imagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: post_app_album_imagesGroupByArgs['orderBy'] }
        : { orderBy?: post_app_album_imagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, post_app_album_imagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_app_album_imagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post_app_album_images model
   */
  readonly fields: post_app_album_imagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post_app_album_images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__post_app_album_imagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    image<T extends ImageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ImageDefaultArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the post_app_album_images model
   */
  interface post_app_album_imagesFieldRefs {
    readonly id: FieldRef<"post_app_album_images", 'Int'>
    readonly album_id: FieldRef<"post_app_album_images", 'Int'>
    readonly image_id: FieldRef<"post_app_album_images", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * post_app_album_images findUnique
   */
  export type post_app_album_imagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_images to fetch.
     */
    where: post_app_album_imagesWhereUniqueInput
  }

  /**
   * post_app_album_images findUniqueOrThrow
   */
  export type post_app_album_imagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_images to fetch.
     */
    where: post_app_album_imagesWhereUniqueInput
  }

  /**
   * post_app_album_images findFirst
   */
  export type post_app_album_imagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_images to fetch.
     */
    where?: post_app_album_imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_album_images to fetch.
     */
    orderBy?: post_app_album_imagesOrderByWithRelationInput | post_app_album_imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_album_images.
     */
    cursor?: post_app_album_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_album_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_album_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_album_images.
     */
    distinct?: Post_app_album_imagesScalarFieldEnum | Post_app_album_imagesScalarFieldEnum[]
  }

  /**
   * post_app_album_images findFirstOrThrow
   */
  export type post_app_album_imagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_images to fetch.
     */
    where?: post_app_album_imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_album_images to fetch.
     */
    orderBy?: post_app_album_imagesOrderByWithRelationInput | post_app_album_imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_album_images.
     */
    cursor?: post_app_album_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_album_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_album_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_album_images.
     */
    distinct?: Post_app_album_imagesScalarFieldEnum | Post_app_album_imagesScalarFieldEnum[]
  }

  /**
   * post_app_album_images findMany
   */
  export type post_app_album_imagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_images to fetch.
     */
    where?: post_app_album_imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_album_images to fetch.
     */
    orderBy?: post_app_album_imagesOrderByWithRelationInput | post_app_album_imagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing post_app_album_images.
     */
    cursor?: post_app_album_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_album_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_album_images.
     */
    skip?: number
    distinct?: Post_app_album_imagesScalarFieldEnum | Post_app_album_imagesScalarFieldEnum[]
  }

  /**
   * post_app_album_images create
   */
  export type post_app_album_imagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * The data needed to create a post_app_album_images.
     */
    data: XOR<post_app_album_imagesCreateInput, post_app_album_imagesUncheckedCreateInput>
  }

  /**
   * post_app_album_images createMany
   */
  export type post_app_album_imagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many post_app_album_images.
     */
    data: post_app_album_imagesCreateManyInput | post_app_album_imagesCreateManyInput[]
  }

  /**
   * post_app_album_images createManyAndReturn
   */
  export type post_app_album_imagesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * The data used to create many post_app_album_images.
     */
    data: post_app_album_imagesCreateManyInput | post_app_album_imagesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_album_images update
   */
  export type post_app_album_imagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * The data needed to update a post_app_album_images.
     */
    data: XOR<post_app_album_imagesUpdateInput, post_app_album_imagesUncheckedUpdateInput>
    /**
     * Choose, which post_app_album_images to update.
     */
    where: post_app_album_imagesWhereUniqueInput
  }

  /**
   * post_app_album_images updateMany
   */
  export type post_app_album_imagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update post_app_album_images.
     */
    data: XOR<post_app_album_imagesUpdateManyMutationInput, post_app_album_imagesUncheckedUpdateManyInput>
    /**
     * Filter which post_app_album_images to update
     */
    where?: post_app_album_imagesWhereInput
    /**
     * Limit how many post_app_album_images to update.
     */
    limit?: number
  }

  /**
   * post_app_album_images updateManyAndReturn
   */
  export type post_app_album_imagesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * The data used to update post_app_album_images.
     */
    data: XOR<post_app_album_imagesUpdateManyMutationInput, post_app_album_imagesUncheckedUpdateManyInput>
    /**
     * Filter which post_app_album_images to update
     */
    where?: post_app_album_imagesWhereInput
    /**
     * Limit how many post_app_album_images to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_album_images upsert
   */
  export type post_app_album_imagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * The filter to search for the post_app_album_images to update in case it exists.
     */
    where: post_app_album_imagesWhereUniqueInput
    /**
     * In case the post_app_album_images found by the `where` argument doesn't exist, create a new post_app_album_images with this data.
     */
    create: XOR<post_app_album_imagesCreateInput, post_app_album_imagesUncheckedCreateInput>
    /**
     * In case the post_app_album_images was found with the provided `where` argument, update it with this data.
     */
    update: XOR<post_app_album_imagesUpdateInput, post_app_album_imagesUncheckedUpdateInput>
  }

  /**
   * post_app_album_images delete
   */
  export type post_app_album_imagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    /**
     * Filter which post_app_album_images to delete.
     */
    where: post_app_album_imagesWhereUniqueInput
  }

  /**
   * post_app_album_images deleteMany
   */
  export type post_app_album_imagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_album_images to delete
     */
    where?: post_app_album_imagesWhereInput
    /**
     * Limit how many post_app_album_images to delete.
     */
    limit?: number
  }

  /**
   * post_app_album_images without action
   */
  export type post_app_album_imagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
  }


  /**
   * Model post_app_album_tags
   */

  export type AggregatePost_app_album_tags = {
    _count: Post_app_album_tagsCountAggregateOutputType | null
    _avg: Post_app_album_tagsAvgAggregateOutputType | null
    _sum: Post_app_album_tagsSumAggregateOutputType | null
    _min: Post_app_album_tagsMinAggregateOutputType | null
    _max: Post_app_album_tagsMaxAggregateOutputType | null
  }

  export type Post_app_album_tagsAvgAggregateOutputType = {
    album_id: number | null
    tag_id: number | null
    id: number | null
  }

  export type Post_app_album_tagsSumAggregateOutputType = {
    album_id: number | null
    tag_id: number | null
    id: number | null
  }

  export type Post_app_album_tagsMinAggregateOutputType = {
    album_id: number | null
    tag_id: number | null
    id: number | null
  }

  export type Post_app_album_tagsMaxAggregateOutputType = {
    album_id: number | null
    tag_id: number | null
    id: number | null
  }

  export type Post_app_album_tagsCountAggregateOutputType = {
    album_id: number
    tag_id: number
    id: number
    _all: number
  }


  export type Post_app_album_tagsAvgAggregateInputType = {
    album_id?: true
    tag_id?: true
    id?: true
  }

  export type Post_app_album_tagsSumAggregateInputType = {
    album_id?: true
    tag_id?: true
    id?: true
  }

  export type Post_app_album_tagsMinAggregateInputType = {
    album_id?: true
    tag_id?: true
    id?: true
  }

  export type Post_app_album_tagsMaxAggregateInputType = {
    album_id?: true
    tag_id?: true
    id?: true
  }

  export type Post_app_album_tagsCountAggregateInputType = {
    album_id?: true
    tag_id?: true
    id?: true
    _all?: true
  }

  export type Post_app_album_tagsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_album_tags to aggregate.
     */
    where?: post_app_album_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_album_tags to fetch.
     */
    orderBy?: post_app_album_tagsOrderByWithRelationInput | post_app_album_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: post_app_album_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_album_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_album_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned post_app_album_tags
    **/
    _count?: true | Post_app_album_tagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_app_album_tagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_app_album_tagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_app_album_tagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_app_album_tagsMaxAggregateInputType
  }

  export type GetPost_app_album_tagsAggregateType<T extends Post_app_album_tagsAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_app_album_tags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_app_album_tags[P]>
      : GetScalarType<T[P], AggregatePost_app_album_tags[P]>
  }




  export type post_app_album_tagsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_album_tagsWhereInput
    orderBy?: post_app_album_tagsOrderByWithAggregationInput | post_app_album_tagsOrderByWithAggregationInput[]
    by: Post_app_album_tagsScalarFieldEnum[] | Post_app_album_tagsScalarFieldEnum
    having?: post_app_album_tagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_app_album_tagsCountAggregateInputType | true
    _avg?: Post_app_album_tagsAvgAggregateInputType
    _sum?: Post_app_album_tagsSumAggregateInputType
    _min?: Post_app_album_tagsMinAggregateInputType
    _max?: Post_app_album_tagsMaxAggregateInputType
  }

  export type Post_app_album_tagsGroupByOutputType = {
    album_id: number
    tag_id: number
    id: number
    _count: Post_app_album_tagsCountAggregateOutputType | null
    _avg: Post_app_album_tagsAvgAggregateOutputType | null
    _sum: Post_app_album_tagsSumAggregateOutputType | null
    _min: Post_app_album_tagsMinAggregateOutputType | null
    _max: Post_app_album_tagsMaxAggregateOutputType | null
  }

  type GetPost_app_album_tagsGroupByPayload<T extends post_app_album_tagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Post_app_album_tagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_app_album_tagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_app_album_tagsGroupByOutputType[P]>
            : GetScalarType<T[P], Post_app_album_tagsGroupByOutputType[P]>
        }
      >
    >


  export type post_app_album_tagsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    album_id?: boolean
    tag_id?: boolean
    id?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_album_tags"]>

  export type post_app_album_tagsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    album_id?: boolean
    tag_id?: boolean
    id?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_album_tags"]>

  export type post_app_album_tagsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    album_id?: boolean
    tag_id?: boolean
    id?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_album_tags"]>

  export type post_app_album_tagsSelectScalar = {
    album_id?: boolean
    tag_id?: boolean
    id?: boolean
  }

  export type post_app_album_tagsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"album_id" | "tag_id" | "id", ExtArgs["result"]["post_app_album_tags"]>
  export type post_app_album_tagsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }
  export type post_app_album_tagsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }
  export type post_app_album_tagsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }

  export type $post_app_album_tagsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post_app_album_tags"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      tag: Prisma.$TagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      album_id: number
      tag_id: number
      id: number
    }, ExtArgs["result"]["post_app_album_tags"]>
    composites: {}
  }

  type post_app_album_tagsGetPayload<S extends boolean | null | undefined | post_app_album_tagsDefaultArgs> = $Result.GetResult<Prisma.$post_app_album_tagsPayload, S>

  type post_app_album_tagsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<post_app_album_tagsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Post_app_album_tagsCountAggregateInputType | true
    }

  export interface post_app_album_tagsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post_app_album_tags'], meta: { name: 'post_app_album_tags' } }
    /**
     * Find zero or one Post_app_album_tags that matches the filter.
     * @param {post_app_album_tagsFindUniqueArgs} args - Arguments to find a Post_app_album_tags
     * @example
     * // Get one Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends post_app_album_tagsFindUniqueArgs>(args: SelectSubset<T, post_app_album_tagsFindUniqueArgs<ExtArgs>>): Prisma__post_app_album_tagsClient<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post_app_album_tags that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {post_app_album_tagsFindUniqueOrThrowArgs} args - Arguments to find a Post_app_album_tags
     * @example
     * // Get one Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends post_app_album_tagsFindUniqueOrThrowArgs>(args: SelectSubset<T, post_app_album_tagsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__post_app_album_tagsClient<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_album_tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_tagsFindFirstArgs} args - Arguments to find a Post_app_album_tags
     * @example
     * // Get one Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends post_app_album_tagsFindFirstArgs>(args?: SelectSubset<T, post_app_album_tagsFindFirstArgs<ExtArgs>>): Prisma__post_app_album_tagsClient<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_album_tags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_tagsFindFirstOrThrowArgs} args - Arguments to find a Post_app_album_tags
     * @example
     * // Get one Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends post_app_album_tagsFindFirstOrThrowArgs>(args?: SelectSubset<T, post_app_album_tagsFindFirstOrThrowArgs<ExtArgs>>): Prisma__post_app_album_tagsClient<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Post_app_album_tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_tagsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.findMany()
     * 
     * // Get first 10 Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.findMany({ take: 10 })
     * 
     * // Only select the `album_id`
     * const post_app_album_tagsWithAlbum_idOnly = await prisma.post_app_album_tags.findMany({ select: { album_id: true } })
     * 
     */
    findMany<T extends post_app_album_tagsFindManyArgs>(args?: SelectSubset<T, post_app_album_tagsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post_app_album_tags.
     * @param {post_app_album_tagsCreateArgs} args - Arguments to create a Post_app_album_tags.
     * @example
     * // Create one Post_app_album_tags
     * const Post_app_album_tags = await prisma.post_app_album_tags.create({
     *   data: {
     *     // ... data to create a Post_app_album_tags
     *   }
     * })
     * 
     */
    create<T extends post_app_album_tagsCreateArgs>(args: SelectSubset<T, post_app_album_tagsCreateArgs<ExtArgs>>): Prisma__post_app_album_tagsClient<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Post_app_album_tags.
     * @param {post_app_album_tagsCreateManyArgs} args - Arguments to create many Post_app_album_tags.
     * @example
     * // Create many Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends post_app_album_tagsCreateManyArgs>(args?: SelectSubset<T, post_app_album_tagsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Post_app_album_tags and returns the data saved in the database.
     * @param {post_app_album_tagsCreateManyAndReturnArgs} args - Arguments to create many Post_app_album_tags.
     * @example
     * // Create many Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Post_app_album_tags and only return the `album_id`
     * const post_app_album_tagsWithAlbum_idOnly = await prisma.post_app_album_tags.createManyAndReturn({
     *   select: { album_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends post_app_album_tagsCreateManyAndReturnArgs>(args?: SelectSubset<T, post_app_album_tagsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post_app_album_tags.
     * @param {post_app_album_tagsDeleteArgs} args - Arguments to delete one Post_app_album_tags.
     * @example
     * // Delete one Post_app_album_tags
     * const Post_app_album_tags = await prisma.post_app_album_tags.delete({
     *   where: {
     *     // ... filter to delete one Post_app_album_tags
     *   }
     * })
     * 
     */
    delete<T extends post_app_album_tagsDeleteArgs>(args: SelectSubset<T, post_app_album_tagsDeleteArgs<ExtArgs>>): Prisma__post_app_album_tagsClient<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post_app_album_tags.
     * @param {post_app_album_tagsUpdateArgs} args - Arguments to update one Post_app_album_tags.
     * @example
     * // Update one Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends post_app_album_tagsUpdateArgs>(args: SelectSubset<T, post_app_album_tagsUpdateArgs<ExtArgs>>): Prisma__post_app_album_tagsClient<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Post_app_album_tags.
     * @param {post_app_album_tagsDeleteManyArgs} args - Arguments to filter Post_app_album_tags to delete.
     * @example
     * // Delete a few Post_app_album_tags
     * const { count } = await prisma.post_app_album_tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends post_app_album_tagsDeleteManyArgs>(args?: SelectSubset<T, post_app_album_tagsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_album_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_tagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends post_app_album_tagsUpdateManyArgs>(args: SelectSubset<T, post_app_album_tagsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_album_tags and returns the data updated in the database.
     * @param {post_app_album_tagsUpdateManyAndReturnArgs} args - Arguments to update many Post_app_album_tags.
     * @example
     * // Update many Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Post_app_album_tags and only return the `album_id`
     * const post_app_album_tagsWithAlbum_idOnly = await prisma.post_app_album_tags.updateManyAndReturn({
     *   select: { album_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends post_app_album_tagsUpdateManyAndReturnArgs>(args: SelectSubset<T, post_app_album_tagsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post_app_album_tags.
     * @param {post_app_album_tagsUpsertArgs} args - Arguments to update or create a Post_app_album_tags.
     * @example
     * // Update or create a Post_app_album_tags
     * const post_app_album_tags = await prisma.post_app_album_tags.upsert({
     *   create: {
     *     // ... data to create a Post_app_album_tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_app_album_tags we want to update
     *   }
     * })
     */
    upsert<T extends post_app_album_tagsUpsertArgs>(args: SelectSubset<T, post_app_album_tagsUpsertArgs<ExtArgs>>): Prisma__post_app_album_tagsClient<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Post_app_album_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_tagsCountArgs} args - Arguments to filter Post_app_album_tags to count.
     * @example
     * // Count the number of Post_app_album_tags
     * const count = await prisma.post_app_album_tags.count({
     *   where: {
     *     // ... the filter for the Post_app_album_tags we want to count
     *   }
     * })
    **/
    count<T extends post_app_album_tagsCountArgs>(
      args?: Subset<T, post_app_album_tagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_app_album_tagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_app_album_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_app_album_tagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_app_album_tagsAggregateArgs>(args: Subset<T, Post_app_album_tagsAggregateArgs>): Prisma.PrismaPromise<GetPost_app_album_tagsAggregateType<T>>

    /**
     * Group by Post_app_album_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_album_tagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends post_app_album_tagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: post_app_album_tagsGroupByArgs['orderBy'] }
        : { orderBy?: post_app_album_tagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, post_app_album_tagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_app_album_tagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post_app_album_tags model
   */
  readonly fields: post_app_album_tagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post_app_album_tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__post_app_album_tagsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagsDefaultArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the post_app_album_tags model
   */
  interface post_app_album_tagsFieldRefs {
    readonly album_id: FieldRef<"post_app_album_tags", 'Int'>
    readonly tag_id: FieldRef<"post_app_album_tags", 'Int'>
    readonly id: FieldRef<"post_app_album_tags", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * post_app_album_tags findUnique
   */
  export type post_app_album_tagsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_tags to fetch.
     */
    where: post_app_album_tagsWhereUniqueInput
  }

  /**
   * post_app_album_tags findUniqueOrThrow
   */
  export type post_app_album_tagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_tags to fetch.
     */
    where: post_app_album_tagsWhereUniqueInput
  }

  /**
   * post_app_album_tags findFirst
   */
  export type post_app_album_tagsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_tags to fetch.
     */
    where?: post_app_album_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_album_tags to fetch.
     */
    orderBy?: post_app_album_tagsOrderByWithRelationInput | post_app_album_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_album_tags.
     */
    cursor?: post_app_album_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_album_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_album_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_album_tags.
     */
    distinct?: Post_app_album_tagsScalarFieldEnum | Post_app_album_tagsScalarFieldEnum[]
  }

  /**
   * post_app_album_tags findFirstOrThrow
   */
  export type post_app_album_tagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_tags to fetch.
     */
    where?: post_app_album_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_album_tags to fetch.
     */
    orderBy?: post_app_album_tagsOrderByWithRelationInput | post_app_album_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_album_tags.
     */
    cursor?: post_app_album_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_album_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_album_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_album_tags.
     */
    distinct?: Post_app_album_tagsScalarFieldEnum | Post_app_album_tagsScalarFieldEnum[]
  }

  /**
   * post_app_album_tags findMany
   */
  export type post_app_album_tagsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_album_tags to fetch.
     */
    where?: post_app_album_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_album_tags to fetch.
     */
    orderBy?: post_app_album_tagsOrderByWithRelationInput | post_app_album_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing post_app_album_tags.
     */
    cursor?: post_app_album_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_album_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_album_tags.
     */
    skip?: number
    distinct?: Post_app_album_tagsScalarFieldEnum | Post_app_album_tagsScalarFieldEnum[]
  }

  /**
   * post_app_album_tags create
   */
  export type post_app_album_tagsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * The data needed to create a post_app_album_tags.
     */
    data: XOR<post_app_album_tagsCreateInput, post_app_album_tagsUncheckedCreateInput>
  }

  /**
   * post_app_album_tags createMany
   */
  export type post_app_album_tagsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many post_app_album_tags.
     */
    data: post_app_album_tagsCreateManyInput | post_app_album_tagsCreateManyInput[]
  }

  /**
   * post_app_album_tags createManyAndReturn
   */
  export type post_app_album_tagsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * The data used to create many post_app_album_tags.
     */
    data: post_app_album_tagsCreateManyInput | post_app_album_tagsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_album_tags update
   */
  export type post_app_album_tagsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * The data needed to update a post_app_album_tags.
     */
    data: XOR<post_app_album_tagsUpdateInput, post_app_album_tagsUncheckedUpdateInput>
    /**
     * Choose, which post_app_album_tags to update.
     */
    where: post_app_album_tagsWhereUniqueInput
  }

  /**
   * post_app_album_tags updateMany
   */
  export type post_app_album_tagsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update post_app_album_tags.
     */
    data: XOR<post_app_album_tagsUpdateManyMutationInput, post_app_album_tagsUncheckedUpdateManyInput>
    /**
     * Filter which post_app_album_tags to update
     */
    where?: post_app_album_tagsWhereInput
    /**
     * Limit how many post_app_album_tags to update.
     */
    limit?: number
  }

  /**
   * post_app_album_tags updateManyAndReturn
   */
  export type post_app_album_tagsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * The data used to update post_app_album_tags.
     */
    data: XOR<post_app_album_tagsUpdateManyMutationInput, post_app_album_tagsUncheckedUpdateManyInput>
    /**
     * Filter which post_app_album_tags to update
     */
    where?: post_app_album_tagsWhereInput
    /**
     * Limit how many post_app_album_tags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_album_tags upsert
   */
  export type post_app_album_tagsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * The filter to search for the post_app_album_tags to update in case it exists.
     */
    where: post_app_album_tagsWhereUniqueInput
    /**
     * In case the post_app_album_tags found by the `where` argument doesn't exist, create a new post_app_album_tags with this data.
     */
    create: XOR<post_app_album_tagsCreateInput, post_app_album_tagsUncheckedCreateInput>
    /**
     * In case the post_app_album_tags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<post_app_album_tagsUpdateInput, post_app_album_tagsUncheckedUpdateInput>
  }

  /**
   * post_app_album_tags delete
   */
  export type post_app_album_tagsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    /**
     * Filter which post_app_album_tags to delete.
     */
    where: post_app_album_tagsWhereUniqueInput
  }

  /**
   * post_app_album_tags deleteMany
   */
  export type post_app_album_tagsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_album_tags to delete
     */
    where?: post_app_album_tagsWhereInput
    /**
     * Limit how many post_app_album_tags to delete.
     */
    limit?: number
  }

  /**
   * post_app_album_tags without action
   */
  export type post_app_album_tagsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
  }


  /**
   * Model ChatGroup
   */

  export type AggregateChatGroup = {
    _count: ChatGroupCountAggregateOutputType | null
    _avg: ChatGroupAvgAggregateOutputType | null
    _sum: ChatGroupSumAggregateOutputType | null
    _min: ChatGroupMinAggregateOutputType | null
    _max: ChatGroupMaxAggregateOutputType | null
  }

  export type ChatGroupAvgAggregateOutputType = {
    id: number | null
    admin_id: number | null
  }

  export type ChatGroupSumAggregateOutputType = {
    id: number | null
    admin_id: number | null
  }

  export type ChatGroupMinAggregateOutputType = {
    id: number | null
    name: string | null
    is_personal_chat: boolean | null
    admin_id: number | null
    avatar: string | null
  }

  export type ChatGroupMaxAggregateOutputType = {
    id: number | null
    name: string | null
    is_personal_chat: boolean | null
    admin_id: number | null
    avatar: string | null
  }

  export type ChatGroupCountAggregateOutputType = {
    id: number
    name: number
    is_personal_chat: number
    admin_id: number
    avatar: number
    _all: number
  }


  export type ChatGroupAvgAggregateInputType = {
    id?: true
    admin_id?: true
  }

  export type ChatGroupSumAggregateInputType = {
    id?: true
    admin_id?: true
  }

  export type ChatGroupMinAggregateInputType = {
    id?: true
    name?: true
    is_personal_chat?: true
    admin_id?: true
    avatar?: true
  }

  export type ChatGroupMaxAggregateInputType = {
    id?: true
    name?: true
    is_personal_chat?: true
    admin_id?: true
    avatar?: true
  }

  export type ChatGroupCountAggregateInputType = {
    id?: true
    name?: true
    is_personal_chat?: true
    admin_id?: true
    avatar?: true
    _all?: true
  }

  export type ChatGroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatGroup to aggregate.
     */
    where?: ChatGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatGroups to fetch.
     */
    orderBy?: ChatGroupOrderByWithRelationInput | ChatGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatGroups
    **/
    _count?: true | ChatGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatGroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatGroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatGroupMaxAggregateInputType
  }

  export type GetChatGroupAggregateType<T extends ChatGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateChatGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatGroup[P]>
      : GetScalarType<T[P], AggregateChatGroup[P]>
  }




  export type ChatGroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatGroupWhereInput
    orderBy?: ChatGroupOrderByWithAggregationInput | ChatGroupOrderByWithAggregationInput[]
    by: ChatGroupScalarFieldEnum[] | ChatGroupScalarFieldEnum
    having?: ChatGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatGroupCountAggregateInputType | true
    _avg?: ChatGroupAvgAggregateInputType
    _sum?: ChatGroupSumAggregateInputType
    _min?: ChatGroupMinAggregateInputType
    _max?: ChatGroupMaxAggregateInputType
  }

  export type ChatGroupGroupByOutputType = {
    id: number
    name: string
    is_personal_chat: boolean
    admin_id: number
    avatar: string
    _count: ChatGroupCountAggregateOutputType | null
    _avg: ChatGroupAvgAggregateOutputType | null
    _sum: ChatGroupSumAggregateOutputType | null
    _min: ChatGroupMinAggregateOutputType | null
    _max: ChatGroupMaxAggregateOutputType | null
  }

  type GetChatGroupGroupByPayload<T extends ChatGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupGroupByOutputType[P]>
        }
      >
    >


  export type ChatGroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    is_personal_chat?: boolean
    admin_id?: boolean
    avatar?: boolean
    members?: boolean | ChatGroup$membersArgs<ExtArgs>
    admin?: boolean | ProfileDefaultArgs<ExtArgs>
    chat_messages?: boolean | ChatGroup$chat_messagesArgs<ExtArgs>
    _count?: boolean | ChatGroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatGroup"]>

  export type ChatGroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    is_personal_chat?: boolean
    admin_id?: boolean
    avatar?: boolean
    admin?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatGroup"]>

  export type ChatGroupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    is_personal_chat?: boolean
    admin_id?: boolean
    avatar?: boolean
    admin?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatGroup"]>

  export type ChatGroupSelectScalar = {
    id?: boolean
    name?: boolean
    is_personal_chat?: boolean
    admin_id?: boolean
    avatar?: boolean
  }

  export type ChatGroupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "is_personal_chat" | "admin_id" | "avatar", ExtArgs["result"]["chatGroup"]>
  export type ChatGroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | ChatGroup$membersArgs<ExtArgs>
    admin?: boolean | ProfileDefaultArgs<ExtArgs>
    chat_messages?: boolean | ChatGroup$chat_messagesArgs<ExtArgs>
    _count?: boolean | ChatGroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatGroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type ChatGroupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $ChatGroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatGroup"
    objects: {
      members: Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>[]
      admin: Prisma.$ProfilePayload<ExtArgs>
      chat_messages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      is_personal_chat: boolean
      admin_id: number
      avatar: string
    }, ExtArgs["result"]["chatGroup"]>
    composites: {}
  }

  type ChatGroupGetPayload<S extends boolean | null | undefined | ChatGroupDefaultArgs> = $Result.GetResult<Prisma.$ChatGroupPayload, S>

  type ChatGroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatGroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatGroupCountAggregateInputType | true
    }

  export interface ChatGroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatGroup'], meta: { name: 'ChatGroup' } }
    /**
     * Find zero or one ChatGroup that matches the filter.
     * @param {ChatGroupFindUniqueArgs} args - Arguments to find a ChatGroup
     * @example
     * // Get one ChatGroup
     * const chatGroup = await prisma.chatGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatGroupFindUniqueArgs>(args: SelectSubset<T, ChatGroupFindUniqueArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatGroup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatGroupFindUniqueOrThrowArgs} args - Arguments to find a ChatGroup
     * @example
     * // Get one ChatGroup
     * const chatGroup = await prisma.chatGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatGroupFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupFindFirstArgs} args - Arguments to find a ChatGroup
     * @example
     * // Get one ChatGroup
     * const chatGroup = await prisma.chatGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatGroupFindFirstArgs>(args?: SelectSubset<T, ChatGroupFindFirstArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatGroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupFindFirstOrThrowArgs} args - Arguments to find a ChatGroup
     * @example
     * // Get one ChatGroup
     * const chatGroup = await prisma.chatGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatGroupFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatGroups
     * const chatGroups = await prisma.chatGroup.findMany()
     * 
     * // Get first 10 ChatGroups
     * const chatGroups = await prisma.chatGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatGroupWithIdOnly = await prisma.chatGroup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatGroupFindManyArgs>(args?: SelectSubset<T, ChatGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatGroup.
     * @param {ChatGroupCreateArgs} args - Arguments to create a ChatGroup.
     * @example
     * // Create one ChatGroup
     * const ChatGroup = await prisma.chatGroup.create({
     *   data: {
     *     // ... data to create a ChatGroup
     *   }
     * })
     * 
     */
    create<T extends ChatGroupCreateArgs>(args: SelectSubset<T, ChatGroupCreateArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatGroups.
     * @param {ChatGroupCreateManyArgs} args - Arguments to create many ChatGroups.
     * @example
     * // Create many ChatGroups
     * const chatGroup = await prisma.chatGroup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatGroupCreateManyArgs>(args?: SelectSubset<T, ChatGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatGroups and returns the data saved in the database.
     * @param {ChatGroupCreateManyAndReturnArgs} args - Arguments to create many ChatGroups.
     * @example
     * // Create many ChatGroups
     * const chatGroup = await prisma.chatGroup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatGroups and only return the `id`
     * const chatGroupWithIdOnly = await prisma.chatGroup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatGroupCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatGroup.
     * @param {ChatGroupDeleteArgs} args - Arguments to delete one ChatGroup.
     * @example
     * // Delete one ChatGroup
     * const ChatGroup = await prisma.chatGroup.delete({
     *   where: {
     *     // ... filter to delete one ChatGroup
     *   }
     * })
     * 
     */
    delete<T extends ChatGroupDeleteArgs>(args: SelectSubset<T, ChatGroupDeleteArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatGroup.
     * @param {ChatGroupUpdateArgs} args - Arguments to update one ChatGroup.
     * @example
     * // Update one ChatGroup
     * const chatGroup = await prisma.chatGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatGroupUpdateArgs>(args: SelectSubset<T, ChatGroupUpdateArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatGroups.
     * @param {ChatGroupDeleteManyArgs} args - Arguments to filter ChatGroups to delete.
     * @example
     * // Delete a few ChatGroups
     * const { count } = await prisma.chatGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatGroupDeleteManyArgs>(args?: SelectSubset<T, ChatGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatGroups
     * const chatGroup = await prisma.chatGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatGroupUpdateManyArgs>(args: SelectSubset<T, ChatGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatGroups and returns the data updated in the database.
     * @param {ChatGroupUpdateManyAndReturnArgs} args - Arguments to update many ChatGroups.
     * @example
     * // Update many ChatGroups
     * const chatGroup = await prisma.chatGroup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatGroups and only return the `id`
     * const chatGroupWithIdOnly = await prisma.chatGroup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatGroupUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatGroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatGroup.
     * @param {ChatGroupUpsertArgs} args - Arguments to update or create a ChatGroup.
     * @example
     * // Update or create a ChatGroup
     * const chatGroup = await prisma.chatGroup.upsert({
     *   create: {
     *     // ... data to create a ChatGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatGroup we want to update
     *   }
     * })
     */
    upsert<T extends ChatGroupUpsertArgs>(args: SelectSubset<T, ChatGroupUpsertArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupCountArgs} args - Arguments to filter ChatGroups to count.
     * @example
     * // Count the number of ChatGroups
     * const count = await prisma.chatGroup.count({
     *   where: {
     *     // ... the filter for the ChatGroups we want to count
     *   }
     * })
    **/
    count<T extends ChatGroupCountArgs>(
      args?: Subset<T, ChatGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatGroupAggregateArgs>(args: Subset<T, ChatGroupAggregateArgs>): Prisma.PrismaPromise<GetChatGroupAggregateType<T>>

    /**
     * Group by ChatGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatGroup model
   */
  readonly fields: ChatGroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatGroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends ChatGroup$membersArgs<ExtArgs> = {}>(args?: Subset<T, ChatGroup$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    admin<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chat_messages<T extends ChatGroup$chat_messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatGroup$chat_messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatGroup model
   */
  interface ChatGroupFieldRefs {
    readonly id: FieldRef<"ChatGroup", 'Int'>
    readonly name: FieldRef<"ChatGroup", 'String'>
    readonly is_personal_chat: FieldRef<"ChatGroup", 'Boolean'>
    readonly admin_id: FieldRef<"ChatGroup", 'Int'>
    readonly avatar: FieldRef<"ChatGroup", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatGroup findUnique
   */
  export type ChatGroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * Filter, which ChatGroup to fetch.
     */
    where: ChatGroupWhereUniqueInput
  }

  /**
   * ChatGroup findUniqueOrThrow
   */
  export type ChatGroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * Filter, which ChatGroup to fetch.
     */
    where: ChatGroupWhereUniqueInput
  }

  /**
   * ChatGroup findFirst
   */
  export type ChatGroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * Filter, which ChatGroup to fetch.
     */
    where?: ChatGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatGroups to fetch.
     */
    orderBy?: ChatGroupOrderByWithRelationInput | ChatGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatGroups.
     */
    cursor?: ChatGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatGroups.
     */
    distinct?: ChatGroupScalarFieldEnum | ChatGroupScalarFieldEnum[]
  }

  /**
   * ChatGroup findFirstOrThrow
   */
  export type ChatGroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * Filter, which ChatGroup to fetch.
     */
    where?: ChatGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatGroups to fetch.
     */
    orderBy?: ChatGroupOrderByWithRelationInput | ChatGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatGroups.
     */
    cursor?: ChatGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatGroups.
     */
    distinct?: ChatGroupScalarFieldEnum | ChatGroupScalarFieldEnum[]
  }

  /**
   * ChatGroup findMany
   */
  export type ChatGroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * Filter, which ChatGroups to fetch.
     */
    where?: ChatGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatGroups to fetch.
     */
    orderBy?: ChatGroupOrderByWithRelationInput | ChatGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatGroups.
     */
    cursor?: ChatGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatGroups.
     */
    skip?: number
    distinct?: ChatGroupScalarFieldEnum | ChatGroupScalarFieldEnum[]
  }

  /**
   * ChatGroup create
   */
  export type ChatGroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatGroup.
     */
    data: XOR<ChatGroupCreateInput, ChatGroupUncheckedCreateInput>
  }

  /**
   * ChatGroup createMany
   */
  export type ChatGroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatGroups.
     */
    data: ChatGroupCreateManyInput | ChatGroupCreateManyInput[]
  }

  /**
   * ChatGroup createManyAndReturn
   */
  export type ChatGroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * The data used to create many ChatGroups.
     */
    data: ChatGroupCreateManyInput | ChatGroupCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatGroup update
   */
  export type ChatGroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatGroup.
     */
    data: XOR<ChatGroupUpdateInput, ChatGroupUncheckedUpdateInput>
    /**
     * Choose, which ChatGroup to update.
     */
    where: ChatGroupWhereUniqueInput
  }

  /**
   * ChatGroup updateMany
   */
  export type ChatGroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatGroups.
     */
    data: XOR<ChatGroupUpdateManyMutationInput, ChatGroupUncheckedUpdateManyInput>
    /**
     * Filter which ChatGroups to update
     */
    where?: ChatGroupWhereInput
    /**
     * Limit how many ChatGroups to update.
     */
    limit?: number
  }

  /**
   * ChatGroup updateManyAndReturn
   */
  export type ChatGroupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * The data used to update ChatGroups.
     */
    data: XOR<ChatGroupUpdateManyMutationInput, ChatGroupUncheckedUpdateManyInput>
    /**
     * Filter which ChatGroups to update
     */
    where?: ChatGroupWhereInput
    /**
     * Limit how many ChatGroups to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatGroup upsert
   */
  export type ChatGroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatGroup to update in case it exists.
     */
    where: ChatGroupWhereUniqueInput
    /**
     * In case the ChatGroup found by the `where` argument doesn't exist, create a new ChatGroup with this data.
     */
    create: XOR<ChatGroupCreateInput, ChatGroupUncheckedCreateInput>
    /**
     * In case the ChatGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatGroupUpdateInput, ChatGroupUncheckedUpdateInput>
  }

  /**
   * ChatGroup delete
   */
  export type ChatGroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    /**
     * Filter which ChatGroup to delete.
     */
    where: ChatGroupWhereUniqueInput
  }

  /**
   * ChatGroup deleteMany
   */
  export type ChatGroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatGroups to delete
     */
    where?: ChatGroupWhereInput
    /**
     * Limit how many ChatGroups to delete.
     */
    limit?: number
  }

  /**
   * ChatGroup.members
   */
  export type ChatGroup$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    where?: chat_app_chatgroup_membersWhereInput
    orderBy?: chat_app_chatgroup_membersOrderByWithRelationInput | chat_app_chatgroup_membersOrderByWithRelationInput[]
    cursor?: chat_app_chatgroup_membersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Chat_app_chatgroup_membersScalarFieldEnum | Chat_app_chatgroup_membersScalarFieldEnum[]
  }

  /**
   * ChatGroup.chat_messages
   */
  export type ChatGroup$chat_messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatGroup without action
   */
  export type ChatGroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageAvgAggregateOutputType = {
    id: number | null
    author_id: number | null
    chat_groupId: number | null
  }

  export type ChatMessageSumAggregateOutputType = {
    id: number | null
    author_id: number | null
    chat_groupId: number | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: number | null
    content: string | null
    sent_at: Date | null
    author_id: number | null
    chat_groupId: number | null
    attached_image: string | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: number | null
    content: string | null
    sent_at: Date | null
    author_id: number | null
    chat_groupId: number | null
    attached_image: string | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    content: number
    sent_at: number
    author_id: number
    chat_groupId: number
    attached_image: number
    _all: number
  }


  export type ChatMessageAvgAggregateInputType = {
    id?: true
    author_id?: true
    chat_groupId?: true
  }

  export type ChatMessageSumAggregateInputType = {
    id?: true
    author_id?: true
    chat_groupId?: true
  }

  export type ChatMessageMinAggregateInputType = {
    id?: true
    content?: true
    sent_at?: true
    author_id?: true
    chat_groupId?: true
    attached_image?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    content?: true
    sent_at?: true
    author_id?: true
    chat_groupId?: true
    attached_image?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    content?: true
    sent_at?: true
    author_id?: true
    chat_groupId?: true
    attached_image?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _avg?: ChatMessageAvgAggregateInputType
    _sum?: ChatMessageSumAggregateInputType
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: number
    content: string
    sent_at: Date
    author_id: number
    chat_groupId: number
    attached_image: string
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    sent_at?: boolean
    author_id?: boolean
    chat_groupId?: boolean
    attached_image?: boolean
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    sent_at?: boolean
    author_id?: boolean
    chat_groupId?: boolean
    attached_image?: boolean
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    sent_at?: boolean
    author_id?: boolean
    chat_groupId?: boolean
    attached_image?: boolean
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    content?: boolean
    sent_at?: boolean
    author_id?: boolean
    chat_groupId?: boolean
    attached_image?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "sent_at" | "author_id" | "chat_groupId" | "attached_image", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      author: Prisma.$ProfilePayload<ExtArgs>
      chat_group: Prisma.$ChatGroupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      sent_at: Date
      author_id: number
      chat_groupId: number
      attached_image: string
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chat_group<T extends ChatGroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatGroupDefaultArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'Int'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly sent_at: FieldRef<"ChatMessage", 'DateTime'>
    readonly author_id: FieldRef<"ChatMessage", 'Int'>
    readonly chat_groupId: FieldRef<"ChatMessage", 'Int'>
    readonly attached_image: FieldRef<"ChatMessage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model chat_app_chatgroup_members
   */

  export type AggregateChat_app_chatgroup_members = {
    _count: Chat_app_chatgroup_membersCountAggregateOutputType | null
    _avg: Chat_app_chatgroup_membersAvgAggregateOutputType | null
    _sum: Chat_app_chatgroup_membersSumAggregateOutputType | null
    _min: Chat_app_chatgroup_membersMinAggregateOutputType | null
    _max: Chat_app_chatgroup_membersMaxAggregateOutputType | null
  }

  export type Chat_app_chatgroup_membersAvgAggregateOutputType = {
    chat_groupId: number | null
    profile_id: number | null
  }

  export type Chat_app_chatgroup_membersSumAggregateOutputType = {
    chat_groupId: number | null
    profile_id: number | null
  }

  export type Chat_app_chatgroup_membersMinAggregateOutputType = {
    chat_groupId: number | null
    profile_id: number | null
  }

  export type Chat_app_chatgroup_membersMaxAggregateOutputType = {
    chat_groupId: number | null
    profile_id: number | null
  }

  export type Chat_app_chatgroup_membersCountAggregateOutputType = {
    chat_groupId: number
    profile_id: number
    _all: number
  }


  export type Chat_app_chatgroup_membersAvgAggregateInputType = {
    chat_groupId?: true
    profile_id?: true
  }

  export type Chat_app_chatgroup_membersSumAggregateInputType = {
    chat_groupId?: true
    profile_id?: true
  }

  export type Chat_app_chatgroup_membersMinAggregateInputType = {
    chat_groupId?: true
    profile_id?: true
  }

  export type Chat_app_chatgroup_membersMaxAggregateInputType = {
    chat_groupId?: true
    profile_id?: true
  }

  export type Chat_app_chatgroup_membersCountAggregateInputType = {
    chat_groupId?: true
    profile_id?: true
    _all?: true
  }

  export type Chat_app_chatgroup_membersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chat_app_chatgroup_members to aggregate.
     */
    where?: chat_app_chatgroup_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chat_app_chatgroup_members to fetch.
     */
    orderBy?: chat_app_chatgroup_membersOrderByWithRelationInput | chat_app_chatgroup_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: chat_app_chatgroup_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chat_app_chatgroup_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chat_app_chatgroup_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chat_app_chatgroup_members
    **/
    _count?: true | Chat_app_chatgroup_membersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chat_app_chatgroup_membersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chat_app_chatgroup_membersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chat_app_chatgroup_membersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chat_app_chatgroup_membersMaxAggregateInputType
  }

  export type GetChat_app_chatgroup_membersAggregateType<T extends Chat_app_chatgroup_membersAggregateArgs> = {
        [P in keyof T & keyof AggregateChat_app_chatgroup_members]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat_app_chatgroup_members[P]>
      : GetScalarType<T[P], AggregateChat_app_chatgroup_members[P]>
  }




  export type chat_app_chatgroup_membersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chat_app_chatgroup_membersWhereInput
    orderBy?: chat_app_chatgroup_membersOrderByWithAggregationInput | chat_app_chatgroup_membersOrderByWithAggregationInput[]
    by: Chat_app_chatgroup_membersScalarFieldEnum[] | Chat_app_chatgroup_membersScalarFieldEnum
    having?: chat_app_chatgroup_membersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chat_app_chatgroup_membersCountAggregateInputType | true
    _avg?: Chat_app_chatgroup_membersAvgAggregateInputType
    _sum?: Chat_app_chatgroup_membersSumAggregateInputType
    _min?: Chat_app_chatgroup_membersMinAggregateInputType
    _max?: Chat_app_chatgroup_membersMaxAggregateInputType
  }

  export type Chat_app_chatgroup_membersGroupByOutputType = {
    chat_groupId: number
    profile_id: number
    _count: Chat_app_chatgroup_membersCountAggregateOutputType | null
    _avg: Chat_app_chatgroup_membersAvgAggregateOutputType | null
    _sum: Chat_app_chatgroup_membersSumAggregateOutputType | null
    _min: Chat_app_chatgroup_membersMinAggregateOutputType | null
    _max: Chat_app_chatgroup_membersMaxAggregateOutputType | null
  }

  type GetChat_app_chatgroup_membersGroupByPayload<T extends chat_app_chatgroup_membersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Chat_app_chatgroup_membersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chat_app_chatgroup_membersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chat_app_chatgroup_membersGroupByOutputType[P]>
            : GetScalarType<T[P], Chat_app_chatgroup_membersGroupByOutputType[P]>
        }
      >
    >


  export type chat_app_chatgroup_membersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    chat_groupId?: boolean
    profile_id?: boolean
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat_app_chatgroup_members"]>

  export type chat_app_chatgroup_membersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    chat_groupId?: boolean
    profile_id?: boolean
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat_app_chatgroup_members"]>

  export type chat_app_chatgroup_membersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    chat_groupId?: boolean
    profile_id?: boolean
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat_app_chatgroup_members"]>

  export type chat_app_chatgroup_membersSelectScalar = {
    chat_groupId?: boolean
    profile_id?: boolean
  }

  export type chat_app_chatgroup_membersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"chat_groupId" | "profile_id", ExtArgs["result"]["chat_app_chatgroup_members"]>
  export type chat_app_chatgroup_membersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type chat_app_chatgroup_membersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type chat_app_chatgroup_membersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat_group?: boolean | ChatGroupDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $chat_app_chatgroup_membersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "chat_app_chatgroup_members"
    objects: {
      chat_group: Prisma.$ChatGroupPayload<ExtArgs>
      profile: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      chat_groupId: number
      profile_id: number
    }, ExtArgs["result"]["chat_app_chatgroup_members"]>
    composites: {}
  }

  type chat_app_chatgroup_membersGetPayload<S extends boolean | null | undefined | chat_app_chatgroup_membersDefaultArgs> = $Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload, S>

  type chat_app_chatgroup_membersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<chat_app_chatgroup_membersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Chat_app_chatgroup_membersCountAggregateInputType | true
    }

  export interface chat_app_chatgroup_membersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chat_app_chatgroup_members'], meta: { name: 'chat_app_chatgroup_members' } }
    /**
     * Find zero or one Chat_app_chatgroup_members that matches the filter.
     * @param {chat_app_chatgroup_membersFindUniqueArgs} args - Arguments to find a Chat_app_chatgroup_members
     * @example
     * // Get one Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends chat_app_chatgroup_membersFindUniqueArgs>(args: SelectSubset<T, chat_app_chatgroup_membersFindUniqueArgs<ExtArgs>>): Prisma__chat_app_chatgroup_membersClient<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chat_app_chatgroup_members that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {chat_app_chatgroup_membersFindUniqueOrThrowArgs} args - Arguments to find a Chat_app_chatgroup_members
     * @example
     * // Get one Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends chat_app_chatgroup_membersFindUniqueOrThrowArgs>(args: SelectSubset<T, chat_app_chatgroup_membersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__chat_app_chatgroup_membersClient<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chat_app_chatgroup_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chat_app_chatgroup_membersFindFirstArgs} args - Arguments to find a Chat_app_chatgroup_members
     * @example
     * // Get one Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends chat_app_chatgroup_membersFindFirstArgs>(args?: SelectSubset<T, chat_app_chatgroup_membersFindFirstArgs<ExtArgs>>): Prisma__chat_app_chatgroup_membersClient<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chat_app_chatgroup_members that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chat_app_chatgroup_membersFindFirstOrThrowArgs} args - Arguments to find a Chat_app_chatgroup_members
     * @example
     * // Get one Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends chat_app_chatgroup_membersFindFirstOrThrowArgs>(args?: SelectSubset<T, chat_app_chatgroup_membersFindFirstOrThrowArgs<ExtArgs>>): Prisma__chat_app_chatgroup_membersClient<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chat_app_chatgroup_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chat_app_chatgroup_membersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.findMany()
     * 
     * // Get first 10 Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.findMany({ take: 10 })
     * 
     * // Only select the `chat_groupId`
     * const chat_app_chatgroup_membersWithChat_groupIdOnly = await prisma.chat_app_chatgroup_members.findMany({ select: { chat_groupId: true } })
     * 
     */
    findMany<T extends chat_app_chatgroup_membersFindManyArgs>(args?: SelectSubset<T, chat_app_chatgroup_membersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chat_app_chatgroup_members.
     * @param {chat_app_chatgroup_membersCreateArgs} args - Arguments to create a Chat_app_chatgroup_members.
     * @example
     * // Create one Chat_app_chatgroup_members
     * const Chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.create({
     *   data: {
     *     // ... data to create a Chat_app_chatgroup_members
     *   }
     * })
     * 
     */
    create<T extends chat_app_chatgroup_membersCreateArgs>(args: SelectSubset<T, chat_app_chatgroup_membersCreateArgs<ExtArgs>>): Prisma__chat_app_chatgroup_membersClient<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chat_app_chatgroup_members.
     * @param {chat_app_chatgroup_membersCreateManyArgs} args - Arguments to create many Chat_app_chatgroup_members.
     * @example
     * // Create many Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends chat_app_chatgroup_membersCreateManyArgs>(args?: SelectSubset<T, chat_app_chatgroup_membersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chat_app_chatgroup_members and returns the data saved in the database.
     * @param {chat_app_chatgroup_membersCreateManyAndReturnArgs} args - Arguments to create many Chat_app_chatgroup_members.
     * @example
     * // Create many Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chat_app_chatgroup_members and only return the `chat_groupId`
     * const chat_app_chatgroup_membersWithChat_groupIdOnly = await prisma.chat_app_chatgroup_members.createManyAndReturn({
     *   select: { chat_groupId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends chat_app_chatgroup_membersCreateManyAndReturnArgs>(args?: SelectSubset<T, chat_app_chatgroup_membersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Chat_app_chatgroup_members.
     * @param {chat_app_chatgroup_membersDeleteArgs} args - Arguments to delete one Chat_app_chatgroup_members.
     * @example
     * // Delete one Chat_app_chatgroup_members
     * const Chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.delete({
     *   where: {
     *     // ... filter to delete one Chat_app_chatgroup_members
     *   }
     * })
     * 
     */
    delete<T extends chat_app_chatgroup_membersDeleteArgs>(args: SelectSubset<T, chat_app_chatgroup_membersDeleteArgs<ExtArgs>>): Prisma__chat_app_chatgroup_membersClient<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chat_app_chatgroup_members.
     * @param {chat_app_chatgroup_membersUpdateArgs} args - Arguments to update one Chat_app_chatgroup_members.
     * @example
     * // Update one Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends chat_app_chatgroup_membersUpdateArgs>(args: SelectSubset<T, chat_app_chatgroup_membersUpdateArgs<ExtArgs>>): Prisma__chat_app_chatgroup_membersClient<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chat_app_chatgroup_members.
     * @param {chat_app_chatgroup_membersDeleteManyArgs} args - Arguments to filter Chat_app_chatgroup_members to delete.
     * @example
     * // Delete a few Chat_app_chatgroup_members
     * const { count } = await prisma.chat_app_chatgroup_members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends chat_app_chatgroup_membersDeleteManyArgs>(args?: SelectSubset<T, chat_app_chatgroup_membersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chat_app_chatgroup_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chat_app_chatgroup_membersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends chat_app_chatgroup_membersUpdateManyArgs>(args: SelectSubset<T, chat_app_chatgroup_membersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chat_app_chatgroup_members and returns the data updated in the database.
     * @param {chat_app_chatgroup_membersUpdateManyAndReturnArgs} args - Arguments to update many Chat_app_chatgroup_members.
     * @example
     * // Update many Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Chat_app_chatgroup_members and only return the `chat_groupId`
     * const chat_app_chatgroup_membersWithChat_groupIdOnly = await prisma.chat_app_chatgroup_members.updateManyAndReturn({
     *   select: { chat_groupId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends chat_app_chatgroup_membersUpdateManyAndReturnArgs>(args: SelectSubset<T, chat_app_chatgroup_membersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Chat_app_chatgroup_members.
     * @param {chat_app_chatgroup_membersUpsertArgs} args - Arguments to update or create a Chat_app_chatgroup_members.
     * @example
     * // Update or create a Chat_app_chatgroup_members
     * const chat_app_chatgroup_members = await prisma.chat_app_chatgroup_members.upsert({
     *   create: {
     *     // ... data to create a Chat_app_chatgroup_members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat_app_chatgroup_members we want to update
     *   }
     * })
     */
    upsert<T extends chat_app_chatgroup_membersUpsertArgs>(args: SelectSubset<T, chat_app_chatgroup_membersUpsertArgs<ExtArgs>>): Prisma__chat_app_chatgroup_membersClient<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chat_app_chatgroup_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chat_app_chatgroup_membersCountArgs} args - Arguments to filter Chat_app_chatgroup_members to count.
     * @example
     * // Count the number of Chat_app_chatgroup_members
     * const count = await prisma.chat_app_chatgroup_members.count({
     *   where: {
     *     // ... the filter for the Chat_app_chatgroup_members we want to count
     *   }
     * })
    **/
    count<T extends chat_app_chatgroup_membersCountArgs>(
      args?: Subset<T, chat_app_chatgroup_membersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chat_app_chatgroup_membersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat_app_chatgroup_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chat_app_chatgroup_membersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chat_app_chatgroup_membersAggregateArgs>(args: Subset<T, Chat_app_chatgroup_membersAggregateArgs>): Prisma.PrismaPromise<GetChat_app_chatgroup_membersAggregateType<T>>

    /**
     * Group by Chat_app_chatgroup_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chat_app_chatgroup_membersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends chat_app_chatgroup_membersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: chat_app_chatgroup_membersGroupByArgs['orderBy'] }
        : { orderBy?: chat_app_chatgroup_membersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, chat_app_chatgroup_membersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChat_app_chatgroup_membersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the chat_app_chatgroup_members model
   */
  readonly fields: chat_app_chatgroup_membersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for chat_app_chatgroup_members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__chat_app_chatgroup_membersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chat_group<T extends ChatGroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatGroupDefaultArgs<ExtArgs>>): Prisma__ChatGroupClient<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the chat_app_chatgroup_members model
   */
  interface chat_app_chatgroup_membersFieldRefs {
    readonly chat_groupId: FieldRef<"chat_app_chatgroup_members", 'Int'>
    readonly profile_id: FieldRef<"chat_app_chatgroup_members", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * chat_app_chatgroup_members findUnique
   */
  export type chat_app_chatgroup_membersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * Filter, which chat_app_chatgroup_members to fetch.
     */
    where: chat_app_chatgroup_membersWhereUniqueInput
  }

  /**
   * chat_app_chatgroup_members findUniqueOrThrow
   */
  export type chat_app_chatgroup_membersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * Filter, which chat_app_chatgroup_members to fetch.
     */
    where: chat_app_chatgroup_membersWhereUniqueInput
  }

  /**
   * chat_app_chatgroup_members findFirst
   */
  export type chat_app_chatgroup_membersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * Filter, which chat_app_chatgroup_members to fetch.
     */
    where?: chat_app_chatgroup_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chat_app_chatgroup_members to fetch.
     */
    orderBy?: chat_app_chatgroup_membersOrderByWithRelationInput | chat_app_chatgroup_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chat_app_chatgroup_members.
     */
    cursor?: chat_app_chatgroup_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chat_app_chatgroup_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chat_app_chatgroup_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chat_app_chatgroup_members.
     */
    distinct?: Chat_app_chatgroup_membersScalarFieldEnum | Chat_app_chatgroup_membersScalarFieldEnum[]
  }

  /**
   * chat_app_chatgroup_members findFirstOrThrow
   */
  export type chat_app_chatgroup_membersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * Filter, which chat_app_chatgroup_members to fetch.
     */
    where?: chat_app_chatgroup_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chat_app_chatgroup_members to fetch.
     */
    orderBy?: chat_app_chatgroup_membersOrderByWithRelationInput | chat_app_chatgroup_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chat_app_chatgroup_members.
     */
    cursor?: chat_app_chatgroup_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chat_app_chatgroup_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chat_app_chatgroup_members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chat_app_chatgroup_members.
     */
    distinct?: Chat_app_chatgroup_membersScalarFieldEnum | Chat_app_chatgroup_membersScalarFieldEnum[]
  }

  /**
   * chat_app_chatgroup_members findMany
   */
  export type chat_app_chatgroup_membersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * Filter, which chat_app_chatgroup_members to fetch.
     */
    where?: chat_app_chatgroup_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chat_app_chatgroup_members to fetch.
     */
    orderBy?: chat_app_chatgroup_membersOrderByWithRelationInput | chat_app_chatgroup_membersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chat_app_chatgroup_members.
     */
    cursor?: chat_app_chatgroup_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chat_app_chatgroup_members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chat_app_chatgroup_members.
     */
    skip?: number
    distinct?: Chat_app_chatgroup_membersScalarFieldEnum | Chat_app_chatgroup_membersScalarFieldEnum[]
  }

  /**
   * chat_app_chatgroup_members create
   */
  export type chat_app_chatgroup_membersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * The data needed to create a chat_app_chatgroup_members.
     */
    data: XOR<chat_app_chatgroup_membersCreateInput, chat_app_chatgroup_membersUncheckedCreateInput>
  }

  /**
   * chat_app_chatgroup_members createMany
   */
  export type chat_app_chatgroup_membersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many chat_app_chatgroup_members.
     */
    data: chat_app_chatgroup_membersCreateManyInput | chat_app_chatgroup_membersCreateManyInput[]
  }

  /**
   * chat_app_chatgroup_members createManyAndReturn
   */
  export type chat_app_chatgroup_membersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * The data used to create many chat_app_chatgroup_members.
     */
    data: chat_app_chatgroup_membersCreateManyInput | chat_app_chatgroup_membersCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * chat_app_chatgroup_members update
   */
  export type chat_app_chatgroup_membersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * The data needed to update a chat_app_chatgroup_members.
     */
    data: XOR<chat_app_chatgroup_membersUpdateInput, chat_app_chatgroup_membersUncheckedUpdateInput>
    /**
     * Choose, which chat_app_chatgroup_members to update.
     */
    where: chat_app_chatgroup_membersWhereUniqueInput
  }

  /**
   * chat_app_chatgroup_members updateMany
   */
  export type chat_app_chatgroup_membersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update chat_app_chatgroup_members.
     */
    data: XOR<chat_app_chatgroup_membersUpdateManyMutationInput, chat_app_chatgroup_membersUncheckedUpdateManyInput>
    /**
     * Filter which chat_app_chatgroup_members to update
     */
    where?: chat_app_chatgroup_membersWhereInput
    /**
     * Limit how many chat_app_chatgroup_members to update.
     */
    limit?: number
  }

  /**
   * chat_app_chatgroup_members updateManyAndReturn
   */
  export type chat_app_chatgroup_membersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * The data used to update chat_app_chatgroup_members.
     */
    data: XOR<chat_app_chatgroup_membersUpdateManyMutationInput, chat_app_chatgroup_membersUncheckedUpdateManyInput>
    /**
     * Filter which chat_app_chatgroup_members to update
     */
    where?: chat_app_chatgroup_membersWhereInput
    /**
     * Limit how many chat_app_chatgroup_members to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * chat_app_chatgroup_members upsert
   */
  export type chat_app_chatgroup_membersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * The filter to search for the chat_app_chatgroup_members to update in case it exists.
     */
    where: chat_app_chatgroup_membersWhereUniqueInput
    /**
     * In case the chat_app_chatgroup_members found by the `where` argument doesn't exist, create a new chat_app_chatgroup_members with this data.
     */
    create: XOR<chat_app_chatgroup_membersCreateInput, chat_app_chatgroup_membersUncheckedCreateInput>
    /**
     * In case the chat_app_chatgroup_members was found with the provided `where` argument, update it with this data.
     */
    update: XOR<chat_app_chatgroup_membersUpdateInput, chat_app_chatgroup_membersUncheckedUpdateInput>
  }

  /**
   * chat_app_chatgroup_members delete
   */
  export type chat_app_chatgroup_membersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    /**
     * Filter which chat_app_chatgroup_members to delete.
     */
    where: chat_app_chatgroup_membersWhereUniqueInput
  }

  /**
   * chat_app_chatgroup_members deleteMany
   */
  export type chat_app_chatgroup_membersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chat_app_chatgroup_members to delete
     */
    where?: chat_app_chatgroup_membersWhereInput
    /**
     * Limit how many chat_app_chatgroup_members to delete.
     */
    limit?: number
  }

  /**
   * chat_app_chatgroup_members without action
   */
  export type chat_app_chatgroup_membersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
  }


  /**
   * Model Friendship
   */

  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipAvgAggregateOutputType = {
    id: number | null
    profile1_id: number | null
    profile2_id: number | null
  }

  export type FriendshipSumAggregateOutputType = {
    id: number | null
    profile1_id: number | null
    profile2_id: number | null
  }

  export type FriendshipMinAggregateOutputType = {
    id: number | null
    profile1_id: number | null
    profile2_id: number | null
    accepted: boolean | null
  }

  export type FriendshipMaxAggregateOutputType = {
    id: number | null
    profile1_id: number | null
    profile2_id: number | null
    accepted: boolean | null
  }

  export type FriendshipCountAggregateOutputType = {
    id: number
    profile1_id: number
    profile2_id: number
    accepted: number
    _all: number
  }


  export type FriendshipAvgAggregateInputType = {
    id?: true
    profile1_id?: true
    profile2_id?: true
  }

  export type FriendshipSumAggregateInputType = {
    id?: true
    profile1_id?: true
    profile2_id?: true
  }

  export type FriendshipMinAggregateInputType = {
    id?: true
    profile1_id?: true
    profile2_id?: true
    accepted?: true
  }

  export type FriendshipMaxAggregateInputType = {
    id?: true
    profile1_id?: true
    profile2_id?: true
    accepted?: true
  }

  export type FriendshipCountAggregateInputType = {
    id?: true
    profile1_id?: true
    profile2_id?: true
    accepted?: true
    _all?: true
  }

  export type FriendshipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendship to aggregate.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FriendshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FriendshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type FriendshipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithAggregationInput | FriendshipOrderByWithAggregationInput[]
    by: FriendshipScalarFieldEnum[] | FriendshipScalarFieldEnum
    having?: FriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _avg?: FriendshipAvgAggregateInputType
    _sum?: FriendshipSumAggregateInputType
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }

  export type FriendshipGroupByOutputType = {
    id: number
    profile1_id: number
    profile2_id: number
    accepted: boolean
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profile1_id?: boolean
    profile2_id?: boolean
    accepted?: boolean
    profile1?: boolean | ProfileDefaultArgs<ExtArgs>
    profile2?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profile1_id?: boolean
    profile2_id?: boolean
    accepted?: boolean
    profile1?: boolean | ProfileDefaultArgs<ExtArgs>
    profile2?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profile1_id?: boolean
    profile2_id?: boolean
    accepted?: boolean
    profile1?: boolean | ProfileDefaultArgs<ExtArgs>
    profile2?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friendship"]>

  export type FriendshipSelectScalar = {
    id?: boolean
    profile1_id?: boolean
    profile2_id?: boolean
    accepted?: boolean
  }

  export type FriendshipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "profile1_id" | "profile2_id" | "accepted", ExtArgs["result"]["friendship"]>
  export type FriendshipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile1?: boolean | ProfileDefaultArgs<ExtArgs>
    profile2?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type FriendshipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile1?: boolean | ProfileDefaultArgs<ExtArgs>
    profile2?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type FriendshipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile1?: boolean | ProfileDefaultArgs<ExtArgs>
    profile2?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $FriendshipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Friendship"
    objects: {
      profile1: Prisma.$ProfilePayload<ExtArgs>
      profile2: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      profile1_id: number
      profile2_id: number
      accepted: boolean
    }, ExtArgs["result"]["friendship"]>
    composites: {}
  }

  type FriendshipGetPayload<S extends boolean | null | undefined | FriendshipDefaultArgs> = $Result.GetResult<Prisma.$FriendshipPayload, S>

  type FriendshipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FriendshipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FriendshipCountAggregateInputType | true
    }

  export interface FriendshipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Friendship'], meta: { name: 'Friendship' } }
    /**
     * Find zero or one Friendship that matches the filter.
     * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FriendshipFindUniqueArgs>(args: SelectSubset<T, FriendshipFindUniqueArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Friendship that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FriendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FriendshipFindUniqueOrThrowArgs>(args: SelectSubset<T, FriendshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FriendshipFindFirstArgs>(args?: SelectSubset<T, FriendshipFindFirstArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Friendship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FriendshipFindFirstOrThrowArgs>(args?: SelectSubset<T, FriendshipFindFirstOrThrowArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendshipWithIdOnly = await prisma.friendship.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FriendshipFindManyArgs>(args?: SelectSubset<T, FriendshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Friendship.
     * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
     */
    create<T extends FriendshipCreateArgs>(args: SelectSubset<T, FriendshipCreateArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Friendships.
     * @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FriendshipCreateManyArgs>(args?: SelectSubset<T, FriendshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Friendships and returns the data saved in the database.
     * @param {FriendshipCreateManyAndReturnArgs} args - Arguments to create many Friendships.
     * @example
     * // Create many Friendships
     * const friendship = await prisma.friendship.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Friendships and only return the `id`
     * const friendshipWithIdOnly = await prisma.friendship.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FriendshipCreateManyAndReturnArgs>(args?: SelectSubset<T, FriendshipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Friendship.
     * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
     */
    delete<T extends FriendshipDeleteArgs>(args: SelectSubset<T, FriendshipDeleteArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Friendship.
     * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FriendshipUpdateArgs>(args: SelectSubset<T, FriendshipUpdateArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FriendshipDeleteManyArgs>(args?: SelectSubset<T, FriendshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FriendshipUpdateManyArgs>(args: SelectSubset<T, FriendshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships and returns the data updated in the database.
     * @param {FriendshipUpdateManyAndReturnArgs} args - Arguments to update many Friendships.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Friendships and only return the `id`
     * const friendshipWithIdOnly = await prisma.friendship.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FriendshipUpdateManyAndReturnArgs>(args: SelectSubset<T, FriendshipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Friendship.
     * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
     */
    upsert<T extends FriendshipUpsertArgs>(args: SelectSubset<T, FriendshipUpsertArgs<ExtArgs>>): Prisma__FriendshipClient<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipCountArgs>(
      args?: Subset<T, FriendshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): Prisma.PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Friendship model
   */
  readonly fields: FriendshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FriendshipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile1<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profile2<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Friendship model
   */
  interface FriendshipFieldRefs {
    readonly id: FieldRef<"Friendship", 'Int'>
    readonly profile1_id: FieldRef<"Friendship", 'Int'>
    readonly profile2_id: FieldRef<"Friendship", 'Int'>
    readonly accepted: FieldRef<"Friendship", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Friendship findUnique
   */
  export type FriendshipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findUniqueOrThrow
   */
  export type FriendshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findFirst
   */
  export type FriendshipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship findFirstOrThrow
   */
  export type FriendshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship findMany
   */
  export type FriendshipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Friendship create
   */
  export type FriendshipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The data needed to create a Friendship.
     */
    data: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
  }

  /**
   * Friendship createMany
   */
  export type FriendshipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipCreateManyInput | FriendshipCreateManyInput[]
  }

  /**
   * Friendship createManyAndReturn
   */
  export type FriendshipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * The data used to create many Friendships.
     */
    data: FriendshipCreateManyInput | FriendshipCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Friendship update
   */
  export type FriendshipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The data needed to update a Friendship.
     */
    data: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
    /**
     * Choose, which Friendship to update.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship updateMany
   */
  export type FriendshipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to update.
     */
    limit?: number
  }

  /**
   * Friendship updateManyAndReturn
   */
  export type FriendshipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Friendship upsert
   */
  export type FriendshipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * The filter to search for the Friendship to update in case it exists.
     */
    where: FriendshipWhereUniqueInput
    /**
     * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
     */
    create: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
    /**
     * In case the Friendship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
  }

  /**
   * Friendship delete
   */
  export type FriendshipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    /**
     * Filter which Friendship to delete.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship deleteMany
   */
  export type FriendshipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friendships to delete
     */
    where?: FriendshipWhereInput
    /**
     * Limit how many Friendships to delete.
     */
    limit?: number
  }

  /**
   * Friendship without action
   */
  export type FriendshipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    filename: string | null
    file: string | null
    uploaded_at: Date | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    filename: string | null
    file: string | null
    uploaded_at: Date | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    filename: number
    file: number
    uploaded_at: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    filename?: true
    file?: true
    uploaded_at?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    filename?: true
    file?: true
    uploaded_at?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    filename?: true
    file?: true
    uploaded_at?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: number
    filename: string
    file: string
    uploaded_at: Date
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    file?: boolean
    uploaded_at?: boolean
    album_images?: boolean | Image$album_imagesArgs<ExtArgs>
    PostImages?: boolean | Image$PostImagesArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    file?: boolean
    uploaded_at?: boolean
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    file?: boolean
    uploaded_at?: boolean
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    filename?: boolean
    file?: boolean
    uploaded_at?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "filename" | "file" | "uploaded_at", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album_images?: boolean | Image$album_imagesArgs<ExtArgs>
    PostImages?: boolean | Image$PostImagesArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      album_images: Prisma.$post_app_album_imagesPayload<ExtArgs>[]
      PostImages: Prisma.$post_app_post_imagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      filename: string
      file: string
      uploaded_at: Date
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album_images<T extends Image$album_imagesArgs<ExtArgs> = {}>(args?: Subset<T, Image$album_imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_imagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PostImages<T extends Image$PostImagesArgs<ExtArgs> = {}>(args?: Subset<T, Image$PostImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'Int'>
    readonly filename: FieldRef<"Image", 'String'>
    readonly file: FieldRef<"Image", 'String'>
    readonly uploaded_at: FieldRef<"Image", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image.album_images
   */
  export type Image$album_imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_images
     */
    select?: post_app_album_imagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_images
     */
    omit?: post_app_album_imagesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_imagesInclude<ExtArgs> | null
    where?: post_app_album_imagesWhereInput
    orderBy?: post_app_album_imagesOrderByWithRelationInput | post_app_album_imagesOrderByWithRelationInput[]
    cursor?: post_app_album_imagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_album_imagesScalarFieldEnum | Post_app_album_imagesScalarFieldEnum[]
  }

  /**
   * Image.PostImages
   */
  export type Image$PostImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    where?: post_app_post_imageWhereInput
    orderBy?: post_app_post_imageOrderByWithRelationInput | post_app_post_imageOrderByWithRelationInput[]
    cursor?: post_app_post_imageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_post_imageScalarFieldEnum | Post_app_post_imageScalarFieldEnum[]
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    author_id: number | null
    linkId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    author_id: number | null
    linkId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    author_id: number | null
    linkId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    author_id: number | null
    linkId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    content: number
    author_id: number
    linkId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    author_id?: true
    linkId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    author_id?: true
    linkId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    author_id?: true
    linkId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    author_id?: true
    linkId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    author_id?: true
    linkId?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: number
    title: string
    content: string
    author_id: number
    linkId: number | null
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    author_id?: boolean
    linkId?: boolean
    tags?: boolean | Post$tagsArgs<ExtArgs>
    images?: boolean | Post$imagesArgs<ExtArgs>
    views?: boolean | Post$viewsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    link?: boolean | Post$linkArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    author_id?: boolean
    linkId?: boolean
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    link?: boolean | Post$linkArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    author_id?: boolean
    linkId?: boolean
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    link?: boolean | Post$linkArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    author_id?: boolean
    linkId?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "author_id" | "linkId", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | Post$tagsArgs<ExtArgs>
    images?: boolean | Post$imagesArgs<ExtArgs>
    views?: boolean | Post$viewsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    link?: boolean | Post$linkArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    link?: boolean | Post$linkArgs<ExtArgs>
  }
  export type PostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ProfileDefaultArgs<ExtArgs>
    link?: boolean | Post$linkArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      tags: Prisma.$post_app_post_tagPayload<ExtArgs>[]
      images: Prisma.$post_app_post_imagePayload<ExtArgs>[]
      views: Prisma.$post_app_post_viewsPayload<ExtArgs>[]
      likes: Prisma.$post_app_post_likesPayload<ExtArgs>[]
      author: Prisma.$ProfilePayload<ExtArgs>
      link: Prisma.$LinkPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: string
      author_id: number
      linkId: number | null
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tags<T extends Post$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Post$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends Post$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Post$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    views<T extends Post$viewsArgs<ExtArgs> = {}>(args?: Subset<T, Post$viewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends Post$likesArgs<ExtArgs> = {}>(args?: Subset<T, Post$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    author<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    link<T extends Post$linkArgs<ExtArgs> = {}>(args?: Subset<T, Post$linkArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'Int'>
    readonly title: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly author_id: FieldRef<"Post", 'Int'>
    readonly linkId: FieldRef<"Post", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post.tags
   */
  export type Post$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    where?: post_app_post_tagWhereInput
    orderBy?: post_app_post_tagOrderByWithRelationInput | post_app_post_tagOrderByWithRelationInput[]
    cursor?: post_app_post_tagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_post_tagScalarFieldEnum | Post_app_post_tagScalarFieldEnum[]
  }

  /**
   * Post.images
   */
  export type Post$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    where?: post_app_post_imageWhereInput
    orderBy?: post_app_post_imageOrderByWithRelationInput | post_app_post_imageOrderByWithRelationInput[]
    cursor?: post_app_post_imageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_post_imageScalarFieldEnum | Post_app_post_imageScalarFieldEnum[]
  }

  /**
   * Post.views
   */
  export type Post$viewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    where?: post_app_post_viewsWhereInput
    orderBy?: post_app_post_viewsOrderByWithRelationInput | post_app_post_viewsOrderByWithRelationInput[]
    cursor?: post_app_post_viewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_post_viewsScalarFieldEnum | Post_app_post_viewsScalarFieldEnum[]
  }

  /**
   * Post.likes
   */
  export type Post$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    where?: post_app_post_likesWhereInput
    orderBy?: post_app_post_likesOrderByWithRelationInput | post_app_post_likesOrderByWithRelationInput[]
    cursor?: post_app_post_likesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_post_likesScalarFieldEnum | Post_app_post_likesScalarFieldEnum[]
  }

  /**
   * Post.link
   */
  export type Post$linkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Tags
   */

  export type AggregateTags = {
    _count: TagsCountAggregateOutputType | null
    _avg: TagsAvgAggregateOutputType | null
    _sum: TagsSumAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  export type TagsAvgAggregateOutputType = {
    id: number | null
  }

  export type TagsSumAggregateOutputType = {
    id: number | null
  }

  export type TagsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TagsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TagsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TagsAvgAggregateInputType = {
    id?: true
  }

  export type TagsSumAggregateInputType = {
    id?: true
  }

  export type TagsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TagsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TagsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to aggregate.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagsOrderByWithRelationInput | TagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsMaxAggregateInputType
  }

  export type GetTagsAggregateType<T extends TagsAggregateArgs> = {
        [P in keyof T & keyof AggregateTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTags[P]>
      : GetScalarType<T[P], AggregateTags[P]>
  }




  export type TagsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagsWhereInput
    orderBy?: TagsOrderByWithAggregationInput | TagsOrderByWithAggregationInput[]
    by: TagsScalarFieldEnum[] | TagsScalarFieldEnum
    having?: TagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsCountAggregateInputType | true
    _avg?: TagsAvgAggregateInputType
    _sum?: TagsSumAggregateInputType
    _min?: TagsMinAggregateInputType
    _max?: TagsMaxAggregateInputType
  }

  export type TagsGroupByOutputType = {
    id: number
    name: string
    _count: TagsCountAggregateOutputType | null
    _avg: TagsAvgAggregateOutputType | null
    _sum: TagsSumAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  type GetTagsGroupByPayload<T extends TagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsGroupByOutputType[P]>
            : GetScalarType<T[P], TagsGroupByOutputType[P]>
        }
      >
    >


  export type TagsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    posts?: boolean | Tags$postsArgs<ExtArgs>
    album_tags?: boolean | Tags$album_tagsArgs<ExtArgs>
    _count?: boolean | TagsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tags"]>

  export type TagsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["tags"]>

  export type TagsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["tags"]>

  export type TagsSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type TagsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["tags"]>
  export type TagsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | Tags$postsArgs<ExtArgs>
    album_tags?: boolean | Tags$album_tagsArgs<ExtArgs>
    _count?: boolean | TagsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TagsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tags"
    objects: {
      posts: Prisma.$post_app_post_tagPayload<ExtArgs>[]
      album_tags: Prisma.$post_app_album_tagsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["tags"]>
    composites: {}
  }

  type TagsGetPayload<S extends boolean | null | undefined | TagsDefaultArgs> = $Result.GetResult<Prisma.$TagsPayload, S>

  type TagsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagsCountAggregateInputType | true
    }

  export interface TagsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tags'], meta: { name: 'Tags' } }
    /**
     * Find zero or one Tags that matches the filter.
     * @param {TagsFindUniqueArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagsFindUniqueArgs>(args: SelectSubset<T, TagsFindUniqueArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tags that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagsFindUniqueOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagsFindUniqueOrThrowArgs>(args: SelectSubset<T, TagsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindFirstArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagsFindFirstArgs>(args?: SelectSubset<T, TagsFindFirstArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindFirstOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagsFindFirstOrThrowArgs>(args?: SelectSubset<T, TagsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tags.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagsWithIdOnly = await prisma.tags.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagsFindManyArgs>(args?: SelectSubset<T, TagsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tags.
     * @param {TagsCreateArgs} args - Arguments to create a Tags.
     * @example
     * // Create one Tags
     * const Tags = await prisma.tags.create({
     *   data: {
     *     // ... data to create a Tags
     *   }
     * })
     * 
     */
    create<T extends TagsCreateArgs>(args: SelectSubset<T, TagsCreateArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagsCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tags = await prisma.tags.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagsCreateManyArgs>(args?: SelectSubset<T, TagsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagsCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tags = await prisma.tags.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagsWithIdOnly = await prisma.tags.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagsCreateManyAndReturnArgs>(args?: SelectSubset<T, TagsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tags.
     * @param {TagsDeleteArgs} args - Arguments to delete one Tags.
     * @example
     * // Delete one Tags
     * const Tags = await prisma.tags.delete({
     *   where: {
     *     // ... filter to delete one Tags
     *   }
     * })
     * 
     */
    delete<T extends TagsDeleteArgs>(args: SelectSubset<T, TagsDeleteArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tags.
     * @param {TagsUpdateArgs} args - Arguments to update one Tags.
     * @example
     * // Update one Tags
     * const tags = await prisma.tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagsUpdateArgs>(args: SelectSubset<T, TagsUpdateArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagsDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagsDeleteManyArgs>(args?: SelectSubset<T, TagsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tags = await prisma.tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagsUpdateManyArgs>(args: SelectSubset<T, TagsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags and returns the data updated in the database.
     * @param {TagsUpdateManyAndReturnArgs} args - Arguments to update many Tags.
     * @example
     * // Update many Tags
     * const tags = await prisma.tags.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tags and only return the `id`
     * const tagsWithIdOnly = await prisma.tags.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TagsUpdateManyAndReturnArgs>(args: SelectSubset<T, TagsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tags.
     * @param {TagsUpsertArgs} args - Arguments to update or create a Tags.
     * @example
     * // Update or create a Tags
     * const tags = await prisma.tags.upsert({
     *   create: {
     *     // ... data to create a Tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tags we want to update
     *   }
     * })
     */
    upsert<T extends TagsUpsertArgs>(args: SelectSubset<T, TagsUpsertArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tags.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagsCountArgs>(
      args?: Subset<T, TagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsAggregateArgs>(args: Subset<T, TagsAggregateArgs>): Prisma.PrismaPromise<GetTagsAggregateType<T>>

    /**
     * Group by Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagsGroupByArgs['orderBy'] }
        : { orderBy?: TagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tags model
   */
  readonly fields: TagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posts<T extends Tags$postsArgs<ExtArgs> = {}>(args?: Subset<T, Tags$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    album_tags<T extends Tags$album_tagsArgs<ExtArgs> = {}>(args?: Subset<T, Tags$album_tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_album_tagsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tags model
   */
  interface TagsFieldRefs {
    readonly id: FieldRef<"Tags", 'Int'>
    readonly name: FieldRef<"Tags", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tags findUnique
   */
  export type TagsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where: TagsWhereUniqueInput
  }

  /**
   * Tags findUniqueOrThrow
   */
  export type TagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where: TagsWhereUniqueInput
  }

  /**
   * Tags findFirst
   */
  export type TagsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagsOrderByWithRelationInput | TagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }

  /**
   * Tags findFirstOrThrow
   */
  export type TagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagsOrderByWithRelationInput | TagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }

  /**
   * Tags findMany
   */
  export type TagsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagsOrderByWithRelationInput | TagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }

  /**
   * Tags create
   */
  export type TagsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * The data needed to create a Tags.
     */
    data: XOR<TagsCreateInput, TagsUncheckedCreateInput>
  }

  /**
   * Tags createMany
   */
  export type TagsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagsCreateManyInput | TagsCreateManyInput[]
  }

  /**
   * Tags createManyAndReturn
   */
  export type TagsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagsCreateManyInput | TagsCreateManyInput[]
  }

  /**
   * Tags update
   */
  export type TagsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * The data needed to update a Tags.
     */
    data: XOR<TagsUpdateInput, TagsUncheckedUpdateInput>
    /**
     * Choose, which Tags to update.
     */
    where: TagsWhereUniqueInput
  }

  /**
   * Tags updateMany
   */
  export type TagsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagsUpdateManyMutationInput, TagsUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagsWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tags updateManyAndReturn
   */
  export type TagsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * The data used to update Tags.
     */
    data: XOR<TagsUpdateManyMutationInput, TagsUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagsWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tags upsert
   */
  export type TagsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * The filter to search for the Tags to update in case it exists.
     */
    where: TagsWhereUniqueInput
    /**
     * In case the Tags found by the `where` argument doesn't exist, create a new Tags with this data.
     */
    create: XOR<TagsCreateInput, TagsUncheckedCreateInput>
    /**
     * In case the Tags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagsUpdateInput, TagsUncheckedUpdateInput>
  }

  /**
   * Tags delete
   */
  export type TagsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter which Tags to delete.
     */
    where: TagsWhereUniqueInput
  }

  /**
   * Tags deleteMany
   */
  export type TagsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagsWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tags.posts
   */
  export type Tags$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    where?: post_app_post_tagWhereInput
    orderBy?: post_app_post_tagOrderByWithRelationInput | post_app_post_tagOrderByWithRelationInput[]
    cursor?: post_app_post_tagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_post_tagScalarFieldEnum | Post_app_post_tagScalarFieldEnum[]
  }

  /**
   * Tags.album_tags
   */
  export type Tags$album_tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_album_tags
     */
    select?: post_app_album_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_album_tags
     */
    omit?: post_app_album_tagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_album_tagsInclude<ExtArgs> | null
    where?: post_app_album_tagsWhereInput
    orderBy?: post_app_album_tagsOrderByWithRelationInput | post_app_album_tagsOrderByWithRelationInput[]
    cursor?: post_app_album_tagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_app_album_tagsScalarFieldEnum | Post_app_album_tagsScalarFieldEnum[]
  }

  /**
   * Tags without action
   */
  export type TagsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tags
     */
    omit?: TagsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagsInclude<ExtArgs> | null
  }


  /**
   * Model Link
   */

  export type AggregateLink = {
    _count: LinkCountAggregateOutputType | null
    _avg: LinkAvgAggregateOutputType | null
    _sum: LinkSumAggregateOutputType | null
    _min: LinkMinAggregateOutputType | null
    _max: LinkMaxAggregateOutputType | null
  }

  export type LinkAvgAggregateOutputType = {
    id: number | null
  }

  export type LinkSumAggregateOutputType = {
    id: number | null
  }

  export type LinkMinAggregateOutputType = {
    id: number | null
    url: string | null
  }

  export type LinkMaxAggregateOutputType = {
    id: number | null
    url: string | null
  }

  export type LinkCountAggregateOutputType = {
    id: number
    url: number
    _all: number
  }


  export type LinkAvgAggregateInputType = {
    id?: true
  }

  export type LinkSumAggregateInputType = {
    id?: true
  }

  export type LinkMinAggregateInputType = {
    id?: true
    url?: true
  }

  export type LinkMaxAggregateInputType = {
    id?: true
    url?: true
  }

  export type LinkCountAggregateInputType = {
    id?: true
    url?: true
    _all?: true
  }

  export type LinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Link to aggregate.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Links
    **/
    _count?: true | LinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LinkMaxAggregateInputType
  }

  export type GetLinkAggregateType<T extends LinkAggregateArgs> = {
        [P in keyof T & keyof AggregateLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLink[P]>
      : GetScalarType<T[P], AggregateLink[P]>
  }




  export type LinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
    orderBy?: LinkOrderByWithAggregationInput | LinkOrderByWithAggregationInput[]
    by: LinkScalarFieldEnum[] | LinkScalarFieldEnum
    having?: LinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LinkCountAggregateInputType | true
    _avg?: LinkAvgAggregateInputType
    _sum?: LinkSumAggregateInputType
    _min?: LinkMinAggregateInputType
    _max?: LinkMaxAggregateInputType
  }

  export type LinkGroupByOutputType = {
    id: number
    url: string
    _count: LinkCountAggregateOutputType | null
    _avg: LinkAvgAggregateOutputType | null
    _sum: LinkSumAggregateOutputType | null
    _min: LinkMinAggregateOutputType | null
    _max: LinkMaxAggregateOutputType | null
  }

  type GetLinkGroupByPayload<T extends LinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LinkGroupByOutputType[P]>
            : GetScalarType<T[P], LinkGroupByOutputType[P]>
        }
      >
    >


  export type LinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    post?: boolean | Link$postArgs<ExtArgs>
    _count?: boolean | LinkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["link"]>

  export type LinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
  }, ExtArgs["result"]["link"]>

  export type LinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
  }, ExtArgs["result"]["link"]>

  export type LinkSelectScalar = {
    id?: boolean
    url?: boolean
  }

  export type LinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url", ExtArgs["result"]["link"]>
  export type LinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | Link$postArgs<ExtArgs>
    _count?: boolean | LinkCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Link"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
    }, ExtArgs["result"]["link"]>
    composites: {}
  }

  type LinkGetPayload<S extends boolean | null | undefined | LinkDefaultArgs> = $Result.GetResult<Prisma.$LinkPayload, S>

  type LinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LinkCountAggregateInputType | true
    }

  export interface LinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Link'], meta: { name: 'Link' } }
    /**
     * Find zero or one Link that matches the filter.
     * @param {LinkFindUniqueArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LinkFindUniqueArgs>(args: SelectSubset<T, LinkFindUniqueArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Link that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LinkFindUniqueOrThrowArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LinkFindUniqueOrThrowArgs>(args: SelectSubset<T, LinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Link that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindFirstArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LinkFindFirstArgs>(args?: SelectSubset<T, LinkFindFirstArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Link that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindFirstOrThrowArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LinkFindFirstOrThrowArgs>(args?: SelectSubset<T, LinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Links that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Links
     * const links = await prisma.link.findMany()
     * 
     * // Get first 10 Links
     * const links = await prisma.link.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const linkWithIdOnly = await prisma.link.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LinkFindManyArgs>(args?: SelectSubset<T, LinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Link.
     * @param {LinkCreateArgs} args - Arguments to create a Link.
     * @example
     * // Create one Link
     * const Link = await prisma.link.create({
     *   data: {
     *     // ... data to create a Link
     *   }
     * })
     * 
     */
    create<T extends LinkCreateArgs>(args: SelectSubset<T, LinkCreateArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Links.
     * @param {LinkCreateManyArgs} args - Arguments to create many Links.
     * @example
     * // Create many Links
     * const link = await prisma.link.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LinkCreateManyArgs>(args?: SelectSubset<T, LinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Links and returns the data saved in the database.
     * @param {LinkCreateManyAndReturnArgs} args - Arguments to create many Links.
     * @example
     * // Create many Links
     * const link = await prisma.link.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Links and only return the `id`
     * const linkWithIdOnly = await prisma.link.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LinkCreateManyAndReturnArgs>(args?: SelectSubset<T, LinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Link.
     * @param {LinkDeleteArgs} args - Arguments to delete one Link.
     * @example
     * // Delete one Link
     * const Link = await prisma.link.delete({
     *   where: {
     *     // ... filter to delete one Link
     *   }
     * })
     * 
     */
    delete<T extends LinkDeleteArgs>(args: SelectSubset<T, LinkDeleteArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Link.
     * @param {LinkUpdateArgs} args - Arguments to update one Link.
     * @example
     * // Update one Link
     * const link = await prisma.link.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LinkUpdateArgs>(args: SelectSubset<T, LinkUpdateArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Links.
     * @param {LinkDeleteManyArgs} args - Arguments to filter Links to delete.
     * @example
     * // Delete a few Links
     * const { count } = await prisma.link.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LinkDeleteManyArgs>(args?: SelectSubset<T, LinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Links
     * const link = await prisma.link.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LinkUpdateManyArgs>(args: SelectSubset<T, LinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Links and returns the data updated in the database.
     * @param {LinkUpdateManyAndReturnArgs} args - Arguments to update many Links.
     * @example
     * // Update many Links
     * const link = await prisma.link.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Links and only return the `id`
     * const linkWithIdOnly = await prisma.link.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LinkUpdateManyAndReturnArgs>(args: SelectSubset<T, LinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Link.
     * @param {LinkUpsertArgs} args - Arguments to update or create a Link.
     * @example
     * // Update or create a Link
     * const link = await prisma.link.upsert({
     *   create: {
     *     // ... data to create a Link
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Link we want to update
     *   }
     * })
     */
    upsert<T extends LinkUpsertArgs>(args: SelectSubset<T, LinkUpsertArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkCountArgs} args - Arguments to filter Links to count.
     * @example
     * // Count the number of Links
     * const count = await prisma.link.count({
     *   where: {
     *     // ... the filter for the Links we want to count
     *   }
     * })
    **/
    count<T extends LinkCountArgs>(
      args?: Subset<T, LinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Link.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LinkAggregateArgs>(args: Subset<T, LinkAggregateArgs>): Prisma.PrismaPromise<GetLinkAggregateType<T>>

    /**
     * Group by Link.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LinkGroupByArgs['orderBy'] }
        : { orderBy?: LinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Link model
   */
  readonly fields: LinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Link.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends Link$postArgs<ExtArgs> = {}>(args?: Subset<T, Link$postArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Link model
   */
  interface LinkFieldRefs {
    readonly id: FieldRef<"Link", 'Int'>
    readonly url: FieldRef<"Link", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Link findUnique
   */
  export type LinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link findUniqueOrThrow
   */
  export type LinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link findFirst
   */
  export type LinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Links.
     */
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Link findFirstOrThrow
   */
  export type LinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Links.
     */
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Link findMany
   */
  export type LinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Links to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Link create
   */
  export type LinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The data needed to create a Link.
     */
    data: XOR<LinkCreateInput, LinkUncheckedCreateInput>
  }

  /**
   * Link createMany
   */
  export type LinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Links.
     */
    data: LinkCreateManyInput | LinkCreateManyInput[]
  }

  /**
   * Link createManyAndReturn
   */
  export type LinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * The data used to create many Links.
     */
    data: LinkCreateManyInput | LinkCreateManyInput[]
  }

  /**
   * Link update
   */
  export type LinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The data needed to update a Link.
     */
    data: XOR<LinkUpdateInput, LinkUncheckedUpdateInput>
    /**
     * Choose, which Link to update.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link updateMany
   */
  export type LinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Links.
     */
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyInput>
    /**
     * Filter which Links to update
     */
    where?: LinkWhereInput
    /**
     * Limit how many Links to update.
     */
    limit?: number
  }

  /**
   * Link updateManyAndReturn
   */
  export type LinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * The data used to update Links.
     */
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyInput>
    /**
     * Filter which Links to update
     */
    where?: LinkWhereInput
    /**
     * Limit how many Links to update.
     */
    limit?: number
  }

  /**
   * Link upsert
   */
  export type LinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The filter to search for the Link to update in case it exists.
     */
    where: LinkWhereUniqueInput
    /**
     * In case the Link found by the `where` argument doesn't exist, create a new Link with this data.
     */
    create: XOR<LinkCreateInput, LinkUncheckedCreateInput>
    /**
     * In case the Link was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LinkUpdateInput, LinkUncheckedUpdateInput>
  }

  /**
   * Link delete
   */
  export type LinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter which Link to delete.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link deleteMany
   */
  export type LinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Links to delete
     */
    where?: LinkWhereInput
    /**
     * Limit how many Links to delete.
     */
    limit?: number
  }

  /**
   * Link.post
   */
  export type Link$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Link without action
   */
  export type LinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Link
     */
    omit?: LinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
  }


  /**
   * Model post_app_post_tag
   */

  export type AggregatePost_app_post_tag = {
    _count: Post_app_post_tagCountAggregateOutputType | null
    _avg: Post_app_post_tagAvgAggregateOutputType | null
    _sum: Post_app_post_tagSumAggregateOutputType | null
    _min: Post_app_post_tagMinAggregateOutputType | null
    _max: Post_app_post_tagMaxAggregateOutputType | null
  }

  export type Post_app_post_tagAvgAggregateOutputType = {
    post_id: number | null
    tag_id: number | null
    id: number | null
  }

  export type Post_app_post_tagSumAggregateOutputType = {
    post_id: number | null
    tag_id: number | null
    id: number | null
  }

  export type Post_app_post_tagMinAggregateOutputType = {
    post_id: number | null
    tag_id: number | null
    id: number | null
  }

  export type Post_app_post_tagMaxAggregateOutputType = {
    post_id: number | null
    tag_id: number | null
    id: number | null
  }

  export type Post_app_post_tagCountAggregateOutputType = {
    post_id: number
    tag_id: number
    id: number
    _all: number
  }


  export type Post_app_post_tagAvgAggregateInputType = {
    post_id?: true
    tag_id?: true
    id?: true
  }

  export type Post_app_post_tagSumAggregateInputType = {
    post_id?: true
    tag_id?: true
    id?: true
  }

  export type Post_app_post_tagMinAggregateInputType = {
    post_id?: true
    tag_id?: true
    id?: true
  }

  export type Post_app_post_tagMaxAggregateInputType = {
    post_id?: true
    tag_id?: true
    id?: true
  }

  export type Post_app_post_tagCountAggregateInputType = {
    post_id?: true
    tag_id?: true
    id?: true
    _all?: true
  }

  export type Post_app_post_tagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_post_tag to aggregate.
     */
    where?: post_app_post_tagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_tags to fetch.
     */
    orderBy?: post_app_post_tagOrderByWithRelationInput | post_app_post_tagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: post_app_post_tagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned post_app_post_tags
    **/
    _count?: true | Post_app_post_tagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_app_post_tagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_app_post_tagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_app_post_tagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_app_post_tagMaxAggregateInputType
  }

  export type GetPost_app_post_tagAggregateType<T extends Post_app_post_tagAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_app_post_tag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_app_post_tag[P]>
      : GetScalarType<T[P], AggregatePost_app_post_tag[P]>
  }




  export type post_app_post_tagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_tagWhereInput
    orderBy?: post_app_post_tagOrderByWithAggregationInput | post_app_post_tagOrderByWithAggregationInput[]
    by: Post_app_post_tagScalarFieldEnum[] | Post_app_post_tagScalarFieldEnum
    having?: post_app_post_tagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_app_post_tagCountAggregateInputType | true
    _avg?: Post_app_post_tagAvgAggregateInputType
    _sum?: Post_app_post_tagSumAggregateInputType
    _min?: Post_app_post_tagMinAggregateInputType
    _max?: Post_app_post_tagMaxAggregateInputType
  }

  export type Post_app_post_tagGroupByOutputType = {
    post_id: number
    tag_id: number
    id: number
    _count: Post_app_post_tagCountAggregateOutputType | null
    _avg: Post_app_post_tagAvgAggregateOutputType | null
    _sum: Post_app_post_tagSumAggregateOutputType | null
    _min: Post_app_post_tagMinAggregateOutputType | null
    _max: Post_app_post_tagMaxAggregateOutputType | null
  }

  type GetPost_app_post_tagGroupByPayload<T extends post_app_post_tagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Post_app_post_tagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_app_post_tagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_app_post_tagGroupByOutputType[P]>
            : GetScalarType<T[P], Post_app_post_tagGroupByOutputType[P]>
        }
      >
    >


  export type post_app_post_tagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    tag_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_tag"]>

  export type post_app_post_tagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    tag_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_tag"]>

  export type post_app_post_tagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    tag_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_tag"]>

  export type post_app_post_tagSelectScalar = {
    post_id?: boolean
    tag_id?: boolean
    id?: boolean
  }

  export type post_app_post_tagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"post_id" | "tag_id" | "id", ExtArgs["result"]["post_app_post_tag"]>
  export type post_app_post_tagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }
  export type post_app_post_tagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }
  export type post_app_post_tagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }

  export type $post_app_post_tagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post_app_post_tag"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      tag: Prisma.$TagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      post_id: number
      tag_id: number
      id: number
    }, ExtArgs["result"]["post_app_post_tag"]>
    composites: {}
  }

  type post_app_post_tagGetPayload<S extends boolean | null | undefined | post_app_post_tagDefaultArgs> = $Result.GetResult<Prisma.$post_app_post_tagPayload, S>

  type post_app_post_tagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<post_app_post_tagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Post_app_post_tagCountAggregateInputType | true
    }

  export interface post_app_post_tagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post_app_post_tag'], meta: { name: 'post_app_post_tag' } }
    /**
     * Find zero or one Post_app_post_tag that matches the filter.
     * @param {post_app_post_tagFindUniqueArgs} args - Arguments to find a Post_app_post_tag
     * @example
     * // Get one Post_app_post_tag
     * const post_app_post_tag = await prisma.post_app_post_tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends post_app_post_tagFindUniqueArgs>(args: SelectSubset<T, post_app_post_tagFindUniqueArgs<ExtArgs>>): Prisma__post_app_post_tagClient<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post_app_post_tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {post_app_post_tagFindUniqueOrThrowArgs} args - Arguments to find a Post_app_post_tag
     * @example
     * // Get one Post_app_post_tag
     * const post_app_post_tag = await prisma.post_app_post_tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends post_app_post_tagFindUniqueOrThrowArgs>(args: SelectSubset<T, post_app_post_tagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__post_app_post_tagClient<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_post_tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_tagFindFirstArgs} args - Arguments to find a Post_app_post_tag
     * @example
     * // Get one Post_app_post_tag
     * const post_app_post_tag = await prisma.post_app_post_tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends post_app_post_tagFindFirstArgs>(args?: SelectSubset<T, post_app_post_tagFindFirstArgs<ExtArgs>>): Prisma__post_app_post_tagClient<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_post_tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_tagFindFirstOrThrowArgs} args - Arguments to find a Post_app_post_tag
     * @example
     * // Get one Post_app_post_tag
     * const post_app_post_tag = await prisma.post_app_post_tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends post_app_post_tagFindFirstOrThrowArgs>(args?: SelectSubset<T, post_app_post_tagFindFirstOrThrowArgs<ExtArgs>>): Prisma__post_app_post_tagClient<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Post_app_post_tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_tagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_app_post_tags
     * const post_app_post_tags = await prisma.post_app_post_tag.findMany()
     * 
     * // Get first 10 Post_app_post_tags
     * const post_app_post_tags = await prisma.post_app_post_tag.findMany({ take: 10 })
     * 
     * // Only select the `post_id`
     * const post_app_post_tagWithPost_idOnly = await prisma.post_app_post_tag.findMany({ select: { post_id: true } })
     * 
     */
    findMany<T extends post_app_post_tagFindManyArgs>(args?: SelectSubset<T, post_app_post_tagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post_app_post_tag.
     * @param {post_app_post_tagCreateArgs} args - Arguments to create a Post_app_post_tag.
     * @example
     * // Create one Post_app_post_tag
     * const Post_app_post_tag = await prisma.post_app_post_tag.create({
     *   data: {
     *     // ... data to create a Post_app_post_tag
     *   }
     * })
     * 
     */
    create<T extends post_app_post_tagCreateArgs>(args: SelectSubset<T, post_app_post_tagCreateArgs<ExtArgs>>): Prisma__post_app_post_tagClient<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Post_app_post_tags.
     * @param {post_app_post_tagCreateManyArgs} args - Arguments to create many Post_app_post_tags.
     * @example
     * // Create many Post_app_post_tags
     * const post_app_post_tag = await prisma.post_app_post_tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends post_app_post_tagCreateManyArgs>(args?: SelectSubset<T, post_app_post_tagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Post_app_post_tags and returns the data saved in the database.
     * @param {post_app_post_tagCreateManyAndReturnArgs} args - Arguments to create many Post_app_post_tags.
     * @example
     * // Create many Post_app_post_tags
     * const post_app_post_tag = await prisma.post_app_post_tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Post_app_post_tags and only return the `post_id`
     * const post_app_post_tagWithPost_idOnly = await prisma.post_app_post_tag.createManyAndReturn({
     *   select: { post_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends post_app_post_tagCreateManyAndReturnArgs>(args?: SelectSubset<T, post_app_post_tagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post_app_post_tag.
     * @param {post_app_post_tagDeleteArgs} args - Arguments to delete one Post_app_post_tag.
     * @example
     * // Delete one Post_app_post_tag
     * const Post_app_post_tag = await prisma.post_app_post_tag.delete({
     *   where: {
     *     // ... filter to delete one Post_app_post_tag
     *   }
     * })
     * 
     */
    delete<T extends post_app_post_tagDeleteArgs>(args: SelectSubset<T, post_app_post_tagDeleteArgs<ExtArgs>>): Prisma__post_app_post_tagClient<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post_app_post_tag.
     * @param {post_app_post_tagUpdateArgs} args - Arguments to update one Post_app_post_tag.
     * @example
     * // Update one Post_app_post_tag
     * const post_app_post_tag = await prisma.post_app_post_tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends post_app_post_tagUpdateArgs>(args: SelectSubset<T, post_app_post_tagUpdateArgs<ExtArgs>>): Prisma__post_app_post_tagClient<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Post_app_post_tags.
     * @param {post_app_post_tagDeleteManyArgs} args - Arguments to filter Post_app_post_tags to delete.
     * @example
     * // Delete a few Post_app_post_tags
     * const { count } = await prisma.post_app_post_tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends post_app_post_tagDeleteManyArgs>(args?: SelectSubset<T, post_app_post_tagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_post_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_tagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_app_post_tags
     * const post_app_post_tag = await prisma.post_app_post_tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends post_app_post_tagUpdateManyArgs>(args: SelectSubset<T, post_app_post_tagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_post_tags and returns the data updated in the database.
     * @param {post_app_post_tagUpdateManyAndReturnArgs} args - Arguments to update many Post_app_post_tags.
     * @example
     * // Update many Post_app_post_tags
     * const post_app_post_tag = await prisma.post_app_post_tag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Post_app_post_tags and only return the `post_id`
     * const post_app_post_tagWithPost_idOnly = await prisma.post_app_post_tag.updateManyAndReturn({
     *   select: { post_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends post_app_post_tagUpdateManyAndReturnArgs>(args: SelectSubset<T, post_app_post_tagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post_app_post_tag.
     * @param {post_app_post_tagUpsertArgs} args - Arguments to update or create a Post_app_post_tag.
     * @example
     * // Update or create a Post_app_post_tag
     * const post_app_post_tag = await prisma.post_app_post_tag.upsert({
     *   create: {
     *     // ... data to create a Post_app_post_tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_app_post_tag we want to update
     *   }
     * })
     */
    upsert<T extends post_app_post_tagUpsertArgs>(args: SelectSubset<T, post_app_post_tagUpsertArgs<ExtArgs>>): Prisma__post_app_post_tagClient<$Result.GetResult<Prisma.$post_app_post_tagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Post_app_post_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_tagCountArgs} args - Arguments to filter Post_app_post_tags to count.
     * @example
     * // Count the number of Post_app_post_tags
     * const count = await prisma.post_app_post_tag.count({
     *   where: {
     *     // ... the filter for the Post_app_post_tags we want to count
     *   }
     * })
    **/
    count<T extends post_app_post_tagCountArgs>(
      args?: Subset<T, post_app_post_tagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_app_post_tagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_app_post_tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_app_post_tagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_app_post_tagAggregateArgs>(args: Subset<T, Post_app_post_tagAggregateArgs>): Prisma.PrismaPromise<GetPost_app_post_tagAggregateType<T>>

    /**
     * Group by Post_app_post_tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_tagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends post_app_post_tagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: post_app_post_tagGroupByArgs['orderBy'] }
        : { orderBy?: post_app_post_tagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, post_app_post_tagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_app_post_tagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post_app_post_tag model
   */
  readonly fields: post_app_post_tagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post_app_post_tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__post_app_post_tagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagsDefaultArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the post_app_post_tag model
   */
  interface post_app_post_tagFieldRefs {
    readonly post_id: FieldRef<"post_app_post_tag", 'Int'>
    readonly tag_id: FieldRef<"post_app_post_tag", 'Int'>
    readonly id: FieldRef<"post_app_post_tag", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * post_app_post_tag findUnique
   */
  export type post_app_post_tagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_tag to fetch.
     */
    where: post_app_post_tagWhereUniqueInput
  }

  /**
   * post_app_post_tag findUniqueOrThrow
   */
  export type post_app_post_tagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_tag to fetch.
     */
    where: post_app_post_tagWhereUniqueInput
  }

  /**
   * post_app_post_tag findFirst
   */
  export type post_app_post_tagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_tag to fetch.
     */
    where?: post_app_post_tagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_tags to fetch.
     */
    orderBy?: post_app_post_tagOrderByWithRelationInput | post_app_post_tagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_post_tags.
     */
    cursor?: post_app_post_tagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_post_tags.
     */
    distinct?: Post_app_post_tagScalarFieldEnum | Post_app_post_tagScalarFieldEnum[]
  }

  /**
   * post_app_post_tag findFirstOrThrow
   */
  export type post_app_post_tagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_tag to fetch.
     */
    where?: post_app_post_tagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_tags to fetch.
     */
    orderBy?: post_app_post_tagOrderByWithRelationInput | post_app_post_tagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_post_tags.
     */
    cursor?: post_app_post_tagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_post_tags.
     */
    distinct?: Post_app_post_tagScalarFieldEnum | Post_app_post_tagScalarFieldEnum[]
  }

  /**
   * post_app_post_tag findMany
   */
  export type post_app_post_tagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_tags to fetch.
     */
    where?: post_app_post_tagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_tags to fetch.
     */
    orderBy?: post_app_post_tagOrderByWithRelationInput | post_app_post_tagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing post_app_post_tags.
     */
    cursor?: post_app_post_tagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_tags.
     */
    skip?: number
    distinct?: Post_app_post_tagScalarFieldEnum | Post_app_post_tagScalarFieldEnum[]
  }

  /**
   * post_app_post_tag create
   */
  export type post_app_post_tagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * The data needed to create a post_app_post_tag.
     */
    data: XOR<post_app_post_tagCreateInput, post_app_post_tagUncheckedCreateInput>
  }

  /**
   * post_app_post_tag createMany
   */
  export type post_app_post_tagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many post_app_post_tags.
     */
    data: post_app_post_tagCreateManyInput | post_app_post_tagCreateManyInput[]
  }

  /**
   * post_app_post_tag createManyAndReturn
   */
  export type post_app_post_tagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * The data used to create many post_app_post_tags.
     */
    data: post_app_post_tagCreateManyInput | post_app_post_tagCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_post_tag update
   */
  export type post_app_post_tagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * The data needed to update a post_app_post_tag.
     */
    data: XOR<post_app_post_tagUpdateInput, post_app_post_tagUncheckedUpdateInput>
    /**
     * Choose, which post_app_post_tag to update.
     */
    where: post_app_post_tagWhereUniqueInput
  }

  /**
   * post_app_post_tag updateMany
   */
  export type post_app_post_tagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update post_app_post_tags.
     */
    data: XOR<post_app_post_tagUpdateManyMutationInput, post_app_post_tagUncheckedUpdateManyInput>
    /**
     * Filter which post_app_post_tags to update
     */
    where?: post_app_post_tagWhereInput
    /**
     * Limit how many post_app_post_tags to update.
     */
    limit?: number
  }

  /**
   * post_app_post_tag updateManyAndReturn
   */
  export type post_app_post_tagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * The data used to update post_app_post_tags.
     */
    data: XOR<post_app_post_tagUpdateManyMutationInput, post_app_post_tagUncheckedUpdateManyInput>
    /**
     * Filter which post_app_post_tags to update
     */
    where?: post_app_post_tagWhereInput
    /**
     * Limit how many post_app_post_tags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_post_tag upsert
   */
  export type post_app_post_tagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * The filter to search for the post_app_post_tag to update in case it exists.
     */
    where: post_app_post_tagWhereUniqueInput
    /**
     * In case the post_app_post_tag found by the `where` argument doesn't exist, create a new post_app_post_tag with this data.
     */
    create: XOR<post_app_post_tagCreateInput, post_app_post_tagUncheckedCreateInput>
    /**
     * In case the post_app_post_tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<post_app_post_tagUpdateInput, post_app_post_tagUncheckedUpdateInput>
  }

  /**
   * post_app_post_tag delete
   */
  export type post_app_post_tagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
    /**
     * Filter which post_app_post_tag to delete.
     */
    where: post_app_post_tagWhereUniqueInput
  }

  /**
   * post_app_post_tag deleteMany
   */
  export type post_app_post_tagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_post_tags to delete
     */
    where?: post_app_post_tagWhereInput
    /**
     * Limit how many post_app_post_tags to delete.
     */
    limit?: number
  }

  /**
   * post_app_post_tag without action
   */
  export type post_app_post_tagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_tag
     */
    select?: post_app_post_tagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_tag
     */
    omit?: post_app_post_tagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_tagInclude<ExtArgs> | null
  }


  /**
   * Model post_app_post_likes
   */

  export type AggregatePost_app_post_likes = {
    _count: Post_app_post_likesCountAggregateOutputType | null
    _avg: Post_app_post_likesAvgAggregateOutputType | null
    _sum: Post_app_post_likesSumAggregateOutputType | null
    _min: Post_app_post_likesMinAggregateOutputType | null
    _max: Post_app_post_likesMaxAggregateOutputType | null
  }

  export type Post_app_post_likesAvgAggregateOutputType = {
    post_id: number | null
    id: number | null
  }

  export type Post_app_post_likesSumAggregateOutputType = {
    post_id: number | null
    id: number | null
  }

  export type Post_app_post_likesMinAggregateOutputType = {
    post_id: number | null
    id: number | null
  }

  export type Post_app_post_likesMaxAggregateOutputType = {
    post_id: number | null
    id: number | null
  }

  export type Post_app_post_likesCountAggregateOutputType = {
    post_id: number
    id: number
    _all: number
  }


  export type Post_app_post_likesAvgAggregateInputType = {
    post_id?: true
    id?: true
  }

  export type Post_app_post_likesSumAggregateInputType = {
    post_id?: true
    id?: true
  }

  export type Post_app_post_likesMinAggregateInputType = {
    post_id?: true
    id?: true
  }

  export type Post_app_post_likesMaxAggregateInputType = {
    post_id?: true
    id?: true
  }

  export type Post_app_post_likesCountAggregateInputType = {
    post_id?: true
    id?: true
    _all?: true
  }

  export type Post_app_post_likesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_post_likes to aggregate.
     */
    where?: post_app_post_likesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_likes to fetch.
     */
    orderBy?: post_app_post_likesOrderByWithRelationInput | post_app_post_likesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: post_app_post_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned post_app_post_likes
    **/
    _count?: true | Post_app_post_likesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_app_post_likesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_app_post_likesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_app_post_likesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_app_post_likesMaxAggregateInputType
  }

  export type GetPost_app_post_likesAggregateType<T extends Post_app_post_likesAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_app_post_likes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_app_post_likes[P]>
      : GetScalarType<T[P], AggregatePost_app_post_likes[P]>
  }




  export type post_app_post_likesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_likesWhereInput
    orderBy?: post_app_post_likesOrderByWithAggregationInput | post_app_post_likesOrderByWithAggregationInput[]
    by: Post_app_post_likesScalarFieldEnum[] | Post_app_post_likesScalarFieldEnum
    having?: post_app_post_likesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_app_post_likesCountAggregateInputType | true
    _avg?: Post_app_post_likesAvgAggregateInputType
    _sum?: Post_app_post_likesSumAggregateInputType
    _min?: Post_app_post_likesMinAggregateInputType
    _max?: Post_app_post_likesMaxAggregateInputType
  }

  export type Post_app_post_likesGroupByOutputType = {
    post_id: number
    id: number
    _count: Post_app_post_likesCountAggregateOutputType | null
    _avg: Post_app_post_likesAvgAggregateOutputType | null
    _sum: Post_app_post_likesSumAggregateOutputType | null
    _min: Post_app_post_likesMinAggregateOutputType | null
    _max: Post_app_post_likesMaxAggregateOutputType | null
  }

  type GetPost_app_post_likesGroupByPayload<T extends post_app_post_likesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Post_app_post_likesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_app_post_likesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_app_post_likesGroupByOutputType[P]>
            : GetScalarType<T[P], Post_app_post_likesGroupByOutputType[P]>
        }
      >
    >


  export type post_app_post_likesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_likes"]>

  export type post_app_post_likesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_likes"]>

  export type post_app_post_likesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_likes"]>

  export type post_app_post_likesSelectScalar = {
    post_id?: boolean
    id?: boolean
  }

  export type post_app_post_likesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"post_id" | "id", ExtArgs["result"]["post_app_post_likes"]>
  export type post_app_post_likesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type post_app_post_likesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type post_app_post_likesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $post_app_post_likesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post_app_post_likes"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      post_id: number
      id: number
    }, ExtArgs["result"]["post_app_post_likes"]>
    composites: {}
  }

  type post_app_post_likesGetPayload<S extends boolean | null | undefined | post_app_post_likesDefaultArgs> = $Result.GetResult<Prisma.$post_app_post_likesPayload, S>

  type post_app_post_likesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<post_app_post_likesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Post_app_post_likesCountAggregateInputType | true
    }

  export interface post_app_post_likesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post_app_post_likes'], meta: { name: 'post_app_post_likes' } }
    /**
     * Find zero or one Post_app_post_likes that matches the filter.
     * @param {post_app_post_likesFindUniqueArgs} args - Arguments to find a Post_app_post_likes
     * @example
     * // Get one Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends post_app_post_likesFindUniqueArgs>(args: SelectSubset<T, post_app_post_likesFindUniqueArgs<ExtArgs>>): Prisma__post_app_post_likesClient<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post_app_post_likes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {post_app_post_likesFindUniqueOrThrowArgs} args - Arguments to find a Post_app_post_likes
     * @example
     * // Get one Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends post_app_post_likesFindUniqueOrThrowArgs>(args: SelectSubset<T, post_app_post_likesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__post_app_post_likesClient<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_post_likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_likesFindFirstArgs} args - Arguments to find a Post_app_post_likes
     * @example
     * // Get one Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends post_app_post_likesFindFirstArgs>(args?: SelectSubset<T, post_app_post_likesFindFirstArgs<ExtArgs>>): Prisma__post_app_post_likesClient<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_post_likes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_likesFindFirstOrThrowArgs} args - Arguments to find a Post_app_post_likes
     * @example
     * // Get one Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends post_app_post_likesFindFirstOrThrowArgs>(args?: SelectSubset<T, post_app_post_likesFindFirstOrThrowArgs<ExtArgs>>): Prisma__post_app_post_likesClient<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Post_app_post_likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_likesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.findMany()
     * 
     * // Get first 10 Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.findMany({ take: 10 })
     * 
     * // Only select the `post_id`
     * const post_app_post_likesWithPost_idOnly = await prisma.post_app_post_likes.findMany({ select: { post_id: true } })
     * 
     */
    findMany<T extends post_app_post_likesFindManyArgs>(args?: SelectSubset<T, post_app_post_likesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post_app_post_likes.
     * @param {post_app_post_likesCreateArgs} args - Arguments to create a Post_app_post_likes.
     * @example
     * // Create one Post_app_post_likes
     * const Post_app_post_likes = await prisma.post_app_post_likes.create({
     *   data: {
     *     // ... data to create a Post_app_post_likes
     *   }
     * })
     * 
     */
    create<T extends post_app_post_likesCreateArgs>(args: SelectSubset<T, post_app_post_likesCreateArgs<ExtArgs>>): Prisma__post_app_post_likesClient<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Post_app_post_likes.
     * @param {post_app_post_likesCreateManyArgs} args - Arguments to create many Post_app_post_likes.
     * @example
     * // Create many Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends post_app_post_likesCreateManyArgs>(args?: SelectSubset<T, post_app_post_likesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Post_app_post_likes and returns the data saved in the database.
     * @param {post_app_post_likesCreateManyAndReturnArgs} args - Arguments to create many Post_app_post_likes.
     * @example
     * // Create many Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Post_app_post_likes and only return the `post_id`
     * const post_app_post_likesWithPost_idOnly = await prisma.post_app_post_likes.createManyAndReturn({
     *   select: { post_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends post_app_post_likesCreateManyAndReturnArgs>(args?: SelectSubset<T, post_app_post_likesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post_app_post_likes.
     * @param {post_app_post_likesDeleteArgs} args - Arguments to delete one Post_app_post_likes.
     * @example
     * // Delete one Post_app_post_likes
     * const Post_app_post_likes = await prisma.post_app_post_likes.delete({
     *   where: {
     *     // ... filter to delete one Post_app_post_likes
     *   }
     * })
     * 
     */
    delete<T extends post_app_post_likesDeleteArgs>(args: SelectSubset<T, post_app_post_likesDeleteArgs<ExtArgs>>): Prisma__post_app_post_likesClient<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post_app_post_likes.
     * @param {post_app_post_likesUpdateArgs} args - Arguments to update one Post_app_post_likes.
     * @example
     * // Update one Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends post_app_post_likesUpdateArgs>(args: SelectSubset<T, post_app_post_likesUpdateArgs<ExtArgs>>): Prisma__post_app_post_likesClient<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Post_app_post_likes.
     * @param {post_app_post_likesDeleteManyArgs} args - Arguments to filter Post_app_post_likes to delete.
     * @example
     * // Delete a few Post_app_post_likes
     * const { count } = await prisma.post_app_post_likes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends post_app_post_likesDeleteManyArgs>(args?: SelectSubset<T, post_app_post_likesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_post_likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_likesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends post_app_post_likesUpdateManyArgs>(args: SelectSubset<T, post_app_post_likesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_post_likes and returns the data updated in the database.
     * @param {post_app_post_likesUpdateManyAndReturnArgs} args - Arguments to update many Post_app_post_likes.
     * @example
     * // Update many Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Post_app_post_likes and only return the `post_id`
     * const post_app_post_likesWithPost_idOnly = await prisma.post_app_post_likes.updateManyAndReturn({
     *   select: { post_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends post_app_post_likesUpdateManyAndReturnArgs>(args: SelectSubset<T, post_app_post_likesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post_app_post_likes.
     * @param {post_app_post_likesUpsertArgs} args - Arguments to update or create a Post_app_post_likes.
     * @example
     * // Update or create a Post_app_post_likes
     * const post_app_post_likes = await prisma.post_app_post_likes.upsert({
     *   create: {
     *     // ... data to create a Post_app_post_likes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_app_post_likes we want to update
     *   }
     * })
     */
    upsert<T extends post_app_post_likesUpsertArgs>(args: SelectSubset<T, post_app_post_likesUpsertArgs<ExtArgs>>): Prisma__post_app_post_likesClient<$Result.GetResult<Prisma.$post_app_post_likesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Post_app_post_likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_likesCountArgs} args - Arguments to filter Post_app_post_likes to count.
     * @example
     * // Count the number of Post_app_post_likes
     * const count = await prisma.post_app_post_likes.count({
     *   where: {
     *     // ... the filter for the Post_app_post_likes we want to count
     *   }
     * })
    **/
    count<T extends post_app_post_likesCountArgs>(
      args?: Subset<T, post_app_post_likesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_app_post_likesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_app_post_likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_app_post_likesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_app_post_likesAggregateArgs>(args: Subset<T, Post_app_post_likesAggregateArgs>): Prisma.PrismaPromise<GetPost_app_post_likesAggregateType<T>>

    /**
     * Group by Post_app_post_likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_likesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends post_app_post_likesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: post_app_post_likesGroupByArgs['orderBy'] }
        : { orderBy?: post_app_post_likesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, post_app_post_likesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_app_post_likesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post_app_post_likes model
   */
  readonly fields: post_app_post_likesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post_app_post_likes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__post_app_post_likesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the post_app_post_likes model
   */
  interface post_app_post_likesFieldRefs {
    readonly post_id: FieldRef<"post_app_post_likes", 'Int'>
    readonly id: FieldRef<"post_app_post_likes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * post_app_post_likes findUnique
   */
  export type post_app_post_likesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_likes to fetch.
     */
    where: post_app_post_likesWhereUniqueInput
  }

  /**
   * post_app_post_likes findUniqueOrThrow
   */
  export type post_app_post_likesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_likes to fetch.
     */
    where: post_app_post_likesWhereUniqueInput
  }

  /**
   * post_app_post_likes findFirst
   */
  export type post_app_post_likesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_likes to fetch.
     */
    where?: post_app_post_likesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_likes to fetch.
     */
    orderBy?: post_app_post_likesOrderByWithRelationInput | post_app_post_likesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_post_likes.
     */
    cursor?: post_app_post_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_post_likes.
     */
    distinct?: Post_app_post_likesScalarFieldEnum | Post_app_post_likesScalarFieldEnum[]
  }

  /**
   * post_app_post_likes findFirstOrThrow
   */
  export type post_app_post_likesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_likes to fetch.
     */
    where?: post_app_post_likesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_likes to fetch.
     */
    orderBy?: post_app_post_likesOrderByWithRelationInput | post_app_post_likesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_post_likes.
     */
    cursor?: post_app_post_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_post_likes.
     */
    distinct?: Post_app_post_likesScalarFieldEnum | Post_app_post_likesScalarFieldEnum[]
  }

  /**
   * post_app_post_likes findMany
   */
  export type post_app_post_likesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_likes to fetch.
     */
    where?: post_app_post_likesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_likes to fetch.
     */
    orderBy?: post_app_post_likesOrderByWithRelationInput | post_app_post_likesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing post_app_post_likes.
     */
    cursor?: post_app_post_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_likes.
     */
    skip?: number
    distinct?: Post_app_post_likesScalarFieldEnum | Post_app_post_likesScalarFieldEnum[]
  }

  /**
   * post_app_post_likes create
   */
  export type post_app_post_likesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * The data needed to create a post_app_post_likes.
     */
    data: XOR<post_app_post_likesCreateInput, post_app_post_likesUncheckedCreateInput>
  }

  /**
   * post_app_post_likes createMany
   */
  export type post_app_post_likesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many post_app_post_likes.
     */
    data: post_app_post_likesCreateManyInput | post_app_post_likesCreateManyInput[]
  }

  /**
   * post_app_post_likes createManyAndReturn
   */
  export type post_app_post_likesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * The data used to create many post_app_post_likes.
     */
    data: post_app_post_likesCreateManyInput | post_app_post_likesCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_post_likes update
   */
  export type post_app_post_likesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * The data needed to update a post_app_post_likes.
     */
    data: XOR<post_app_post_likesUpdateInput, post_app_post_likesUncheckedUpdateInput>
    /**
     * Choose, which post_app_post_likes to update.
     */
    where: post_app_post_likesWhereUniqueInput
  }

  /**
   * post_app_post_likes updateMany
   */
  export type post_app_post_likesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update post_app_post_likes.
     */
    data: XOR<post_app_post_likesUpdateManyMutationInput, post_app_post_likesUncheckedUpdateManyInput>
    /**
     * Filter which post_app_post_likes to update
     */
    where?: post_app_post_likesWhereInput
    /**
     * Limit how many post_app_post_likes to update.
     */
    limit?: number
  }

  /**
   * post_app_post_likes updateManyAndReturn
   */
  export type post_app_post_likesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * The data used to update post_app_post_likes.
     */
    data: XOR<post_app_post_likesUpdateManyMutationInput, post_app_post_likesUncheckedUpdateManyInput>
    /**
     * Filter which post_app_post_likes to update
     */
    where?: post_app_post_likesWhereInput
    /**
     * Limit how many post_app_post_likes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_post_likes upsert
   */
  export type post_app_post_likesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * The filter to search for the post_app_post_likes to update in case it exists.
     */
    where: post_app_post_likesWhereUniqueInput
    /**
     * In case the post_app_post_likes found by the `where` argument doesn't exist, create a new post_app_post_likes with this data.
     */
    create: XOR<post_app_post_likesCreateInput, post_app_post_likesUncheckedCreateInput>
    /**
     * In case the post_app_post_likes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<post_app_post_likesUpdateInput, post_app_post_likesUncheckedUpdateInput>
  }

  /**
   * post_app_post_likes delete
   */
  export type post_app_post_likesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
    /**
     * Filter which post_app_post_likes to delete.
     */
    where: post_app_post_likesWhereUniqueInput
  }

  /**
   * post_app_post_likes deleteMany
   */
  export type post_app_post_likesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_post_likes to delete
     */
    where?: post_app_post_likesWhereInput
    /**
     * Limit how many post_app_post_likes to delete.
     */
    limit?: number
  }

  /**
   * post_app_post_likes without action
   */
  export type post_app_post_likesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_likes
     */
    select?: post_app_post_likesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_likes
     */
    omit?: post_app_post_likesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_likesInclude<ExtArgs> | null
  }


  /**
   * Model post_app_post_views
   */

  export type AggregatePost_app_post_views = {
    _count: Post_app_post_viewsCountAggregateOutputType | null
    _avg: Post_app_post_viewsAvgAggregateOutputType | null
    _sum: Post_app_post_viewsSumAggregateOutputType | null
    _min: Post_app_post_viewsMinAggregateOutputType | null
    _max: Post_app_post_viewsMaxAggregateOutputType | null
  }

  export type Post_app_post_viewsAvgAggregateOutputType = {
    post_id: number | null
    id: number | null
  }

  export type Post_app_post_viewsSumAggregateOutputType = {
    post_id: number | null
    id: number | null
  }

  export type Post_app_post_viewsMinAggregateOutputType = {
    post_id: number | null
    id: number | null
  }

  export type Post_app_post_viewsMaxAggregateOutputType = {
    post_id: number | null
    id: number | null
  }

  export type Post_app_post_viewsCountAggregateOutputType = {
    post_id: number
    id: number
    _all: number
  }


  export type Post_app_post_viewsAvgAggregateInputType = {
    post_id?: true
    id?: true
  }

  export type Post_app_post_viewsSumAggregateInputType = {
    post_id?: true
    id?: true
  }

  export type Post_app_post_viewsMinAggregateInputType = {
    post_id?: true
    id?: true
  }

  export type Post_app_post_viewsMaxAggregateInputType = {
    post_id?: true
    id?: true
  }

  export type Post_app_post_viewsCountAggregateInputType = {
    post_id?: true
    id?: true
    _all?: true
  }

  export type Post_app_post_viewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_post_views to aggregate.
     */
    where?: post_app_post_viewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_views to fetch.
     */
    orderBy?: post_app_post_viewsOrderByWithRelationInput | post_app_post_viewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: post_app_post_viewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned post_app_post_views
    **/
    _count?: true | Post_app_post_viewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_app_post_viewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_app_post_viewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_app_post_viewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_app_post_viewsMaxAggregateInputType
  }

  export type GetPost_app_post_viewsAggregateType<T extends Post_app_post_viewsAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_app_post_views]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_app_post_views[P]>
      : GetScalarType<T[P], AggregatePost_app_post_views[P]>
  }




  export type post_app_post_viewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_viewsWhereInput
    orderBy?: post_app_post_viewsOrderByWithAggregationInput | post_app_post_viewsOrderByWithAggregationInput[]
    by: Post_app_post_viewsScalarFieldEnum[] | Post_app_post_viewsScalarFieldEnum
    having?: post_app_post_viewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_app_post_viewsCountAggregateInputType | true
    _avg?: Post_app_post_viewsAvgAggregateInputType
    _sum?: Post_app_post_viewsSumAggregateInputType
    _min?: Post_app_post_viewsMinAggregateInputType
    _max?: Post_app_post_viewsMaxAggregateInputType
  }

  export type Post_app_post_viewsGroupByOutputType = {
    post_id: number
    id: number
    _count: Post_app_post_viewsCountAggregateOutputType | null
    _avg: Post_app_post_viewsAvgAggregateOutputType | null
    _sum: Post_app_post_viewsSumAggregateOutputType | null
    _min: Post_app_post_viewsMinAggregateOutputType | null
    _max: Post_app_post_viewsMaxAggregateOutputType | null
  }

  type GetPost_app_post_viewsGroupByPayload<T extends post_app_post_viewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Post_app_post_viewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_app_post_viewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_app_post_viewsGroupByOutputType[P]>
            : GetScalarType<T[P], Post_app_post_viewsGroupByOutputType[P]>
        }
      >
    >


  export type post_app_post_viewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_views"]>

  export type post_app_post_viewsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_views"]>

  export type post_app_post_viewsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_views"]>

  export type post_app_post_viewsSelectScalar = {
    post_id?: boolean
    id?: boolean
  }

  export type post_app_post_viewsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"post_id" | "id", ExtArgs["result"]["post_app_post_views"]>
  export type post_app_post_viewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type post_app_post_viewsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type post_app_post_viewsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $post_app_post_viewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post_app_post_views"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      post_id: number
      id: number
    }, ExtArgs["result"]["post_app_post_views"]>
    composites: {}
  }

  type post_app_post_viewsGetPayload<S extends boolean | null | undefined | post_app_post_viewsDefaultArgs> = $Result.GetResult<Prisma.$post_app_post_viewsPayload, S>

  type post_app_post_viewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<post_app_post_viewsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Post_app_post_viewsCountAggregateInputType | true
    }

  export interface post_app_post_viewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post_app_post_views'], meta: { name: 'post_app_post_views' } }
    /**
     * Find zero or one Post_app_post_views that matches the filter.
     * @param {post_app_post_viewsFindUniqueArgs} args - Arguments to find a Post_app_post_views
     * @example
     * // Get one Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends post_app_post_viewsFindUniqueArgs>(args: SelectSubset<T, post_app_post_viewsFindUniqueArgs<ExtArgs>>): Prisma__post_app_post_viewsClient<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post_app_post_views that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {post_app_post_viewsFindUniqueOrThrowArgs} args - Arguments to find a Post_app_post_views
     * @example
     * // Get one Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends post_app_post_viewsFindUniqueOrThrowArgs>(args: SelectSubset<T, post_app_post_viewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__post_app_post_viewsClient<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_post_views that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_viewsFindFirstArgs} args - Arguments to find a Post_app_post_views
     * @example
     * // Get one Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends post_app_post_viewsFindFirstArgs>(args?: SelectSubset<T, post_app_post_viewsFindFirstArgs<ExtArgs>>): Prisma__post_app_post_viewsClient<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_post_views that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_viewsFindFirstOrThrowArgs} args - Arguments to find a Post_app_post_views
     * @example
     * // Get one Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends post_app_post_viewsFindFirstOrThrowArgs>(args?: SelectSubset<T, post_app_post_viewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__post_app_post_viewsClient<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Post_app_post_views that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_viewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.findMany()
     * 
     * // Get first 10 Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.findMany({ take: 10 })
     * 
     * // Only select the `post_id`
     * const post_app_post_viewsWithPost_idOnly = await prisma.post_app_post_views.findMany({ select: { post_id: true } })
     * 
     */
    findMany<T extends post_app_post_viewsFindManyArgs>(args?: SelectSubset<T, post_app_post_viewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post_app_post_views.
     * @param {post_app_post_viewsCreateArgs} args - Arguments to create a Post_app_post_views.
     * @example
     * // Create one Post_app_post_views
     * const Post_app_post_views = await prisma.post_app_post_views.create({
     *   data: {
     *     // ... data to create a Post_app_post_views
     *   }
     * })
     * 
     */
    create<T extends post_app_post_viewsCreateArgs>(args: SelectSubset<T, post_app_post_viewsCreateArgs<ExtArgs>>): Prisma__post_app_post_viewsClient<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Post_app_post_views.
     * @param {post_app_post_viewsCreateManyArgs} args - Arguments to create many Post_app_post_views.
     * @example
     * // Create many Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends post_app_post_viewsCreateManyArgs>(args?: SelectSubset<T, post_app_post_viewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Post_app_post_views and returns the data saved in the database.
     * @param {post_app_post_viewsCreateManyAndReturnArgs} args - Arguments to create many Post_app_post_views.
     * @example
     * // Create many Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Post_app_post_views and only return the `post_id`
     * const post_app_post_viewsWithPost_idOnly = await prisma.post_app_post_views.createManyAndReturn({
     *   select: { post_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends post_app_post_viewsCreateManyAndReturnArgs>(args?: SelectSubset<T, post_app_post_viewsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post_app_post_views.
     * @param {post_app_post_viewsDeleteArgs} args - Arguments to delete one Post_app_post_views.
     * @example
     * // Delete one Post_app_post_views
     * const Post_app_post_views = await prisma.post_app_post_views.delete({
     *   where: {
     *     // ... filter to delete one Post_app_post_views
     *   }
     * })
     * 
     */
    delete<T extends post_app_post_viewsDeleteArgs>(args: SelectSubset<T, post_app_post_viewsDeleteArgs<ExtArgs>>): Prisma__post_app_post_viewsClient<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post_app_post_views.
     * @param {post_app_post_viewsUpdateArgs} args - Arguments to update one Post_app_post_views.
     * @example
     * // Update one Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends post_app_post_viewsUpdateArgs>(args: SelectSubset<T, post_app_post_viewsUpdateArgs<ExtArgs>>): Prisma__post_app_post_viewsClient<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Post_app_post_views.
     * @param {post_app_post_viewsDeleteManyArgs} args - Arguments to filter Post_app_post_views to delete.
     * @example
     * // Delete a few Post_app_post_views
     * const { count } = await prisma.post_app_post_views.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends post_app_post_viewsDeleteManyArgs>(args?: SelectSubset<T, post_app_post_viewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_post_views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_viewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends post_app_post_viewsUpdateManyArgs>(args: SelectSubset<T, post_app_post_viewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_post_views and returns the data updated in the database.
     * @param {post_app_post_viewsUpdateManyAndReturnArgs} args - Arguments to update many Post_app_post_views.
     * @example
     * // Update many Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Post_app_post_views and only return the `post_id`
     * const post_app_post_viewsWithPost_idOnly = await prisma.post_app_post_views.updateManyAndReturn({
     *   select: { post_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends post_app_post_viewsUpdateManyAndReturnArgs>(args: SelectSubset<T, post_app_post_viewsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post_app_post_views.
     * @param {post_app_post_viewsUpsertArgs} args - Arguments to update or create a Post_app_post_views.
     * @example
     * // Update or create a Post_app_post_views
     * const post_app_post_views = await prisma.post_app_post_views.upsert({
     *   create: {
     *     // ... data to create a Post_app_post_views
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_app_post_views we want to update
     *   }
     * })
     */
    upsert<T extends post_app_post_viewsUpsertArgs>(args: SelectSubset<T, post_app_post_viewsUpsertArgs<ExtArgs>>): Prisma__post_app_post_viewsClient<$Result.GetResult<Prisma.$post_app_post_viewsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Post_app_post_views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_viewsCountArgs} args - Arguments to filter Post_app_post_views to count.
     * @example
     * // Count the number of Post_app_post_views
     * const count = await prisma.post_app_post_views.count({
     *   where: {
     *     // ... the filter for the Post_app_post_views we want to count
     *   }
     * })
    **/
    count<T extends post_app_post_viewsCountArgs>(
      args?: Subset<T, post_app_post_viewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_app_post_viewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_app_post_views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_app_post_viewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_app_post_viewsAggregateArgs>(args: Subset<T, Post_app_post_viewsAggregateArgs>): Prisma.PrismaPromise<GetPost_app_post_viewsAggregateType<T>>

    /**
     * Group by Post_app_post_views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_viewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends post_app_post_viewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: post_app_post_viewsGroupByArgs['orderBy'] }
        : { orderBy?: post_app_post_viewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, post_app_post_viewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_app_post_viewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post_app_post_views model
   */
  readonly fields: post_app_post_viewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post_app_post_views.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__post_app_post_viewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the post_app_post_views model
   */
  interface post_app_post_viewsFieldRefs {
    readonly post_id: FieldRef<"post_app_post_views", 'Int'>
    readonly id: FieldRef<"post_app_post_views", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * post_app_post_views findUnique
   */
  export type post_app_post_viewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_views to fetch.
     */
    where: post_app_post_viewsWhereUniqueInput
  }

  /**
   * post_app_post_views findUniqueOrThrow
   */
  export type post_app_post_viewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_views to fetch.
     */
    where: post_app_post_viewsWhereUniqueInput
  }

  /**
   * post_app_post_views findFirst
   */
  export type post_app_post_viewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_views to fetch.
     */
    where?: post_app_post_viewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_views to fetch.
     */
    orderBy?: post_app_post_viewsOrderByWithRelationInput | post_app_post_viewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_post_views.
     */
    cursor?: post_app_post_viewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_post_views.
     */
    distinct?: Post_app_post_viewsScalarFieldEnum | Post_app_post_viewsScalarFieldEnum[]
  }

  /**
   * post_app_post_views findFirstOrThrow
   */
  export type post_app_post_viewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_views to fetch.
     */
    where?: post_app_post_viewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_views to fetch.
     */
    orderBy?: post_app_post_viewsOrderByWithRelationInput | post_app_post_viewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_post_views.
     */
    cursor?: post_app_post_viewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_post_views.
     */
    distinct?: Post_app_post_viewsScalarFieldEnum | Post_app_post_viewsScalarFieldEnum[]
  }

  /**
   * post_app_post_views findMany
   */
  export type post_app_post_viewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_views to fetch.
     */
    where?: post_app_post_viewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_views to fetch.
     */
    orderBy?: post_app_post_viewsOrderByWithRelationInput | post_app_post_viewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing post_app_post_views.
     */
    cursor?: post_app_post_viewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_views.
     */
    skip?: number
    distinct?: Post_app_post_viewsScalarFieldEnum | Post_app_post_viewsScalarFieldEnum[]
  }

  /**
   * post_app_post_views create
   */
  export type post_app_post_viewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * The data needed to create a post_app_post_views.
     */
    data: XOR<post_app_post_viewsCreateInput, post_app_post_viewsUncheckedCreateInput>
  }

  /**
   * post_app_post_views createMany
   */
  export type post_app_post_viewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many post_app_post_views.
     */
    data: post_app_post_viewsCreateManyInput | post_app_post_viewsCreateManyInput[]
  }

  /**
   * post_app_post_views createManyAndReturn
   */
  export type post_app_post_viewsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * The data used to create many post_app_post_views.
     */
    data: post_app_post_viewsCreateManyInput | post_app_post_viewsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_post_views update
   */
  export type post_app_post_viewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * The data needed to update a post_app_post_views.
     */
    data: XOR<post_app_post_viewsUpdateInput, post_app_post_viewsUncheckedUpdateInput>
    /**
     * Choose, which post_app_post_views to update.
     */
    where: post_app_post_viewsWhereUniqueInput
  }

  /**
   * post_app_post_views updateMany
   */
  export type post_app_post_viewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update post_app_post_views.
     */
    data: XOR<post_app_post_viewsUpdateManyMutationInput, post_app_post_viewsUncheckedUpdateManyInput>
    /**
     * Filter which post_app_post_views to update
     */
    where?: post_app_post_viewsWhereInput
    /**
     * Limit how many post_app_post_views to update.
     */
    limit?: number
  }

  /**
   * post_app_post_views updateManyAndReturn
   */
  export type post_app_post_viewsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * The data used to update post_app_post_views.
     */
    data: XOR<post_app_post_viewsUpdateManyMutationInput, post_app_post_viewsUncheckedUpdateManyInput>
    /**
     * Filter which post_app_post_views to update
     */
    where?: post_app_post_viewsWhereInput
    /**
     * Limit how many post_app_post_views to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_post_views upsert
   */
  export type post_app_post_viewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * The filter to search for the post_app_post_views to update in case it exists.
     */
    where: post_app_post_viewsWhereUniqueInput
    /**
     * In case the post_app_post_views found by the `where` argument doesn't exist, create a new post_app_post_views with this data.
     */
    create: XOR<post_app_post_viewsCreateInput, post_app_post_viewsUncheckedCreateInput>
    /**
     * In case the post_app_post_views was found with the provided `where` argument, update it with this data.
     */
    update: XOR<post_app_post_viewsUpdateInput, post_app_post_viewsUncheckedUpdateInput>
  }

  /**
   * post_app_post_views delete
   */
  export type post_app_post_viewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
    /**
     * Filter which post_app_post_views to delete.
     */
    where: post_app_post_viewsWhereUniqueInput
  }

  /**
   * post_app_post_views deleteMany
   */
  export type post_app_post_viewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_post_views to delete
     */
    where?: post_app_post_viewsWhereInput
    /**
     * Limit how many post_app_post_views to delete.
     */
    limit?: number
  }

  /**
   * post_app_post_views without action
   */
  export type post_app_post_viewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_views
     */
    select?: post_app_post_viewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_views
     */
    omit?: post_app_post_viewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_viewsInclude<ExtArgs> | null
  }


  /**
   * Model post_app_post_image
   */

  export type AggregatePost_app_post_image = {
    _count: Post_app_post_imageCountAggregateOutputType | null
    _avg: Post_app_post_imageAvgAggregateOutputType | null
    _sum: Post_app_post_imageSumAggregateOutputType | null
    _min: Post_app_post_imageMinAggregateOutputType | null
    _max: Post_app_post_imageMaxAggregateOutputType | null
  }

  export type Post_app_post_imageAvgAggregateOutputType = {
    post_id: number | null
    image_id: number | null
    id: number | null
  }

  export type Post_app_post_imageSumAggregateOutputType = {
    post_id: number | null
    image_id: number | null
    id: number | null
  }

  export type Post_app_post_imageMinAggregateOutputType = {
    post_id: number | null
    image_id: number | null
    id: number | null
  }

  export type Post_app_post_imageMaxAggregateOutputType = {
    post_id: number | null
    image_id: number | null
    id: number | null
  }

  export type Post_app_post_imageCountAggregateOutputType = {
    post_id: number
    image_id: number
    id: number
    _all: number
  }


  export type Post_app_post_imageAvgAggregateInputType = {
    post_id?: true
    image_id?: true
    id?: true
  }

  export type Post_app_post_imageSumAggregateInputType = {
    post_id?: true
    image_id?: true
    id?: true
  }

  export type Post_app_post_imageMinAggregateInputType = {
    post_id?: true
    image_id?: true
    id?: true
  }

  export type Post_app_post_imageMaxAggregateInputType = {
    post_id?: true
    image_id?: true
    id?: true
  }

  export type Post_app_post_imageCountAggregateInputType = {
    post_id?: true
    image_id?: true
    id?: true
    _all?: true
  }

  export type Post_app_post_imageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_post_image to aggregate.
     */
    where?: post_app_post_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_images to fetch.
     */
    orderBy?: post_app_post_imageOrderByWithRelationInput | post_app_post_imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: post_app_post_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned post_app_post_images
    **/
    _count?: true | Post_app_post_imageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_app_post_imageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_app_post_imageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_app_post_imageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_app_post_imageMaxAggregateInputType
  }

  export type GetPost_app_post_imageAggregateType<T extends Post_app_post_imageAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_app_post_image]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_app_post_image[P]>
      : GetScalarType<T[P], AggregatePost_app_post_image[P]>
  }




  export type post_app_post_imageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_app_post_imageWhereInput
    orderBy?: post_app_post_imageOrderByWithAggregationInput | post_app_post_imageOrderByWithAggregationInput[]
    by: Post_app_post_imageScalarFieldEnum[] | Post_app_post_imageScalarFieldEnum
    having?: post_app_post_imageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_app_post_imageCountAggregateInputType | true
    _avg?: Post_app_post_imageAvgAggregateInputType
    _sum?: Post_app_post_imageSumAggregateInputType
    _min?: Post_app_post_imageMinAggregateInputType
    _max?: Post_app_post_imageMaxAggregateInputType
  }

  export type Post_app_post_imageGroupByOutputType = {
    post_id: number
    image_id: number
    id: number
    _count: Post_app_post_imageCountAggregateOutputType | null
    _avg: Post_app_post_imageAvgAggregateOutputType | null
    _sum: Post_app_post_imageSumAggregateOutputType | null
    _min: Post_app_post_imageMinAggregateOutputType | null
    _max: Post_app_post_imageMaxAggregateOutputType | null
  }

  type GetPost_app_post_imageGroupByPayload<T extends post_app_post_imageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Post_app_post_imageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_app_post_imageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_app_post_imageGroupByOutputType[P]>
            : GetScalarType<T[P], Post_app_post_imageGroupByOutputType[P]>
        }
      >
    >


  export type post_app_post_imageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    image_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_image"]>

  export type post_app_post_imageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    image_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_image"]>

  export type post_app_post_imageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    image_id?: boolean
    id?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_app_post_image"]>

  export type post_app_post_imageSelectScalar = {
    post_id?: boolean
    image_id?: boolean
    id?: boolean
  }

  export type post_app_post_imageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"post_id" | "image_id" | "id", ExtArgs["result"]["post_app_post_image"]>
  export type post_app_post_imageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }
  export type post_app_post_imageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }
  export type post_app_post_imageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }

  export type $post_app_post_imagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post_app_post_image"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      image: Prisma.$ImagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      post_id: number
      image_id: number
      id: number
    }, ExtArgs["result"]["post_app_post_image"]>
    composites: {}
  }

  type post_app_post_imageGetPayload<S extends boolean | null | undefined | post_app_post_imageDefaultArgs> = $Result.GetResult<Prisma.$post_app_post_imagePayload, S>

  type post_app_post_imageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<post_app_post_imageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Post_app_post_imageCountAggregateInputType | true
    }

  export interface post_app_post_imageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post_app_post_image'], meta: { name: 'post_app_post_image' } }
    /**
     * Find zero or one Post_app_post_image that matches the filter.
     * @param {post_app_post_imageFindUniqueArgs} args - Arguments to find a Post_app_post_image
     * @example
     * // Get one Post_app_post_image
     * const post_app_post_image = await prisma.post_app_post_image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends post_app_post_imageFindUniqueArgs>(args: SelectSubset<T, post_app_post_imageFindUniqueArgs<ExtArgs>>): Prisma__post_app_post_imageClient<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post_app_post_image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {post_app_post_imageFindUniqueOrThrowArgs} args - Arguments to find a Post_app_post_image
     * @example
     * // Get one Post_app_post_image
     * const post_app_post_image = await prisma.post_app_post_image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends post_app_post_imageFindUniqueOrThrowArgs>(args: SelectSubset<T, post_app_post_imageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__post_app_post_imageClient<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_post_image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_imageFindFirstArgs} args - Arguments to find a Post_app_post_image
     * @example
     * // Get one Post_app_post_image
     * const post_app_post_image = await prisma.post_app_post_image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends post_app_post_imageFindFirstArgs>(args?: SelectSubset<T, post_app_post_imageFindFirstArgs<ExtArgs>>): Prisma__post_app_post_imageClient<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_app_post_image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_imageFindFirstOrThrowArgs} args - Arguments to find a Post_app_post_image
     * @example
     * // Get one Post_app_post_image
     * const post_app_post_image = await prisma.post_app_post_image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends post_app_post_imageFindFirstOrThrowArgs>(args?: SelectSubset<T, post_app_post_imageFindFirstOrThrowArgs<ExtArgs>>): Prisma__post_app_post_imageClient<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Post_app_post_images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_imageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_app_post_images
     * const post_app_post_images = await prisma.post_app_post_image.findMany()
     * 
     * // Get first 10 Post_app_post_images
     * const post_app_post_images = await prisma.post_app_post_image.findMany({ take: 10 })
     * 
     * // Only select the `post_id`
     * const post_app_post_imageWithPost_idOnly = await prisma.post_app_post_image.findMany({ select: { post_id: true } })
     * 
     */
    findMany<T extends post_app_post_imageFindManyArgs>(args?: SelectSubset<T, post_app_post_imageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post_app_post_image.
     * @param {post_app_post_imageCreateArgs} args - Arguments to create a Post_app_post_image.
     * @example
     * // Create one Post_app_post_image
     * const Post_app_post_image = await prisma.post_app_post_image.create({
     *   data: {
     *     // ... data to create a Post_app_post_image
     *   }
     * })
     * 
     */
    create<T extends post_app_post_imageCreateArgs>(args: SelectSubset<T, post_app_post_imageCreateArgs<ExtArgs>>): Prisma__post_app_post_imageClient<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Post_app_post_images.
     * @param {post_app_post_imageCreateManyArgs} args - Arguments to create many Post_app_post_images.
     * @example
     * // Create many Post_app_post_images
     * const post_app_post_image = await prisma.post_app_post_image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends post_app_post_imageCreateManyArgs>(args?: SelectSubset<T, post_app_post_imageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Post_app_post_images and returns the data saved in the database.
     * @param {post_app_post_imageCreateManyAndReturnArgs} args - Arguments to create many Post_app_post_images.
     * @example
     * // Create many Post_app_post_images
     * const post_app_post_image = await prisma.post_app_post_image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Post_app_post_images and only return the `post_id`
     * const post_app_post_imageWithPost_idOnly = await prisma.post_app_post_image.createManyAndReturn({
     *   select: { post_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends post_app_post_imageCreateManyAndReturnArgs>(args?: SelectSubset<T, post_app_post_imageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post_app_post_image.
     * @param {post_app_post_imageDeleteArgs} args - Arguments to delete one Post_app_post_image.
     * @example
     * // Delete one Post_app_post_image
     * const Post_app_post_image = await prisma.post_app_post_image.delete({
     *   where: {
     *     // ... filter to delete one Post_app_post_image
     *   }
     * })
     * 
     */
    delete<T extends post_app_post_imageDeleteArgs>(args: SelectSubset<T, post_app_post_imageDeleteArgs<ExtArgs>>): Prisma__post_app_post_imageClient<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post_app_post_image.
     * @param {post_app_post_imageUpdateArgs} args - Arguments to update one Post_app_post_image.
     * @example
     * // Update one Post_app_post_image
     * const post_app_post_image = await prisma.post_app_post_image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends post_app_post_imageUpdateArgs>(args: SelectSubset<T, post_app_post_imageUpdateArgs<ExtArgs>>): Prisma__post_app_post_imageClient<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Post_app_post_images.
     * @param {post_app_post_imageDeleteManyArgs} args - Arguments to filter Post_app_post_images to delete.
     * @example
     * // Delete a few Post_app_post_images
     * const { count } = await prisma.post_app_post_image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends post_app_post_imageDeleteManyArgs>(args?: SelectSubset<T, post_app_post_imageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_post_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_imageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_app_post_images
     * const post_app_post_image = await prisma.post_app_post_image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends post_app_post_imageUpdateManyArgs>(args: SelectSubset<T, post_app_post_imageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_app_post_images and returns the data updated in the database.
     * @param {post_app_post_imageUpdateManyAndReturnArgs} args - Arguments to update many Post_app_post_images.
     * @example
     * // Update many Post_app_post_images
     * const post_app_post_image = await prisma.post_app_post_image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Post_app_post_images and only return the `post_id`
     * const post_app_post_imageWithPost_idOnly = await prisma.post_app_post_image.updateManyAndReturn({
     *   select: { post_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends post_app_post_imageUpdateManyAndReturnArgs>(args: SelectSubset<T, post_app_post_imageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post_app_post_image.
     * @param {post_app_post_imageUpsertArgs} args - Arguments to update or create a Post_app_post_image.
     * @example
     * // Update or create a Post_app_post_image
     * const post_app_post_image = await prisma.post_app_post_image.upsert({
     *   create: {
     *     // ... data to create a Post_app_post_image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_app_post_image we want to update
     *   }
     * })
     */
    upsert<T extends post_app_post_imageUpsertArgs>(args: SelectSubset<T, post_app_post_imageUpsertArgs<ExtArgs>>): Prisma__post_app_post_imageClient<$Result.GetResult<Prisma.$post_app_post_imagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Post_app_post_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_imageCountArgs} args - Arguments to filter Post_app_post_images to count.
     * @example
     * // Count the number of Post_app_post_images
     * const count = await prisma.post_app_post_image.count({
     *   where: {
     *     // ... the filter for the Post_app_post_images we want to count
     *   }
     * })
    **/
    count<T extends post_app_post_imageCountArgs>(
      args?: Subset<T, post_app_post_imageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_app_post_imageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_app_post_image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_app_post_imageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_app_post_imageAggregateArgs>(args: Subset<T, Post_app_post_imageAggregateArgs>): Prisma.PrismaPromise<GetPost_app_post_imageAggregateType<T>>

    /**
     * Group by Post_app_post_image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_app_post_imageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends post_app_post_imageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: post_app_post_imageGroupByArgs['orderBy'] }
        : { orderBy?: post_app_post_imageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, post_app_post_imageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_app_post_imageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post_app_post_image model
   */
  readonly fields: post_app_post_imageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post_app_post_image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__post_app_post_imageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    image<T extends ImageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ImageDefaultArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the post_app_post_image model
   */
  interface post_app_post_imageFieldRefs {
    readonly post_id: FieldRef<"post_app_post_image", 'Int'>
    readonly image_id: FieldRef<"post_app_post_image", 'Int'>
    readonly id: FieldRef<"post_app_post_image", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * post_app_post_image findUnique
   */
  export type post_app_post_imageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_image to fetch.
     */
    where: post_app_post_imageWhereUniqueInput
  }

  /**
   * post_app_post_image findUniqueOrThrow
   */
  export type post_app_post_imageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_image to fetch.
     */
    where: post_app_post_imageWhereUniqueInput
  }

  /**
   * post_app_post_image findFirst
   */
  export type post_app_post_imageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_image to fetch.
     */
    where?: post_app_post_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_images to fetch.
     */
    orderBy?: post_app_post_imageOrderByWithRelationInput | post_app_post_imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_post_images.
     */
    cursor?: post_app_post_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_post_images.
     */
    distinct?: Post_app_post_imageScalarFieldEnum | Post_app_post_imageScalarFieldEnum[]
  }

  /**
   * post_app_post_image findFirstOrThrow
   */
  export type post_app_post_imageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_image to fetch.
     */
    where?: post_app_post_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_images to fetch.
     */
    orderBy?: post_app_post_imageOrderByWithRelationInput | post_app_post_imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_app_post_images.
     */
    cursor?: post_app_post_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_app_post_images.
     */
    distinct?: Post_app_post_imageScalarFieldEnum | Post_app_post_imageScalarFieldEnum[]
  }

  /**
   * post_app_post_image findMany
   */
  export type post_app_post_imageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * Filter, which post_app_post_images to fetch.
     */
    where?: post_app_post_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_app_post_images to fetch.
     */
    orderBy?: post_app_post_imageOrderByWithRelationInput | post_app_post_imageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing post_app_post_images.
     */
    cursor?: post_app_post_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_app_post_images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_app_post_images.
     */
    skip?: number
    distinct?: Post_app_post_imageScalarFieldEnum | Post_app_post_imageScalarFieldEnum[]
  }

  /**
   * post_app_post_image create
   */
  export type post_app_post_imageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * The data needed to create a post_app_post_image.
     */
    data: XOR<post_app_post_imageCreateInput, post_app_post_imageUncheckedCreateInput>
  }

  /**
   * post_app_post_image createMany
   */
  export type post_app_post_imageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many post_app_post_images.
     */
    data: post_app_post_imageCreateManyInput | post_app_post_imageCreateManyInput[]
  }

  /**
   * post_app_post_image createManyAndReturn
   */
  export type post_app_post_imageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * The data used to create many post_app_post_images.
     */
    data: post_app_post_imageCreateManyInput | post_app_post_imageCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_post_image update
   */
  export type post_app_post_imageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * The data needed to update a post_app_post_image.
     */
    data: XOR<post_app_post_imageUpdateInput, post_app_post_imageUncheckedUpdateInput>
    /**
     * Choose, which post_app_post_image to update.
     */
    where: post_app_post_imageWhereUniqueInput
  }

  /**
   * post_app_post_image updateMany
   */
  export type post_app_post_imageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update post_app_post_images.
     */
    data: XOR<post_app_post_imageUpdateManyMutationInput, post_app_post_imageUncheckedUpdateManyInput>
    /**
     * Filter which post_app_post_images to update
     */
    where?: post_app_post_imageWhereInput
    /**
     * Limit how many post_app_post_images to update.
     */
    limit?: number
  }

  /**
   * post_app_post_image updateManyAndReturn
   */
  export type post_app_post_imageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * The data used to update post_app_post_images.
     */
    data: XOR<post_app_post_imageUpdateManyMutationInput, post_app_post_imageUncheckedUpdateManyInput>
    /**
     * Filter which post_app_post_images to update
     */
    where?: post_app_post_imageWhereInput
    /**
     * Limit how many post_app_post_images to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_app_post_image upsert
   */
  export type post_app_post_imageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * The filter to search for the post_app_post_image to update in case it exists.
     */
    where: post_app_post_imageWhereUniqueInput
    /**
     * In case the post_app_post_image found by the `where` argument doesn't exist, create a new post_app_post_image with this data.
     */
    create: XOR<post_app_post_imageCreateInput, post_app_post_imageUncheckedCreateInput>
    /**
     * In case the post_app_post_image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<post_app_post_imageUpdateInput, post_app_post_imageUncheckedUpdateInput>
  }

  /**
   * post_app_post_image delete
   */
  export type post_app_post_imageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
    /**
     * Filter which post_app_post_image to delete.
     */
    where: post_app_post_imageWhereUniqueInput
  }

  /**
   * post_app_post_image deleteMany
   */
  export type post_app_post_imageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_app_post_images to delete
     */
    where?: post_app_post_imageWhereInput
    /**
     * Limit how many post_app_post_images to delete.
     */
    limit?: number
  }

  /**
   * post_app_post_image without action
   */
  export type post_app_post_imageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_app_post_image
     */
    select?: post_app_post_imageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_app_post_image
     */
    omit?: post_app_post_imageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_app_post_imageInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    surname: string | null
    date_of_birth: Date | null
    email: string | null
    password: string | null
    image: string | null
    about: string | null
    signature: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    surname: string | null
    date_of_birth: Date | null
    email: string | null
    password: string | null
    image: string | null
    about: string | null
    signature: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    name: number
    username: number
    surname: number
    date_of_birth: number
    email: number
    password: number
    image: number
    about: number
    signature: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    surname?: true
    date_of_birth?: true
    email?: true
    password?: true
    image?: true
    about?: true
    signature?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    surname?: true
    date_of_birth?: true
    email?: true
    password?: true
    image?: true
    about?: true
    signature?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    surname?: true
    date_of_birth?: true
    email?: true
    password?: true
    image?: true
    about?: true
    signature?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: number
    name: string | null
    username: string | null
    surname: string | null
    date_of_birth: Date | null
    email: string
    password: string
    image: string | null
    about: string | null
    signature: string | null
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    surname?: boolean
    date_of_birth?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    about?: boolean
    signature?: boolean
    post?: boolean | Profile$postArgs<ExtArgs>
    album?: boolean | Profile$albumArgs<ExtArgs>
    administered_groups?: boolean | Profile$administered_groupsArgs<ExtArgs>
    chat_messages?: boolean | Profile$chat_messagesArgs<ExtArgs>
    avatar?: boolean | Profile$avatarArgs<ExtArgs>
    friendship_from?: boolean | Profile$friendship_fromArgs<ExtArgs>
    friendship_to?: boolean | Profile$friendship_toArgs<ExtArgs>
    chat_group_members?: boolean | Profile$chat_group_membersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    surname?: boolean
    date_of_birth?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    about?: boolean
    signature?: boolean
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    surname?: boolean
    date_of_birth?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    about?: boolean
    signature?: boolean
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    name?: boolean
    username?: boolean
    surname?: boolean
    date_of_birth?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    about?: boolean
    signature?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "username" | "surname" | "date_of_birth" | "email" | "password" | "image" | "about" | "signature", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | Profile$postArgs<ExtArgs>
    album?: boolean | Profile$albumArgs<ExtArgs>
    administered_groups?: boolean | Profile$administered_groupsArgs<ExtArgs>
    chat_messages?: boolean | Profile$chat_messagesArgs<ExtArgs>
    avatar?: boolean | Profile$avatarArgs<ExtArgs>
    friendship_from?: boolean | Profile$friendship_fromArgs<ExtArgs>
    friendship_to?: boolean | Profile$friendship_toArgs<ExtArgs>
    chat_group_members?: boolean | Profile$chat_group_membersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>[]
      album: Prisma.$AlbumPayload<ExtArgs>[]
      administered_groups: Prisma.$ChatGroupPayload<ExtArgs>[]
      chat_messages: Prisma.$ChatMessagePayload<ExtArgs>[]
      avatar: Prisma.$AvatarPayload<ExtArgs> | null
      friendship_from: Prisma.$FriendshipPayload<ExtArgs>[]
      friendship_to: Prisma.$FriendshipPayload<ExtArgs>[]
      chat_group_members: Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      username: string | null
      surname: string | null
      date_of_birth: Date | null
      email: string
      password: string
      image: string | null
      about: string | null
      signature: string | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends Profile$postArgs<ExtArgs> = {}>(args?: Subset<T, Profile$postArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    album<T extends Profile$albumArgs<ExtArgs> = {}>(args?: Subset<T, Profile$albumArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    administered_groups<T extends Profile$administered_groupsArgs<ExtArgs> = {}>(args?: Subset<T, Profile$administered_groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chat_messages<T extends Profile$chat_messagesArgs<ExtArgs> = {}>(args?: Subset<T, Profile$chat_messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    avatar<T extends Profile$avatarArgs<ExtArgs> = {}>(args?: Subset<T, Profile$avatarArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    friendship_from<T extends Profile$friendship_fromArgs<ExtArgs> = {}>(args?: Subset<T, Profile$friendship_fromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    friendship_to<T extends Profile$friendship_toArgs<ExtArgs> = {}>(args?: Subset<T, Profile$friendship_toArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chat_group_members<T extends Profile$chat_group_membersArgs<ExtArgs> = {}>(args?: Subset<T, Profile$chat_group_membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chat_app_chatgroup_membersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'Int'>
    readonly name: FieldRef<"Profile", 'String'>
    readonly username: FieldRef<"Profile", 'String'>
    readonly surname: FieldRef<"Profile", 'String'>
    readonly date_of_birth: FieldRef<"Profile", 'DateTime'>
    readonly email: FieldRef<"Profile", 'String'>
    readonly password: FieldRef<"Profile", 'String'>
    readonly image: FieldRef<"Profile", 'String'>
    readonly about: FieldRef<"Profile", 'String'>
    readonly signature: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile.post
   */
  export type Profile$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Profile.album
   */
  export type Profile$albumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    cursor?: AlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Profile.administered_groups
   */
  export type Profile$administered_groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatGroup
     */
    select?: ChatGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatGroup
     */
    omit?: ChatGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatGroupInclude<ExtArgs> | null
    where?: ChatGroupWhereInput
    orderBy?: ChatGroupOrderByWithRelationInput | ChatGroupOrderByWithRelationInput[]
    cursor?: ChatGroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatGroupScalarFieldEnum | ChatGroupScalarFieldEnum[]
  }

  /**
   * Profile.chat_messages
   */
  export type Profile$chat_messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * Profile.avatar
   */
  export type Profile$avatarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    where?: AvatarWhereInput
  }

  /**
   * Profile.friendship_from
   */
  export type Profile$friendship_fromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Profile.friendship_to
   */
  export type Profile$friendship_toArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Friendship
     */
    omit?: FriendshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FriendshipInclude<ExtArgs> | null
    where?: FriendshipWhereInput
    orderBy?: FriendshipOrderByWithRelationInput | FriendshipOrderByWithRelationInput[]
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendshipScalarFieldEnum | FriendshipScalarFieldEnum[]
  }

  /**
   * Profile.chat_group_members
   */
  export type Profile$chat_group_membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat_app_chatgroup_members
     */
    select?: chat_app_chatgroup_membersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the chat_app_chatgroup_members
     */
    omit?: chat_app_chatgroup_membersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chat_app_chatgroup_membersInclude<ExtArgs> | null
    where?: chat_app_chatgroup_membersWhereInput
    orderBy?: chat_app_chatgroup_membersOrderByWithRelationInput | chat_app_chatgroup_membersOrderByWithRelationInput[]
    cursor?: chat_app_chatgroup_membersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Chat_app_chatgroup_membersScalarFieldEnum | Chat_app_chatgroup_membersScalarFieldEnum[]
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Avatar
   */

  export type AggregateAvatar = {
    _count: AvatarCountAggregateOutputType | null
    _avg: AvatarAvgAggregateOutputType | null
    _sum: AvatarSumAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  export type AvatarAvgAggregateOutputType = {
    id: number | null
    profile_id: number | null
  }

  export type AvatarSumAggregateOutputType = {
    id: number | null
    profile_id: number | null
  }

  export type AvatarMinAggregateOutputType = {
    id: number | null
    image: string | null
    profile_id: number | null
    shown: boolean | null
    active: boolean | null
  }

  export type AvatarMaxAggregateOutputType = {
    id: number | null
    image: string | null
    profile_id: number | null
    shown: boolean | null
    active: boolean | null
  }

  export type AvatarCountAggregateOutputType = {
    id: number
    image: number
    profile_id: number
    shown: number
    active: number
    _all: number
  }


  export type AvatarAvgAggregateInputType = {
    id?: true
    profile_id?: true
  }

  export type AvatarSumAggregateInputType = {
    id?: true
    profile_id?: true
  }

  export type AvatarMinAggregateInputType = {
    id?: true
    image?: true
    profile_id?: true
    shown?: true
    active?: true
  }

  export type AvatarMaxAggregateInputType = {
    id?: true
    image?: true
    profile_id?: true
    shown?: true
    active?: true
  }

  export type AvatarCountAggregateInputType = {
    id?: true
    image?: true
    profile_id?: true
    shown?: true
    active?: true
    _all?: true
  }

  export type AvatarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avatar to aggregate.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Avatars
    **/
    _count?: true | AvatarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvatarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvatarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvatarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvatarMaxAggregateInputType
  }

  export type GetAvatarAggregateType<T extends AvatarAggregateArgs> = {
        [P in keyof T & keyof AggregateAvatar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvatar[P]>
      : GetScalarType<T[P], AggregateAvatar[P]>
  }




  export type AvatarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvatarWhereInput
    orderBy?: AvatarOrderByWithAggregationInput | AvatarOrderByWithAggregationInput[]
    by: AvatarScalarFieldEnum[] | AvatarScalarFieldEnum
    having?: AvatarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvatarCountAggregateInputType | true
    _avg?: AvatarAvgAggregateInputType
    _sum?: AvatarSumAggregateInputType
    _min?: AvatarMinAggregateInputType
    _max?: AvatarMaxAggregateInputType
  }

  export type AvatarGroupByOutputType = {
    id: number
    image: string
    profile_id: number
    shown: boolean
    active: boolean
    _count: AvatarCountAggregateOutputType | null
    _avg: AvatarAvgAggregateOutputType | null
    _sum: AvatarSumAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  type GetAvatarGroupByPayload<T extends AvatarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvatarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvatarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvatarGroupByOutputType[P]>
            : GetScalarType<T[P], AvatarGroupByOutputType[P]>
        }
      >
    >


  export type AvatarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    profile_id?: boolean
    shown?: boolean
    active?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avatar"]>

  export type AvatarSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    profile_id?: boolean
    shown?: boolean
    active?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avatar"]>

  export type AvatarSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    profile_id?: boolean
    shown?: boolean
    active?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avatar"]>

  export type AvatarSelectScalar = {
    id?: boolean
    image?: boolean
    profile_id?: boolean
    shown?: boolean
    active?: boolean
  }

  export type AvatarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "image" | "profile_id" | "shown" | "active", ExtArgs["result"]["avatar"]>
  export type AvatarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type AvatarIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type AvatarIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $AvatarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Avatar"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      image: string
      profile_id: number
      shown: boolean
      active: boolean
    }, ExtArgs["result"]["avatar"]>
    composites: {}
  }

  type AvatarGetPayload<S extends boolean | null | undefined | AvatarDefaultArgs> = $Result.GetResult<Prisma.$AvatarPayload, S>

  type AvatarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AvatarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AvatarCountAggregateInputType | true
    }

  export interface AvatarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Avatar'], meta: { name: 'Avatar' } }
    /**
     * Find zero or one Avatar that matches the filter.
     * @param {AvatarFindUniqueArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AvatarFindUniqueArgs>(args: SelectSubset<T, AvatarFindUniqueArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Avatar that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AvatarFindUniqueOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AvatarFindUniqueOrThrowArgs>(args: SelectSubset<T, AvatarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Avatar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindFirstArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AvatarFindFirstArgs>(args?: SelectSubset<T, AvatarFindFirstArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Avatar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindFirstOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AvatarFindFirstOrThrowArgs>(args?: SelectSubset<T, AvatarFindFirstOrThrowArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Avatars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avatars
     * const avatars = await prisma.avatar.findMany()
     * 
     * // Get first 10 Avatars
     * const avatars = await prisma.avatar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const avatarWithIdOnly = await prisma.avatar.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AvatarFindManyArgs>(args?: SelectSubset<T, AvatarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Avatar.
     * @param {AvatarCreateArgs} args - Arguments to create a Avatar.
     * @example
     * // Create one Avatar
     * const Avatar = await prisma.avatar.create({
     *   data: {
     *     // ... data to create a Avatar
     *   }
     * })
     * 
     */
    create<T extends AvatarCreateArgs>(args: SelectSubset<T, AvatarCreateArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Avatars.
     * @param {AvatarCreateManyArgs} args - Arguments to create many Avatars.
     * @example
     * // Create many Avatars
     * const avatar = await prisma.avatar.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AvatarCreateManyArgs>(args?: SelectSubset<T, AvatarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Avatars and returns the data saved in the database.
     * @param {AvatarCreateManyAndReturnArgs} args - Arguments to create many Avatars.
     * @example
     * // Create many Avatars
     * const avatar = await prisma.avatar.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Avatars and only return the `id`
     * const avatarWithIdOnly = await prisma.avatar.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AvatarCreateManyAndReturnArgs>(args?: SelectSubset<T, AvatarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Avatar.
     * @param {AvatarDeleteArgs} args - Arguments to delete one Avatar.
     * @example
     * // Delete one Avatar
     * const Avatar = await prisma.avatar.delete({
     *   where: {
     *     // ... filter to delete one Avatar
     *   }
     * })
     * 
     */
    delete<T extends AvatarDeleteArgs>(args: SelectSubset<T, AvatarDeleteArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Avatar.
     * @param {AvatarUpdateArgs} args - Arguments to update one Avatar.
     * @example
     * // Update one Avatar
     * const avatar = await prisma.avatar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AvatarUpdateArgs>(args: SelectSubset<T, AvatarUpdateArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Avatars.
     * @param {AvatarDeleteManyArgs} args - Arguments to filter Avatars to delete.
     * @example
     * // Delete a few Avatars
     * const { count } = await prisma.avatar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AvatarDeleteManyArgs>(args?: SelectSubset<T, AvatarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avatars
     * const avatar = await prisma.avatar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AvatarUpdateManyArgs>(args: SelectSubset<T, AvatarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avatars and returns the data updated in the database.
     * @param {AvatarUpdateManyAndReturnArgs} args - Arguments to update many Avatars.
     * @example
     * // Update many Avatars
     * const avatar = await prisma.avatar.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Avatars and only return the `id`
     * const avatarWithIdOnly = await prisma.avatar.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AvatarUpdateManyAndReturnArgs>(args: SelectSubset<T, AvatarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Avatar.
     * @param {AvatarUpsertArgs} args - Arguments to update or create a Avatar.
     * @example
     * // Update or create a Avatar
     * const avatar = await prisma.avatar.upsert({
     *   create: {
     *     // ... data to create a Avatar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avatar we want to update
     *   }
     * })
     */
    upsert<T extends AvatarUpsertArgs>(args: SelectSubset<T, AvatarUpsertArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarCountArgs} args - Arguments to filter Avatars to count.
     * @example
     * // Count the number of Avatars
     * const count = await prisma.avatar.count({
     *   where: {
     *     // ... the filter for the Avatars we want to count
     *   }
     * })
    **/
    count<T extends AvatarCountArgs>(
      args?: Subset<T, AvatarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvatarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvatarAggregateArgs>(args: Subset<T, AvatarAggregateArgs>): Prisma.PrismaPromise<GetAvatarAggregateType<T>>

    /**
     * Group by Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvatarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvatarGroupByArgs['orderBy'] }
        : { orderBy?: AvatarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvatarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvatarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Avatar model
   */
  readonly fields: AvatarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Avatar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AvatarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Avatar model
   */
  interface AvatarFieldRefs {
    readonly id: FieldRef<"Avatar", 'Int'>
    readonly image: FieldRef<"Avatar", 'String'>
    readonly profile_id: FieldRef<"Avatar", 'Int'>
    readonly shown: FieldRef<"Avatar", 'Boolean'>
    readonly active: FieldRef<"Avatar", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Avatar findUnique
   */
  export type AvatarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar findUniqueOrThrow
   */
  export type AvatarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar findFirst
   */
  export type AvatarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avatars.
     */
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }

  /**
   * Avatar findFirstOrThrow
   */
  export type AvatarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avatars.
     */
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }

  /**
   * Avatar findMany
   */
  export type AvatarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatars to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }

  /**
   * Avatar create
   */
  export type AvatarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The data needed to create a Avatar.
     */
    data: XOR<AvatarCreateInput, AvatarUncheckedCreateInput>
  }

  /**
   * Avatar createMany
   */
  export type AvatarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Avatars.
     */
    data: AvatarCreateManyInput | AvatarCreateManyInput[]
  }

  /**
   * Avatar createManyAndReturn
   */
  export type AvatarCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * The data used to create many Avatars.
     */
    data: AvatarCreateManyInput | AvatarCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Avatar update
   */
  export type AvatarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The data needed to update a Avatar.
     */
    data: XOR<AvatarUpdateInput, AvatarUncheckedUpdateInput>
    /**
     * Choose, which Avatar to update.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar updateMany
   */
  export type AvatarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Avatars.
     */
    data: XOR<AvatarUpdateManyMutationInput, AvatarUncheckedUpdateManyInput>
    /**
     * Filter which Avatars to update
     */
    where?: AvatarWhereInput
    /**
     * Limit how many Avatars to update.
     */
    limit?: number
  }

  /**
   * Avatar updateManyAndReturn
   */
  export type AvatarUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * The data used to update Avatars.
     */
    data: XOR<AvatarUpdateManyMutationInput, AvatarUncheckedUpdateManyInput>
    /**
     * Filter which Avatars to update
     */
    where?: AvatarWhereInput
    /**
     * Limit how many Avatars to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Avatar upsert
   */
  export type AvatarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The filter to search for the Avatar to update in case it exists.
     */
    where: AvatarWhereUniqueInput
    /**
     * In case the Avatar found by the `where` argument doesn't exist, create a new Avatar with this data.
     */
    create: XOR<AvatarCreateInput, AvatarUncheckedCreateInput>
    /**
     * In case the Avatar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvatarUpdateInput, AvatarUncheckedUpdateInput>
  }

  /**
   * Avatar delete
   */
  export type AvatarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter which Avatar to delete.
     */
    where: AvatarWhereUniqueInput
  }

  /**
   * Avatar deleteMany
   */
  export type AvatarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avatars to delete
     */
    where?: AvatarWhereInput
    /**
     * Limit how many Avatars to delete.
     */
    limit?: number
  }

  /**
   * Avatar without action
   */
  export type AvatarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avatar
     */
    omit?: AvatarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvatarInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AlbumScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    shown: 'shown',
    author_id: 'author_id'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const Post_app_album_imagesScalarFieldEnum: {
    id: 'id',
    album_id: 'album_id',
    image_id: 'image_id'
  };

  export type Post_app_album_imagesScalarFieldEnum = (typeof Post_app_album_imagesScalarFieldEnum)[keyof typeof Post_app_album_imagesScalarFieldEnum]


  export const Post_app_album_tagsScalarFieldEnum: {
    album_id: 'album_id',
    tag_id: 'tag_id',
    id: 'id'
  };

  export type Post_app_album_tagsScalarFieldEnum = (typeof Post_app_album_tagsScalarFieldEnum)[keyof typeof Post_app_album_tagsScalarFieldEnum]


  export const ChatGroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    is_personal_chat: 'is_personal_chat',
    admin_id: 'admin_id',
    avatar: 'avatar'
  };

  export type ChatGroupScalarFieldEnum = (typeof ChatGroupScalarFieldEnum)[keyof typeof ChatGroupScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    sent_at: 'sent_at',
    author_id: 'author_id',
    chat_groupId: 'chat_groupId',
    attached_image: 'attached_image'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const Chat_app_chatgroup_membersScalarFieldEnum: {
    chat_groupId: 'chat_groupId',
    profile_id: 'profile_id'
  };

  export type Chat_app_chatgroup_membersScalarFieldEnum = (typeof Chat_app_chatgroup_membersScalarFieldEnum)[keyof typeof Chat_app_chatgroup_membersScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    id: 'id',
    profile1_id: 'profile1_id',
    profile2_id: 'profile2_id',
    accepted: 'accepted'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    file: 'file',
    uploaded_at: 'uploaded_at'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    author_id: 'author_id',
    linkId: 'linkId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const TagsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TagsScalarFieldEnum = (typeof TagsScalarFieldEnum)[keyof typeof TagsScalarFieldEnum]


  export const LinkScalarFieldEnum: {
    id: 'id',
    url: 'url'
  };

  export type LinkScalarFieldEnum = (typeof LinkScalarFieldEnum)[keyof typeof LinkScalarFieldEnum]


  export const Post_app_post_tagScalarFieldEnum: {
    post_id: 'post_id',
    tag_id: 'tag_id',
    id: 'id'
  };

  export type Post_app_post_tagScalarFieldEnum = (typeof Post_app_post_tagScalarFieldEnum)[keyof typeof Post_app_post_tagScalarFieldEnum]


  export const Post_app_post_likesScalarFieldEnum: {
    post_id: 'post_id',
    id: 'id'
  };

  export type Post_app_post_likesScalarFieldEnum = (typeof Post_app_post_likesScalarFieldEnum)[keyof typeof Post_app_post_likesScalarFieldEnum]


  export const Post_app_post_viewsScalarFieldEnum: {
    post_id: 'post_id',
    id: 'id'
  };

  export type Post_app_post_viewsScalarFieldEnum = (typeof Post_app_post_viewsScalarFieldEnum)[keyof typeof Post_app_post_viewsScalarFieldEnum]


  export const Post_app_post_imageScalarFieldEnum: {
    post_id: 'post_id',
    image_id: 'image_id',
    id: 'id'
  };

  export type Post_app_post_imageScalarFieldEnum = (typeof Post_app_post_imageScalarFieldEnum)[keyof typeof Post_app_post_imageScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    surname: 'surname',
    date_of_birth: 'date_of_birth',
    email: 'email',
    password: 'password',
    image: 'image',
    about: 'about',
    signature: 'signature'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const AvatarScalarFieldEnum: {
    id: 'id',
    image: 'image',
    profile_id: 'profile_id',
    shown: 'shown',
    active: 'active'
  };

  export type AvatarScalarFieldEnum = (typeof AvatarScalarFieldEnum)[keyof typeof AvatarScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AlbumWhereInput = {
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    id?: IntFilter<"Album"> | number
    name?: StringFilter<"Album"> | string
    created_at?: DateTimeFilter<"Album"> | Date | string
    shown?: BoolFilter<"Album"> | boolean
    author_id?: IntFilter<"Album"> | number
    images?: Post_app_album_imagesListRelationFilter
    topic?: Post_app_album_tagsListRelationFilter
    author?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    shown?: SortOrder
    author_id?: SortOrder
    images?: post_app_album_imagesOrderByRelationAggregateInput
    topic?: post_app_album_tagsOrderByRelationAggregateInput
    author?: ProfileOrderByWithRelationInput
  }

  export type AlbumWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    name?: StringFilter<"Album"> | string
    created_at?: DateTimeFilter<"Album"> | Date | string
    shown?: BoolFilter<"Album"> | boolean
    author_id?: IntFilter<"Album"> | number
    images?: Post_app_album_imagesListRelationFilter
    topic?: Post_app_album_tagsListRelationFilter
    author?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }, "id">

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    shown?: SortOrder
    author_id?: SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _avg?: AlbumAvgOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
    _sum?: AlbumSumOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    OR?: AlbumScalarWhereWithAggregatesInput[]
    NOT?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Album"> | number
    name?: StringWithAggregatesFilter<"Album"> | string
    created_at?: DateTimeWithAggregatesFilter<"Album"> | Date | string
    shown?: BoolWithAggregatesFilter<"Album"> | boolean
    author_id?: IntWithAggregatesFilter<"Album"> | number
  }

  export type post_app_album_imagesWhereInput = {
    AND?: post_app_album_imagesWhereInput | post_app_album_imagesWhereInput[]
    OR?: post_app_album_imagesWhereInput[]
    NOT?: post_app_album_imagesWhereInput | post_app_album_imagesWhereInput[]
    id?: IntFilter<"post_app_album_images"> | number
    album_id?: IntFilter<"post_app_album_images"> | number
    image_id?: IntFilter<"post_app_album_images"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
  }

  export type post_app_album_imagesOrderByWithRelationInput = {
    id?: SortOrder
    album_id?: SortOrder
    image_id?: SortOrder
    album?: AlbumOrderByWithRelationInput
    image?: ImageOrderByWithRelationInput
  }

  export type post_app_album_imagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: post_app_album_imagesWhereInput | post_app_album_imagesWhereInput[]
    OR?: post_app_album_imagesWhereInput[]
    NOT?: post_app_album_imagesWhereInput | post_app_album_imagesWhereInput[]
    album_id?: IntFilter<"post_app_album_images"> | number
    image_id?: IntFilter<"post_app_album_images"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
  }, "id">

  export type post_app_album_imagesOrderByWithAggregationInput = {
    id?: SortOrder
    album_id?: SortOrder
    image_id?: SortOrder
    _count?: post_app_album_imagesCountOrderByAggregateInput
    _avg?: post_app_album_imagesAvgOrderByAggregateInput
    _max?: post_app_album_imagesMaxOrderByAggregateInput
    _min?: post_app_album_imagesMinOrderByAggregateInput
    _sum?: post_app_album_imagesSumOrderByAggregateInput
  }

  export type post_app_album_imagesScalarWhereWithAggregatesInput = {
    AND?: post_app_album_imagesScalarWhereWithAggregatesInput | post_app_album_imagesScalarWhereWithAggregatesInput[]
    OR?: post_app_album_imagesScalarWhereWithAggregatesInput[]
    NOT?: post_app_album_imagesScalarWhereWithAggregatesInput | post_app_album_imagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"post_app_album_images"> | number
    album_id?: IntWithAggregatesFilter<"post_app_album_images"> | number
    image_id?: IntWithAggregatesFilter<"post_app_album_images"> | number
  }

  export type post_app_album_tagsWhereInput = {
    AND?: post_app_album_tagsWhereInput | post_app_album_tagsWhereInput[]
    OR?: post_app_album_tagsWhereInput[]
    NOT?: post_app_album_tagsWhereInput | post_app_album_tagsWhereInput[]
    album_id?: IntFilter<"post_app_album_tags"> | number
    tag_id?: IntFilter<"post_app_album_tags"> | number
    id?: IntFilter<"post_app_album_tags"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    tag?: XOR<TagsScalarRelationFilter, TagsWhereInput>
  }

  export type post_app_album_tagsOrderByWithRelationInput = {
    album_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
    album?: AlbumOrderByWithRelationInput
    tag?: TagsOrderByWithRelationInput
  }

  export type post_app_album_tagsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: post_app_album_tagsWhereInput | post_app_album_tagsWhereInput[]
    OR?: post_app_album_tagsWhereInput[]
    NOT?: post_app_album_tagsWhereInput | post_app_album_tagsWhereInput[]
    album_id?: IntFilter<"post_app_album_tags"> | number
    tag_id?: IntFilter<"post_app_album_tags"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    tag?: XOR<TagsScalarRelationFilter, TagsWhereInput>
  }, "id">

  export type post_app_album_tagsOrderByWithAggregationInput = {
    album_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
    _count?: post_app_album_tagsCountOrderByAggregateInput
    _avg?: post_app_album_tagsAvgOrderByAggregateInput
    _max?: post_app_album_tagsMaxOrderByAggregateInput
    _min?: post_app_album_tagsMinOrderByAggregateInput
    _sum?: post_app_album_tagsSumOrderByAggregateInput
  }

  export type post_app_album_tagsScalarWhereWithAggregatesInput = {
    AND?: post_app_album_tagsScalarWhereWithAggregatesInput | post_app_album_tagsScalarWhereWithAggregatesInput[]
    OR?: post_app_album_tagsScalarWhereWithAggregatesInput[]
    NOT?: post_app_album_tagsScalarWhereWithAggregatesInput | post_app_album_tagsScalarWhereWithAggregatesInput[]
    album_id?: IntWithAggregatesFilter<"post_app_album_tags"> | number
    tag_id?: IntWithAggregatesFilter<"post_app_album_tags"> | number
    id?: IntWithAggregatesFilter<"post_app_album_tags"> | number
  }

  export type ChatGroupWhereInput = {
    AND?: ChatGroupWhereInput | ChatGroupWhereInput[]
    OR?: ChatGroupWhereInput[]
    NOT?: ChatGroupWhereInput | ChatGroupWhereInput[]
    id?: IntFilter<"ChatGroup"> | number
    name?: StringFilter<"ChatGroup"> | string
    is_personal_chat?: BoolFilter<"ChatGroup"> | boolean
    admin_id?: IntFilter<"ChatGroup"> | number
    avatar?: StringFilter<"ChatGroup"> | string
    members?: Chat_app_chatgroup_membersListRelationFilter
    admin?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    chat_messages?: ChatMessageListRelationFilter
  }

  export type ChatGroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    is_personal_chat?: SortOrder
    admin_id?: SortOrder
    avatar?: SortOrder
    members?: chat_app_chatgroup_membersOrderByRelationAggregateInput
    admin?: ProfileOrderByWithRelationInput
    chat_messages?: ChatMessageOrderByRelationAggregateInput
  }

  export type ChatGroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatGroupWhereInput | ChatGroupWhereInput[]
    OR?: ChatGroupWhereInput[]
    NOT?: ChatGroupWhereInput | ChatGroupWhereInput[]
    name?: StringFilter<"ChatGroup"> | string
    is_personal_chat?: BoolFilter<"ChatGroup"> | boolean
    admin_id?: IntFilter<"ChatGroup"> | number
    avatar?: StringFilter<"ChatGroup"> | string
    members?: Chat_app_chatgroup_membersListRelationFilter
    admin?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    chat_messages?: ChatMessageListRelationFilter
  }, "id">

  export type ChatGroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    is_personal_chat?: SortOrder
    admin_id?: SortOrder
    avatar?: SortOrder
    _count?: ChatGroupCountOrderByAggregateInput
    _avg?: ChatGroupAvgOrderByAggregateInput
    _max?: ChatGroupMaxOrderByAggregateInput
    _min?: ChatGroupMinOrderByAggregateInput
    _sum?: ChatGroupSumOrderByAggregateInput
  }

  export type ChatGroupScalarWhereWithAggregatesInput = {
    AND?: ChatGroupScalarWhereWithAggregatesInput | ChatGroupScalarWhereWithAggregatesInput[]
    OR?: ChatGroupScalarWhereWithAggregatesInput[]
    NOT?: ChatGroupScalarWhereWithAggregatesInput | ChatGroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatGroup"> | number
    name?: StringWithAggregatesFilter<"ChatGroup"> | string
    is_personal_chat?: BoolWithAggregatesFilter<"ChatGroup"> | boolean
    admin_id?: IntWithAggregatesFilter<"ChatGroup"> | number
    avatar?: StringWithAggregatesFilter<"ChatGroup"> | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: IntFilter<"ChatMessage"> | number
    content?: StringFilter<"ChatMessage"> | string
    sent_at?: DateTimeFilter<"ChatMessage"> | Date | string
    author_id?: IntFilter<"ChatMessage"> | number
    chat_groupId?: IntFilter<"ChatMessage"> | number
    attached_image?: StringFilter<"ChatMessage"> | string
    author?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    chat_group?: XOR<ChatGroupScalarRelationFilter, ChatGroupWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    sent_at?: SortOrder
    author_id?: SortOrder
    chat_groupId?: SortOrder
    attached_image?: SortOrder
    author?: ProfileOrderByWithRelationInput
    chat_group?: ChatGroupOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    content?: StringFilter<"ChatMessage"> | string
    sent_at?: DateTimeFilter<"ChatMessage"> | Date | string
    author_id?: IntFilter<"ChatMessage"> | number
    chat_groupId?: IntFilter<"ChatMessage"> | number
    attached_image?: StringFilter<"ChatMessage"> | string
    author?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    chat_group?: XOR<ChatGroupScalarRelationFilter, ChatGroupWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    sent_at?: SortOrder
    author_id?: SortOrder
    chat_groupId?: SortOrder
    attached_image?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _avg?: ChatMessageAvgOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
    _sum?: ChatMessageSumOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatMessage"> | number
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    sent_at?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    author_id?: IntWithAggregatesFilter<"ChatMessage"> | number
    chat_groupId?: IntWithAggregatesFilter<"ChatMessage"> | number
    attached_image?: StringWithAggregatesFilter<"ChatMessage"> | string
  }

  export type chat_app_chatgroup_membersWhereInput = {
    AND?: chat_app_chatgroup_membersWhereInput | chat_app_chatgroup_membersWhereInput[]
    OR?: chat_app_chatgroup_membersWhereInput[]
    NOT?: chat_app_chatgroup_membersWhereInput | chat_app_chatgroup_membersWhereInput[]
    chat_groupId?: IntFilter<"chat_app_chatgroup_members"> | number
    profile_id?: IntFilter<"chat_app_chatgroup_members"> | number
    chat_group?: XOR<ChatGroupScalarRelationFilter, ChatGroupWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }

  export type chat_app_chatgroup_membersOrderByWithRelationInput = {
    chat_groupId?: SortOrder
    profile_id?: SortOrder
    chat_group?: ChatGroupOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
  }

  export type chat_app_chatgroup_membersWhereUniqueInput = Prisma.AtLeast<{
    chat_groupId_profile_id?: chat_app_chatgroup_membersChat_groupIdProfile_idCompoundUniqueInput
    AND?: chat_app_chatgroup_membersWhereInput | chat_app_chatgroup_membersWhereInput[]
    OR?: chat_app_chatgroup_membersWhereInput[]
    NOT?: chat_app_chatgroup_membersWhereInput | chat_app_chatgroup_membersWhereInput[]
    chat_groupId?: IntFilter<"chat_app_chatgroup_members"> | number
    profile_id?: IntFilter<"chat_app_chatgroup_members"> | number
    chat_group?: XOR<ChatGroupScalarRelationFilter, ChatGroupWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }, "chat_groupId_profile_id">

  export type chat_app_chatgroup_membersOrderByWithAggregationInput = {
    chat_groupId?: SortOrder
    profile_id?: SortOrder
    _count?: chat_app_chatgroup_membersCountOrderByAggregateInput
    _avg?: chat_app_chatgroup_membersAvgOrderByAggregateInput
    _max?: chat_app_chatgroup_membersMaxOrderByAggregateInput
    _min?: chat_app_chatgroup_membersMinOrderByAggregateInput
    _sum?: chat_app_chatgroup_membersSumOrderByAggregateInput
  }

  export type chat_app_chatgroup_membersScalarWhereWithAggregatesInput = {
    AND?: chat_app_chatgroup_membersScalarWhereWithAggregatesInput | chat_app_chatgroup_membersScalarWhereWithAggregatesInput[]
    OR?: chat_app_chatgroup_membersScalarWhereWithAggregatesInput[]
    NOT?: chat_app_chatgroup_membersScalarWhereWithAggregatesInput | chat_app_chatgroup_membersScalarWhereWithAggregatesInput[]
    chat_groupId?: IntWithAggregatesFilter<"chat_app_chatgroup_members"> | number
    profile_id?: IntWithAggregatesFilter<"chat_app_chatgroup_members"> | number
  }

  export type FriendshipWhereInput = {
    AND?: FriendshipWhereInput | FriendshipWhereInput[]
    OR?: FriendshipWhereInput[]
    NOT?: FriendshipWhereInput | FriendshipWhereInput[]
    id?: IntFilter<"Friendship"> | number
    profile1_id?: IntFilter<"Friendship"> | number
    profile2_id?: IntFilter<"Friendship"> | number
    accepted?: BoolFilter<"Friendship"> | boolean
    profile1?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    profile2?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }

  export type FriendshipOrderByWithRelationInput = {
    id?: SortOrder
    profile1_id?: SortOrder
    profile2_id?: SortOrder
    accepted?: SortOrder
    profile1?: ProfileOrderByWithRelationInput
    profile2?: ProfileOrderByWithRelationInput
  }

  export type FriendshipWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    profile1_id_profile2_id?: FriendshipProfile1_idProfile2_idCompoundUniqueInput
    AND?: FriendshipWhereInput | FriendshipWhereInput[]
    OR?: FriendshipWhereInput[]
    NOT?: FriendshipWhereInput | FriendshipWhereInput[]
    profile1_id?: IntFilter<"Friendship"> | number
    profile2_id?: IntFilter<"Friendship"> | number
    accepted?: BoolFilter<"Friendship"> | boolean
    profile1?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    profile2?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }, "id" | "profile1_id_profile2_id">

  export type FriendshipOrderByWithAggregationInput = {
    id?: SortOrder
    profile1_id?: SortOrder
    profile2_id?: SortOrder
    accepted?: SortOrder
    _count?: FriendshipCountOrderByAggregateInput
    _avg?: FriendshipAvgOrderByAggregateInput
    _max?: FriendshipMaxOrderByAggregateInput
    _min?: FriendshipMinOrderByAggregateInput
    _sum?: FriendshipSumOrderByAggregateInput
  }

  export type FriendshipScalarWhereWithAggregatesInput = {
    AND?: FriendshipScalarWhereWithAggregatesInput | FriendshipScalarWhereWithAggregatesInput[]
    OR?: FriendshipScalarWhereWithAggregatesInput[]
    NOT?: FriendshipScalarWhereWithAggregatesInput | FriendshipScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Friendship"> | number
    profile1_id?: IntWithAggregatesFilter<"Friendship"> | number
    profile2_id?: IntWithAggregatesFilter<"Friendship"> | number
    accepted?: BoolWithAggregatesFilter<"Friendship"> | boolean
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: IntFilter<"Image"> | number
    filename?: StringFilter<"Image"> | string
    file?: StringFilter<"Image"> | string
    uploaded_at?: DateTimeFilter<"Image"> | Date | string
    album_images?: Post_app_album_imagesListRelationFilter
    PostImages?: Post_app_post_imageListRelationFilter
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    file?: SortOrder
    uploaded_at?: SortOrder
    album_images?: post_app_album_imagesOrderByRelationAggregateInput
    PostImages?: post_app_post_imageOrderByRelationAggregateInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    filename?: StringFilter<"Image"> | string
    file?: StringFilter<"Image"> | string
    uploaded_at?: DateTimeFilter<"Image"> | Date | string
    album_images?: Post_app_album_imagesListRelationFilter
    PostImages?: Post_app_post_imageListRelationFilter
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    file?: SortOrder
    uploaded_at?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Image"> | number
    filename?: StringWithAggregatesFilter<"Image"> | string
    file?: StringWithAggregatesFilter<"Image"> | string
    uploaded_at?: DateTimeWithAggregatesFilter<"Image"> | Date | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: IntFilter<"Post"> | number
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    author_id?: IntFilter<"Post"> | number
    linkId?: IntNullableFilter<"Post"> | number | null
    tags?: Post_app_post_tagListRelationFilter
    images?: Post_app_post_imageListRelationFilter
    views?: Post_app_post_viewsListRelationFilter
    likes?: Post_app_post_likesListRelationFilter
    author?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    link?: XOR<LinkNullableScalarRelationFilter, LinkWhereInput> | null
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    linkId?: SortOrderInput | SortOrder
    tags?: post_app_post_tagOrderByRelationAggregateInput
    images?: post_app_post_imageOrderByRelationAggregateInput
    views?: post_app_post_viewsOrderByRelationAggregateInput
    likes?: post_app_post_likesOrderByRelationAggregateInput
    author?: ProfileOrderByWithRelationInput
    link?: LinkOrderByWithRelationInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    author_id?: IntFilter<"Post"> | number
    linkId?: IntNullableFilter<"Post"> | number | null
    tags?: Post_app_post_tagListRelationFilter
    images?: Post_app_post_imageListRelationFilter
    views?: Post_app_post_viewsListRelationFilter
    likes?: Post_app_post_likesListRelationFilter
    author?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    link?: XOR<LinkNullableScalarRelationFilter, LinkWhereInput> | null
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    linkId?: SortOrderInput | SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Post"> | number
    title?: StringWithAggregatesFilter<"Post"> | string
    content?: StringWithAggregatesFilter<"Post"> | string
    author_id?: IntWithAggregatesFilter<"Post"> | number
    linkId?: IntNullableWithAggregatesFilter<"Post"> | number | null
  }

  export type TagsWhereInput = {
    AND?: TagsWhereInput | TagsWhereInput[]
    OR?: TagsWhereInput[]
    NOT?: TagsWhereInput | TagsWhereInput[]
    id?: IntFilter<"Tags"> | number
    name?: StringFilter<"Tags"> | string
    posts?: Post_app_post_tagListRelationFilter
    album_tags?: Post_app_album_tagsListRelationFilter
  }

  export type TagsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    posts?: post_app_post_tagOrderByRelationAggregateInput
    album_tags?: post_app_album_tagsOrderByRelationAggregateInput
  }

  export type TagsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TagsWhereInput | TagsWhereInput[]
    OR?: TagsWhereInput[]
    NOT?: TagsWhereInput | TagsWhereInput[]
    posts?: Post_app_post_tagListRelationFilter
    album_tags?: Post_app_album_tagsListRelationFilter
  }, "id" | "name">

  export type TagsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TagsCountOrderByAggregateInput
    _avg?: TagsAvgOrderByAggregateInput
    _max?: TagsMaxOrderByAggregateInput
    _min?: TagsMinOrderByAggregateInput
    _sum?: TagsSumOrderByAggregateInput
  }

  export type TagsScalarWhereWithAggregatesInput = {
    AND?: TagsScalarWhereWithAggregatesInput | TagsScalarWhereWithAggregatesInput[]
    OR?: TagsScalarWhereWithAggregatesInput[]
    NOT?: TagsScalarWhereWithAggregatesInput | TagsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tags"> | number
    name?: StringWithAggregatesFilter<"Tags"> | string
  }

  export type LinkWhereInput = {
    AND?: LinkWhereInput | LinkWhereInput[]
    OR?: LinkWhereInput[]
    NOT?: LinkWhereInput | LinkWhereInput[]
    id?: IntFilter<"Link"> | number
    url?: StringFilter<"Link"> | string
    post?: PostListRelationFilter
  }

  export type LinkOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    post?: PostOrderByRelationAggregateInput
  }

  export type LinkWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LinkWhereInput | LinkWhereInput[]
    OR?: LinkWhereInput[]
    NOT?: LinkWhereInput | LinkWhereInput[]
    url?: StringFilter<"Link"> | string
    post?: PostListRelationFilter
  }, "id">

  export type LinkOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    _count?: LinkCountOrderByAggregateInput
    _avg?: LinkAvgOrderByAggregateInput
    _max?: LinkMaxOrderByAggregateInput
    _min?: LinkMinOrderByAggregateInput
    _sum?: LinkSumOrderByAggregateInput
  }

  export type LinkScalarWhereWithAggregatesInput = {
    AND?: LinkScalarWhereWithAggregatesInput | LinkScalarWhereWithAggregatesInput[]
    OR?: LinkScalarWhereWithAggregatesInput[]
    NOT?: LinkScalarWhereWithAggregatesInput | LinkScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Link"> | number
    url?: StringWithAggregatesFilter<"Link"> | string
  }

  export type post_app_post_tagWhereInput = {
    AND?: post_app_post_tagWhereInput | post_app_post_tagWhereInput[]
    OR?: post_app_post_tagWhereInput[]
    NOT?: post_app_post_tagWhereInput | post_app_post_tagWhereInput[]
    post_id?: IntFilter<"post_app_post_tag"> | number
    tag_id?: IntFilter<"post_app_post_tag"> | number
    id?: IntFilter<"post_app_post_tag"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    tag?: XOR<TagsScalarRelationFilter, TagsWhereInput>
  }

  export type post_app_post_tagOrderByWithRelationInput = {
    post_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
    post?: PostOrderByWithRelationInput
    tag?: TagsOrderByWithRelationInput
  }

  export type post_app_post_tagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: post_app_post_tagWhereInput | post_app_post_tagWhereInput[]
    OR?: post_app_post_tagWhereInput[]
    NOT?: post_app_post_tagWhereInput | post_app_post_tagWhereInput[]
    post_id?: IntFilter<"post_app_post_tag"> | number
    tag_id?: IntFilter<"post_app_post_tag"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    tag?: XOR<TagsScalarRelationFilter, TagsWhereInput>
  }, "id">

  export type post_app_post_tagOrderByWithAggregationInput = {
    post_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
    _count?: post_app_post_tagCountOrderByAggregateInput
    _avg?: post_app_post_tagAvgOrderByAggregateInput
    _max?: post_app_post_tagMaxOrderByAggregateInput
    _min?: post_app_post_tagMinOrderByAggregateInput
    _sum?: post_app_post_tagSumOrderByAggregateInput
  }

  export type post_app_post_tagScalarWhereWithAggregatesInput = {
    AND?: post_app_post_tagScalarWhereWithAggregatesInput | post_app_post_tagScalarWhereWithAggregatesInput[]
    OR?: post_app_post_tagScalarWhereWithAggregatesInput[]
    NOT?: post_app_post_tagScalarWhereWithAggregatesInput | post_app_post_tagScalarWhereWithAggregatesInput[]
    post_id?: IntWithAggregatesFilter<"post_app_post_tag"> | number
    tag_id?: IntWithAggregatesFilter<"post_app_post_tag"> | number
    id?: IntWithAggregatesFilter<"post_app_post_tag"> | number
  }

  export type post_app_post_likesWhereInput = {
    AND?: post_app_post_likesWhereInput | post_app_post_likesWhereInput[]
    OR?: post_app_post_likesWhereInput[]
    NOT?: post_app_post_likesWhereInput | post_app_post_likesWhereInput[]
    post_id?: IntFilter<"post_app_post_likes"> | number
    id?: IntFilter<"post_app_post_likes"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type post_app_post_likesOrderByWithRelationInput = {
    post_id?: SortOrder
    id?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type post_app_post_likesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: post_app_post_likesWhereInput | post_app_post_likesWhereInput[]
    OR?: post_app_post_likesWhereInput[]
    NOT?: post_app_post_likesWhereInput | post_app_post_likesWhereInput[]
    post_id?: IntFilter<"post_app_post_likes"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id">

  export type post_app_post_likesOrderByWithAggregationInput = {
    post_id?: SortOrder
    id?: SortOrder
    _count?: post_app_post_likesCountOrderByAggregateInput
    _avg?: post_app_post_likesAvgOrderByAggregateInput
    _max?: post_app_post_likesMaxOrderByAggregateInput
    _min?: post_app_post_likesMinOrderByAggregateInput
    _sum?: post_app_post_likesSumOrderByAggregateInput
  }

  export type post_app_post_likesScalarWhereWithAggregatesInput = {
    AND?: post_app_post_likesScalarWhereWithAggregatesInput | post_app_post_likesScalarWhereWithAggregatesInput[]
    OR?: post_app_post_likesScalarWhereWithAggregatesInput[]
    NOT?: post_app_post_likesScalarWhereWithAggregatesInput | post_app_post_likesScalarWhereWithAggregatesInput[]
    post_id?: IntWithAggregatesFilter<"post_app_post_likes"> | number
    id?: IntWithAggregatesFilter<"post_app_post_likes"> | number
  }

  export type post_app_post_viewsWhereInput = {
    AND?: post_app_post_viewsWhereInput | post_app_post_viewsWhereInput[]
    OR?: post_app_post_viewsWhereInput[]
    NOT?: post_app_post_viewsWhereInput | post_app_post_viewsWhereInput[]
    post_id?: IntFilter<"post_app_post_views"> | number
    id?: IntFilter<"post_app_post_views"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type post_app_post_viewsOrderByWithRelationInput = {
    post_id?: SortOrder
    id?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type post_app_post_viewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: post_app_post_viewsWhereInput | post_app_post_viewsWhereInput[]
    OR?: post_app_post_viewsWhereInput[]
    NOT?: post_app_post_viewsWhereInput | post_app_post_viewsWhereInput[]
    post_id?: IntFilter<"post_app_post_views"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id">

  export type post_app_post_viewsOrderByWithAggregationInput = {
    post_id?: SortOrder
    id?: SortOrder
    _count?: post_app_post_viewsCountOrderByAggregateInput
    _avg?: post_app_post_viewsAvgOrderByAggregateInput
    _max?: post_app_post_viewsMaxOrderByAggregateInput
    _min?: post_app_post_viewsMinOrderByAggregateInput
    _sum?: post_app_post_viewsSumOrderByAggregateInput
  }

  export type post_app_post_viewsScalarWhereWithAggregatesInput = {
    AND?: post_app_post_viewsScalarWhereWithAggregatesInput | post_app_post_viewsScalarWhereWithAggregatesInput[]
    OR?: post_app_post_viewsScalarWhereWithAggregatesInput[]
    NOT?: post_app_post_viewsScalarWhereWithAggregatesInput | post_app_post_viewsScalarWhereWithAggregatesInput[]
    post_id?: IntWithAggregatesFilter<"post_app_post_views"> | number
    id?: IntWithAggregatesFilter<"post_app_post_views"> | number
  }

  export type post_app_post_imageWhereInput = {
    AND?: post_app_post_imageWhereInput | post_app_post_imageWhereInput[]
    OR?: post_app_post_imageWhereInput[]
    NOT?: post_app_post_imageWhereInput | post_app_post_imageWhereInput[]
    post_id?: IntFilter<"post_app_post_image"> | number
    image_id?: IntFilter<"post_app_post_image"> | number
    id?: IntFilter<"post_app_post_image"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
  }

  export type post_app_post_imageOrderByWithRelationInput = {
    post_id?: SortOrder
    image_id?: SortOrder
    id?: SortOrder
    post?: PostOrderByWithRelationInput
    image?: ImageOrderByWithRelationInput
  }

  export type post_app_post_imageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: post_app_post_imageWhereInput | post_app_post_imageWhereInput[]
    OR?: post_app_post_imageWhereInput[]
    NOT?: post_app_post_imageWhereInput | post_app_post_imageWhereInput[]
    post_id?: IntFilter<"post_app_post_image"> | number
    image_id?: IntFilter<"post_app_post_image"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
  }, "id">

  export type post_app_post_imageOrderByWithAggregationInput = {
    post_id?: SortOrder
    image_id?: SortOrder
    id?: SortOrder
    _count?: post_app_post_imageCountOrderByAggregateInput
    _avg?: post_app_post_imageAvgOrderByAggregateInput
    _max?: post_app_post_imageMaxOrderByAggregateInput
    _min?: post_app_post_imageMinOrderByAggregateInput
    _sum?: post_app_post_imageSumOrderByAggregateInput
  }

  export type post_app_post_imageScalarWhereWithAggregatesInput = {
    AND?: post_app_post_imageScalarWhereWithAggregatesInput | post_app_post_imageScalarWhereWithAggregatesInput[]
    OR?: post_app_post_imageScalarWhereWithAggregatesInput[]
    NOT?: post_app_post_imageScalarWhereWithAggregatesInput | post_app_post_imageScalarWhereWithAggregatesInput[]
    post_id?: IntWithAggregatesFilter<"post_app_post_image"> | number
    image_id?: IntWithAggregatesFilter<"post_app_post_image"> | number
    id?: IntWithAggregatesFilter<"post_app_post_image"> | number
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: IntFilter<"Profile"> | number
    name?: StringNullableFilter<"Profile"> | string | null
    username?: StringNullableFilter<"Profile"> | string | null
    surname?: StringNullableFilter<"Profile"> | string | null
    date_of_birth?: DateTimeNullableFilter<"Profile"> | Date | string | null
    email?: StringFilter<"Profile"> | string
    password?: StringFilter<"Profile"> | string
    image?: StringNullableFilter<"Profile"> | string | null
    about?: StringNullableFilter<"Profile"> | string | null
    signature?: StringNullableFilter<"Profile"> | string | null
    post?: PostListRelationFilter
    album?: AlbumListRelationFilter
    administered_groups?: ChatGroupListRelationFilter
    chat_messages?: ChatMessageListRelationFilter
    avatar?: XOR<AvatarNullableScalarRelationFilter, AvatarWhereInput> | null
    friendship_from?: FriendshipListRelationFilter
    friendship_to?: FriendshipListRelationFilter
    chat_group_members?: Chat_app_chatgroup_membersListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    surname?: SortOrderInput | SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    about?: SortOrderInput | SortOrder
    signature?: SortOrderInput | SortOrder
    post?: PostOrderByRelationAggregateInput
    album?: AlbumOrderByRelationAggregateInput
    administered_groups?: ChatGroupOrderByRelationAggregateInput
    chat_messages?: ChatMessageOrderByRelationAggregateInput
    avatar?: AvatarOrderByWithRelationInput
    friendship_from?: FriendshipOrderByRelationAggregateInput
    friendship_to?: FriendshipOrderByRelationAggregateInput
    chat_group_members?: chat_app_chatgroup_membersOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    name?: StringNullableFilter<"Profile"> | string | null
    surname?: StringNullableFilter<"Profile"> | string | null
    date_of_birth?: DateTimeNullableFilter<"Profile"> | Date | string | null
    password?: StringFilter<"Profile"> | string
    image?: StringNullableFilter<"Profile"> | string | null
    about?: StringNullableFilter<"Profile"> | string | null
    signature?: StringNullableFilter<"Profile"> | string | null
    post?: PostListRelationFilter
    album?: AlbumListRelationFilter
    administered_groups?: ChatGroupListRelationFilter
    chat_messages?: ChatMessageListRelationFilter
    avatar?: XOR<AvatarNullableScalarRelationFilter, AvatarWhereInput> | null
    friendship_from?: FriendshipListRelationFilter
    friendship_to?: FriendshipListRelationFilter
    chat_group_members?: Chat_app_chatgroup_membersListRelationFilter
  }, "id" | "username" | "email">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    surname?: SortOrderInput | SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    about?: SortOrderInput | SortOrder
    signature?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profile"> | number
    name?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    username?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    surname?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    date_of_birth?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    email?: StringWithAggregatesFilter<"Profile"> | string
    password?: StringWithAggregatesFilter<"Profile"> | string
    image?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    about?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    signature?: StringNullableWithAggregatesFilter<"Profile"> | string | null
  }

  export type AvatarWhereInput = {
    AND?: AvatarWhereInput | AvatarWhereInput[]
    OR?: AvatarWhereInput[]
    NOT?: AvatarWhereInput | AvatarWhereInput[]
    id?: IntFilter<"Avatar"> | number
    image?: StringFilter<"Avatar"> | string
    profile_id?: IntFilter<"Avatar"> | number
    shown?: BoolFilter<"Avatar"> | boolean
    active?: BoolFilter<"Avatar"> | boolean
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }

  export type AvatarOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    profile_id?: SortOrder
    shown?: SortOrder
    active?: SortOrder
    profile?: ProfileOrderByWithRelationInput
  }

  export type AvatarWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    profile_id?: number
    AND?: AvatarWhereInput | AvatarWhereInput[]
    OR?: AvatarWhereInput[]
    NOT?: AvatarWhereInput | AvatarWhereInput[]
    image?: StringFilter<"Avatar"> | string
    shown?: BoolFilter<"Avatar"> | boolean
    active?: BoolFilter<"Avatar"> | boolean
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }, "id" | "profile_id">

  export type AvatarOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    profile_id?: SortOrder
    shown?: SortOrder
    active?: SortOrder
    _count?: AvatarCountOrderByAggregateInput
    _avg?: AvatarAvgOrderByAggregateInput
    _max?: AvatarMaxOrderByAggregateInput
    _min?: AvatarMinOrderByAggregateInput
    _sum?: AvatarSumOrderByAggregateInput
  }

  export type AvatarScalarWhereWithAggregatesInput = {
    AND?: AvatarScalarWhereWithAggregatesInput | AvatarScalarWhereWithAggregatesInput[]
    OR?: AvatarScalarWhereWithAggregatesInput[]
    NOT?: AvatarScalarWhereWithAggregatesInput | AvatarScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Avatar"> | number
    image?: StringWithAggregatesFilter<"Avatar"> | string
    profile_id?: IntWithAggregatesFilter<"Avatar"> | number
    shown?: BoolWithAggregatesFilter<"Avatar"> | boolean
    active?: BoolWithAggregatesFilter<"Avatar"> | boolean
  }

  export type AlbumCreateInput = {
    name: string
    created_at?: Date | string
    shown?: boolean
    images?: post_app_album_imagesCreateNestedManyWithoutAlbumInput
    topic?: post_app_album_tagsCreateNestedManyWithoutAlbumInput
    author: ProfileCreateNestedOneWithoutAlbumInput
  }

  export type AlbumUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    shown?: boolean
    author_id: number
    images?: post_app_album_imagesUncheckedCreateNestedManyWithoutAlbumInput
    topic?: post_app_album_tagsUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    images?: post_app_album_imagesUpdateManyWithoutAlbumNestedInput
    topic?: post_app_album_tagsUpdateManyWithoutAlbumNestedInput
    author?: ProfileUpdateOneRequiredWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    author_id?: IntFieldUpdateOperationsInput | number
    images?: post_app_album_imagesUncheckedUpdateManyWithoutAlbumNestedInput
    topic?: post_app_album_tagsUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    shown?: boolean
    author_id: number
  }

  export type AlbumUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AlbumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    author_id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_imagesCreateInput = {
    album: AlbumCreateNestedOneWithoutImagesInput
    image: ImageCreateNestedOneWithoutAlbum_imagesInput
  }

  export type post_app_album_imagesUncheckedCreateInput = {
    id?: number
    album_id: number
    image_id: number
  }

  export type post_app_album_imagesUpdateInput = {
    album?: AlbumUpdateOneRequiredWithoutImagesNestedInput
    image?: ImageUpdateOneRequiredWithoutAlbum_imagesNestedInput
  }

  export type post_app_album_imagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    album_id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_imagesCreateManyInput = {
    id?: number
    album_id: number
    image_id: number
  }

  export type post_app_album_imagesUpdateManyMutationInput = {

  }

  export type post_app_album_imagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    album_id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_tagsCreateInput = {
    album: AlbumCreateNestedOneWithoutTopicInput
    tag: TagsCreateNestedOneWithoutAlbum_tagsInput
  }

  export type post_app_album_tagsUncheckedCreateInput = {
    album_id: number
    tag_id: number
    id?: number
  }

  export type post_app_album_tagsUpdateInput = {
    album?: AlbumUpdateOneRequiredWithoutTopicNestedInput
    tag?: TagsUpdateOneRequiredWithoutAlbum_tagsNestedInput
  }

  export type post_app_album_tagsUncheckedUpdateInput = {
    album_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_tagsCreateManyInput = {
    album_id: number
    tag_id: number
    id?: number
  }

  export type post_app_album_tagsUpdateManyMutationInput = {

  }

  export type post_app_album_tagsUncheckedUpdateManyInput = {
    album_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ChatGroupCreateInput = {
    name: string
    is_personal_chat?: boolean
    avatar: string
    members?: chat_app_chatgroup_membersCreateNestedManyWithoutChat_groupInput
    admin: ProfileCreateNestedOneWithoutAdministered_groupsInput
    chat_messages?: ChatMessageCreateNestedManyWithoutChat_groupInput
  }

  export type ChatGroupUncheckedCreateInput = {
    id?: number
    name: string
    is_personal_chat?: boolean
    admin_id: number
    avatar: string
    members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutChat_groupInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutChat_groupInput
  }

  export type ChatGroupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
    members?: chat_app_chatgroup_membersUpdateManyWithoutChat_groupNestedInput
    admin?: ProfileUpdateOneRequiredWithoutAdministered_groupsNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutChat_groupNestedInput
  }

  export type ChatGroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    admin_id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutChat_groupNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutChat_groupNestedInput
  }

  export type ChatGroupCreateManyInput = {
    id?: number
    name: string
    is_personal_chat?: boolean
    admin_id: number
    avatar: string
  }

  export type ChatGroupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type ChatGroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    admin_id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageCreateInput = {
    content: string
    sent_at?: Date | string
    attached_image: string
    author: ProfileCreateNestedOneWithoutChat_messagesInput
    chat_group: ChatGroupCreateNestedOneWithoutChat_messagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: number
    content: string
    sent_at?: Date | string
    author_id: number
    chat_groupId: number
    attached_image: string
  }

  export type ChatMessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    attached_image?: StringFieldUpdateOperationsInput | string
    author?: ProfileUpdateOneRequiredWithoutChat_messagesNestedInput
    chat_group?: ChatGroupUpdateOneRequiredWithoutChat_messagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    chat_groupId?: IntFieldUpdateOperationsInput | number
    attached_image?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageCreateManyInput = {
    id?: number
    content: string
    sent_at?: Date | string
    author_id: number
    chat_groupId: number
    attached_image: string
  }

  export type ChatMessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    attached_image?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    chat_groupId?: IntFieldUpdateOperationsInput | number
    attached_image?: StringFieldUpdateOperationsInput | string
  }

  export type chat_app_chatgroup_membersCreateInput = {
    chat_group: ChatGroupCreateNestedOneWithoutMembersInput
    profile: ProfileCreateNestedOneWithoutChat_group_membersInput
  }

  export type chat_app_chatgroup_membersUncheckedCreateInput = {
    chat_groupId: number
    profile_id: number
  }

  export type chat_app_chatgroup_membersUpdateInput = {
    chat_group?: ChatGroupUpdateOneRequiredWithoutMembersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutChat_group_membersNestedInput
  }

  export type chat_app_chatgroup_membersUncheckedUpdateInput = {
    chat_groupId?: IntFieldUpdateOperationsInput | number
    profile_id?: IntFieldUpdateOperationsInput | number
  }

  export type chat_app_chatgroup_membersCreateManyInput = {
    chat_groupId: number
    profile_id: number
  }

  export type chat_app_chatgroup_membersUpdateManyMutationInput = {

  }

  export type chat_app_chatgroup_membersUncheckedUpdateManyInput = {
    chat_groupId?: IntFieldUpdateOperationsInput | number
    profile_id?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipCreateInput = {
    accepted?: boolean
    profile1: ProfileCreateNestedOneWithoutFriendship_fromInput
    profile2: ProfileCreateNestedOneWithoutFriendship_toInput
  }

  export type FriendshipUncheckedCreateInput = {
    id?: number
    profile1_id: number
    profile2_id: number
    accepted?: boolean
  }

  export type FriendshipUpdateInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    profile1?: ProfileUpdateOneRequiredWithoutFriendship_fromNestedInput
    profile2?: ProfileUpdateOneRequiredWithoutFriendship_toNestedInput
  }

  export type FriendshipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    profile1_id?: IntFieldUpdateOperationsInput | number
    profile2_id?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipCreateManyInput = {
    id?: number
    profile1_id: number
    profile2_id: number
    accepted?: boolean
  }

  export type FriendshipUpdateManyMutationInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    profile1_id?: IntFieldUpdateOperationsInput | number
    profile2_id?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ImageCreateInput = {
    filename: string
    file: string
    uploaded_at?: Date | string
    album_images?: post_app_album_imagesCreateNestedManyWithoutImageInput
    PostImages?: post_app_post_imageCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    filename: string
    file: string
    uploaded_at?: Date | string
    album_images?: post_app_album_imagesUncheckedCreateNestedManyWithoutImageInput
    PostImages?: post_app_post_imageUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageUpdateInput = {
    filename?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    album_images?: post_app_album_imagesUpdateManyWithoutImageNestedInput
    PostImages?: post_app_post_imageUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    album_images?: post_app_album_imagesUncheckedUpdateManyWithoutImageNestedInput
    PostImages?: post_app_post_imageUncheckedUpdateManyWithoutImageNestedInput
  }

  export type ImageCreateManyInput = {
    id?: number
    filename: string
    file: string
    uploaded_at?: Date | string
  }

  export type ImageUpdateManyMutationInput = {
    filename?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    title: string
    content: string
    tags?: post_app_post_tagCreateNestedManyWithoutPostInput
    images?: post_app_post_imageCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesCreateNestedManyWithoutPostInput
    author: ProfileCreateNestedOneWithoutPostInput
    link?: LinkCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    author_id: number
    linkId?: number | null
    tags?: post_app_post_tagUncheckedCreateNestedManyWithoutPostInput
    images?: post_app_post_imageUncheckedCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsUncheckedCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: post_app_post_tagUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUpdateManyWithoutPostNestedInput
    author?: ProfileUpdateOneRequiredWithoutPostNestedInput
    link?: LinkUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    linkId?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: post_app_post_tagUncheckedUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUncheckedUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUncheckedUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    title: string
    content: string
    author_id: number
    linkId?: number | null
  }

  export type PostUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    linkId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TagsCreateInput = {
    name: string
    posts?: post_app_post_tagCreateNestedManyWithoutTagInput
    album_tags?: post_app_album_tagsCreateNestedManyWithoutTagInput
  }

  export type TagsUncheckedCreateInput = {
    id?: number
    name: string
    posts?: post_app_post_tagUncheckedCreateNestedManyWithoutTagInput
    album_tags?: post_app_album_tagsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    posts?: post_app_post_tagUpdateManyWithoutTagNestedInput
    album_tags?: post_app_album_tagsUpdateManyWithoutTagNestedInput
  }

  export type TagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    posts?: post_app_post_tagUncheckedUpdateManyWithoutTagNestedInput
    album_tags?: post_app_album_tagsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagsCreateManyInput = {
    id?: number
    name: string
  }

  export type TagsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LinkCreateInput = {
    url: string
    post?: PostCreateNestedManyWithoutLinkInput
  }

  export type LinkUncheckedCreateInput = {
    id?: number
    url: string
    post?: PostUncheckedCreateNestedManyWithoutLinkInput
  }

  export type LinkUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateManyWithoutLinkNestedInput
  }

  export type LinkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    post?: PostUncheckedUpdateManyWithoutLinkNestedInput
  }

  export type LinkCreateManyInput = {
    id?: number
    url: string
  }

  export type LinkUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type LinkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type post_app_post_tagCreateInput = {
    post: PostCreateNestedOneWithoutTagsInput
    tag: TagsCreateNestedOneWithoutPostsInput
  }

  export type post_app_post_tagUncheckedCreateInput = {
    post_id: number
    tag_id: number
    id?: number
  }

  export type post_app_post_tagUpdateInput = {
    post?: PostUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagsUpdateOneRequiredWithoutPostsNestedInput
  }

  export type post_app_post_tagUncheckedUpdateInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_tagCreateManyInput = {
    post_id: number
    tag_id: number
    id?: number
  }

  export type post_app_post_tagUpdateManyMutationInput = {

  }

  export type post_app_post_tagUncheckedUpdateManyInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_likesCreateInput = {
    post: PostCreateNestedOneWithoutLikesInput
  }

  export type post_app_post_likesUncheckedCreateInput = {
    post_id: number
    id?: number
  }

  export type post_app_post_likesUpdateInput = {
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type post_app_post_likesUncheckedUpdateInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_likesCreateManyInput = {
    post_id: number
    id?: number
  }

  export type post_app_post_likesUpdateManyMutationInput = {

  }

  export type post_app_post_likesUncheckedUpdateManyInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_viewsCreateInput = {
    post: PostCreateNestedOneWithoutViewsInput
  }

  export type post_app_post_viewsUncheckedCreateInput = {
    post_id: number
    id?: number
  }

  export type post_app_post_viewsUpdateInput = {
    post?: PostUpdateOneRequiredWithoutViewsNestedInput
  }

  export type post_app_post_viewsUncheckedUpdateInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_viewsCreateManyInput = {
    post_id: number
    id?: number
  }

  export type post_app_post_viewsUpdateManyMutationInput = {

  }

  export type post_app_post_viewsUncheckedUpdateManyInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_imageCreateInput = {
    post: PostCreateNestedOneWithoutImagesInput
    image: ImageCreateNestedOneWithoutPostImagesInput
  }

  export type post_app_post_imageUncheckedCreateInput = {
    post_id: number
    image_id: number
    id?: number
  }

  export type post_app_post_imageUpdateInput = {
    post?: PostUpdateOneRequiredWithoutImagesNestedInput
    image?: ImageUpdateOneRequiredWithoutPostImagesNestedInput
  }

  export type post_app_post_imageUncheckedUpdateInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_imageCreateManyInput = {
    post_id: number
    image_id: number
    id?: number
  }

  export type post_app_post_imageUpdateManyMutationInput = {

  }

  export type post_app_post_imageUncheckedUpdateManyInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostCreateNestedManyWithoutAuthorInput
    album?: AlbumCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageCreateNestedManyWithoutAuthorInput
    avatar?: AvatarCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput
    album?: AlbumUncheckedCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupUncheckedCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    avatar?: AvatarUncheckedCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipUncheckedCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipUncheckedCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateManyWithoutAuthorNestedInput
    album?: AlbumUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    album?: AlbumUncheckedUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUncheckedUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUncheckedUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUncheckedUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUncheckedUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
  }

  export type ProfileUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvatarCreateInput = {
    image: string
    shown?: boolean
    active?: boolean
    profile: ProfileCreateNestedOneWithoutAvatarInput
  }

  export type AvatarUncheckedCreateInput = {
    id?: number
    image: string
    profile_id: number
    shown?: boolean
    active?: boolean
  }

  export type AvatarUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    profile?: ProfileUpdateOneRequiredWithoutAvatarNestedInput
  }

  export type AvatarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    shown?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AvatarCreateManyInput = {
    id?: number
    image: string
    profile_id: number
    shown?: boolean
    active?: boolean
  }

  export type AvatarUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AvatarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    shown?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type Post_app_album_imagesListRelationFilter = {
    every?: post_app_album_imagesWhereInput
    some?: post_app_album_imagesWhereInput
    none?: post_app_album_imagesWhereInput
  }

  export type Post_app_album_tagsListRelationFilter = {
    every?: post_app_album_tagsWhereInput
    some?: post_app_album_tagsWhereInput
    none?: post_app_album_tagsWhereInput
  }

  export type ProfileScalarRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type post_app_album_imagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type post_app_album_tagsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    shown?: SortOrder
    author_id?: SortOrder
  }

  export type AlbumAvgOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    shown?: SortOrder
    author_id?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    shown?: SortOrder
    author_id?: SortOrder
  }

  export type AlbumSumOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AlbumScalarRelationFilter = {
    is?: AlbumWhereInput
    isNot?: AlbumWhereInput
  }

  export type ImageScalarRelationFilter = {
    is?: ImageWhereInput
    isNot?: ImageWhereInput
  }

  export type post_app_album_imagesCountOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    image_id?: SortOrder
  }

  export type post_app_album_imagesAvgOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    image_id?: SortOrder
  }

  export type post_app_album_imagesMaxOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    image_id?: SortOrder
  }

  export type post_app_album_imagesMinOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    image_id?: SortOrder
  }

  export type post_app_album_imagesSumOrderByAggregateInput = {
    id?: SortOrder
    album_id?: SortOrder
    image_id?: SortOrder
  }

  export type TagsScalarRelationFilter = {
    is?: TagsWhereInput
    isNot?: TagsWhereInput
  }

  export type post_app_album_tagsCountOrderByAggregateInput = {
    album_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_album_tagsAvgOrderByAggregateInput = {
    album_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_album_tagsMaxOrderByAggregateInput = {
    album_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_album_tagsMinOrderByAggregateInput = {
    album_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_album_tagsSumOrderByAggregateInput = {
    album_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type Chat_app_chatgroup_membersListRelationFilter = {
    every?: chat_app_chatgroup_membersWhereInput
    some?: chat_app_chatgroup_membersWhereInput
    none?: chat_app_chatgroup_membersWhereInput
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type chat_app_chatgroup_membersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatGroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    is_personal_chat?: SortOrder
    admin_id?: SortOrder
    avatar?: SortOrder
  }

  export type ChatGroupAvgOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
  }

  export type ChatGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    is_personal_chat?: SortOrder
    admin_id?: SortOrder
    avatar?: SortOrder
  }

  export type ChatGroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    is_personal_chat?: SortOrder
    admin_id?: SortOrder
    avatar?: SortOrder
  }

  export type ChatGroupSumOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
  }

  export type ChatGroupScalarRelationFilter = {
    is?: ChatGroupWhereInput
    isNot?: ChatGroupWhereInput
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    sent_at?: SortOrder
    author_id?: SortOrder
    chat_groupId?: SortOrder
    attached_image?: SortOrder
  }

  export type ChatMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    chat_groupId?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    sent_at?: SortOrder
    author_id?: SortOrder
    chat_groupId?: SortOrder
    attached_image?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    sent_at?: SortOrder
    author_id?: SortOrder
    chat_groupId?: SortOrder
    attached_image?: SortOrder
  }

  export type ChatMessageSumOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    chat_groupId?: SortOrder
  }

  export type chat_app_chatgroup_membersChat_groupIdProfile_idCompoundUniqueInput = {
    chat_groupId: number
    profile_id: number
  }

  export type chat_app_chatgroup_membersCountOrderByAggregateInput = {
    chat_groupId?: SortOrder
    profile_id?: SortOrder
  }

  export type chat_app_chatgroup_membersAvgOrderByAggregateInput = {
    chat_groupId?: SortOrder
    profile_id?: SortOrder
  }

  export type chat_app_chatgroup_membersMaxOrderByAggregateInput = {
    chat_groupId?: SortOrder
    profile_id?: SortOrder
  }

  export type chat_app_chatgroup_membersMinOrderByAggregateInput = {
    chat_groupId?: SortOrder
    profile_id?: SortOrder
  }

  export type chat_app_chatgroup_membersSumOrderByAggregateInput = {
    chat_groupId?: SortOrder
    profile_id?: SortOrder
  }

  export type FriendshipProfile1_idProfile2_idCompoundUniqueInput = {
    profile1_id: number
    profile2_id: number
  }

  export type FriendshipCountOrderByAggregateInput = {
    id?: SortOrder
    profile1_id?: SortOrder
    profile2_id?: SortOrder
    accepted?: SortOrder
  }

  export type FriendshipAvgOrderByAggregateInput = {
    id?: SortOrder
    profile1_id?: SortOrder
    profile2_id?: SortOrder
  }

  export type FriendshipMaxOrderByAggregateInput = {
    id?: SortOrder
    profile1_id?: SortOrder
    profile2_id?: SortOrder
    accepted?: SortOrder
  }

  export type FriendshipMinOrderByAggregateInput = {
    id?: SortOrder
    profile1_id?: SortOrder
    profile2_id?: SortOrder
    accepted?: SortOrder
  }

  export type FriendshipSumOrderByAggregateInput = {
    id?: SortOrder
    profile1_id?: SortOrder
    profile2_id?: SortOrder
  }

  export type Post_app_post_imageListRelationFilter = {
    every?: post_app_post_imageWhereInput
    some?: post_app_post_imageWhereInput
    none?: post_app_post_imageWhereInput
  }

  export type post_app_post_imageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    file?: SortOrder
    uploaded_at?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    file?: SortOrder
    uploaded_at?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    file?: SortOrder
    uploaded_at?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Post_app_post_tagListRelationFilter = {
    every?: post_app_post_tagWhereInput
    some?: post_app_post_tagWhereInput
    none?: post_app_post_tagWhereInput
  }

  export type Post_app_post_viewsListRelationFilter = {
    every?: post_app_post_viewsWhereInput
    some?: post_app_post_viewsWhereInput
    none?: post_app_post_viewsWhereInput
  }

  export type Post_app_post_likesListRelationFilter = {
    every?: post_app_post_likesWhereInput
    some?: post_app_post_likesWhereInput
    none?: post_app_post_likesWhereInput
  }

  export type LinkNullableScalarRelationFilter = {
    is?: LinkWhereInput | null
    isNot?: LinkWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type post_app_post_tagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type post_app_post_viewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type post_app_post_likesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    linkId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    linkId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    linkId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    author_id?: SortOrder
    linkId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    linkId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type TagsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TagsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LinkCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type LinkAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LinkMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type LinkMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type LinkSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PostScalarRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type post_app_post_tagCountOrderByAggregateInput = {
    post_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_tagAvgOrderByAggregateInput = {
    post_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_tagMaxOrderByAggregateInput = {
    post_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_tagMinOrderByAggregateInput = {
    post_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_tagSumOrderByAggregateInput = {
    post_id?: SortOrder
    tag_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_likesCountOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_likesAvgOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_likesMaxOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_likesMinOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_likesSumOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_viewsCountOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_viewsAvgOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_viewsMaxOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_viewsMinOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_viewsSumOrderByAggregateInput = {
    post_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_imageCountOrderByAggregateInput = {
    post_id?: SortOrder
    image_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_imageAvgOrderByAggregateInput = {
    post_id?: SortOrder
    image_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_imageMaxOrderByAggregateInput = {
    post_id?: SortOrder
    image_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_imageMinOrderByAggregateInput = {
    post_id?: SortOrder
    image_id?: SortOrder
    id?: SortOrder
  }

  export type post_app_post_imageSumOrderByAggregateInput = {
    post_id?: SortOrder
    image_id?: SortOrder
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AlbumListRelationFilter = {
    every?: AlbumWhereInput
    some?: AlbumWhereInput
    none?: AlbumWhereInput
  }

  export type ChatGroupListRelationFilter = {
    every?: ChatGroupWhereInput
    some?: ChatGroupWhereInput
    none?: ChatGroupWhereInput
  }

  export type AvatarNullableScalarRelationFilter = {
    is?: AvatarWhereInput | null
    isNot?: AvatarWhereInput | null
  }

  export type FriendshipListRelationFilter = {
    every?: FriendshipWhereInput
    some?: FriendshipWhereInput
    none?: FriendshipWhereInput
  }

  export type AlbumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatGroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    surname?: SortOrder
    date_of_birth?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    about?: SortOrder
    signature?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    surname?: SortOrder
    date_of_birth?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    about?: SortOrder
    signature?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    surname?: SortOrder
    date_of_birth?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    about?: SortOrder
    signature?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type AvatarCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    profile_id?: SortOrder
    shown?: SortOrder
    active?: SortOrder
  }

  export type AvatarAvgOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
  }

  export type AvatarMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    profile_id?: SortOrder
    shown?: SortOrder
    active?: SortOrder
  }

  export type AvatarMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    profile_id?: SortOrder
    shown?: SortOrder
    active?: SortOrder
  }

  export type AvatarSumOrderByAggregateInput = {
    id?: SortOrder
    profile_id?: SortOrder
  }

  export type post_app_album_imagesCreateNestedManyWithoutAlbumInput = {
    create?: XOR<post_app_album_imagesCreateWithoutAlbumInput, post_app_album_imagesUncheckedCreateWithoutAlbumInput> | post_app_album_imagesCreateWithoutAlbumInput[] | post_app_album_imagesUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: post_app_album_imagesCreateOrConnectWithoutAlbumInput | post_app_album_imagesCreateOrConnectWithoutAlbumInput[]
    createMany?: post_app_album_imagesCreateManyAlbumInputEnvelope
    connect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
  }

  export type post_app_album_tagsCreateNestedManyWithoutAlbumInput = {
    create?: XOR<post_app_album_tagsCreateWithoutAlbumInput, post_app_album_tagsUncheckedCreateWithoutAlbumInput> | post_app_album_tagsCreateWithoutAlbumInput[] | post_app_album_tagsUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: post_app_album_tagsCreateOrConnectWithoutAlbumInput | post_app_album_tagsCreateOrConnectWithoutAlbumInput[]
    createMany?: post_app_album_tagsCreateManyAlbumInputEnvelope
    connect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutAlbumInput = {
    create?: XOR<ProfileCreateWithoutAlbumInput, ProfileUncheckedCreateWithoutAlbumInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAlbumInput
    connect?: ProfileWhereUniqueInput
  }

  export type post_app_album_imagesUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<post_app_album_imagesCreateWithoutAlbumInput, post_app_album_imagesUncheckedCreateWithoutAlbumInput> | post_app_album_imagesCreateWithoutAlbumInput[] | post_app_album_imagesUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: post_app_album_imagesCreateOrConnectWithoutAlbumInput | post_app_album_imagesCreateOrConnectWithoutAlbumInput[]
    createMany?: post_app_album_imagesCreateManyAlbumInputEnvelope
    connect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
  }

  export type post_app_album_tagsUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<post_app_album_tagsCreateWithoutAlbumInput, post_app_album_tagsUncheckedCreateWithoutAlbumInput> | post_app_album_tagsCreateWithoutAlbumInput[] | post_app_album_tagsUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: post_app_album_tagsCreateOrConnectWithoutAlbumInput | post_app_album_tagsCreateOrConnectWithoutAlbumInput[]
    createMany?: post_app_album_tagsCreateManyAlbumInputEnvelope
    connect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type post_app_album_imagesUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<post_app_album_imagesCreateWithoutAlbumInput, post_app_album_imagesUncheckedCreateWithoutAlbumInput> | post_app_album_imagesCreateWithoutAlbumInput[] | post_app_album_imagesUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: post_app_album_imagesCreateOrConnectWithoutAlbumInput | post_app_album_imagesCreateOrConnectWithoutAlbumInput[]
    upsert?: post_app_album_imagesUpsertWithWhereUniqueWithoutAlbumInput | post_app_album_imagesUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: post_app_album_imagesCreateManyAlbumInputEnvelope
    set?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    disconnect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    delete?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    connect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    update?: post_app_album_imagesUpdateWithWhereUniqueWithoutAlbumInput | post_app_album_imagesUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: post_app_album_imagesUpdateManyWithWhereWithoutAlbumInput | post_app_album_imagesUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: post_app_album_imagesScalarWhereInput | post_app_album_imagesScalarWhereInput[]
  }

  export type post_app_album_tagsUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<post_app_album_tagsCreateWithoutAlbumInput, post_app_album_tagsUncheckedCreateWithoutAlbumInput> | post_app_album_tagsCreateWithoutAlbumInput[] | post_app_album_tagsUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: post_app_album_tagsCreateOrConnectWithoutAlbumInput | post_app_album_tagsCreateOrConnectWithoutAlbumInput[]
    upsert?: post_app_album_tagsUpsertWithWhereUniqueWithoutAlbumInput | post_app_album_tagsUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: post_app_album_tagsCreateManyAlbumInputEnvelope
    set?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    disconnect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    delete?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    connect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    update?: post_app_album_tagsUpdateWithWhereUniqueWithoutAlbumInput | post_app_album_tagsUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: post_app_album_tagsUpdateManyWithWhereWithoutAlbumInput | post_app_album_tagsUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: post_app_album_tagsScalarWhereInput | post_app_album_tagsScalarWhereInput[]
  }

  export type ProfileUpdateOneRequiredWithoutAlbumNestedInput = {
    create?: XOR<ProfileCreateWithoutAlbumInput, ProfileUncheckedCreateWithoutAlbumInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAlbumInput
    upsert?: ProfileUpsertWithoutAlbumInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutAlbumInput, ProfileUpdateWithoutAlbumInput>, ProfileUncheckedUpdateWithoutAlbumInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type post_app_album_imagesUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<post_app_album_imagesCreateWithoutAlbumInput, post_app_album_imagesUncheckedCreateWithoutAlbumInput> | post_app_album_imagesCreateWithoutAlbumInput[] | post_app_album_imagesUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: post_app_album_imagesCreateOrConnectWithoutAlbumInput | post_app_album_imagesCreateOrConnectWithoutAlbumInput[]
    upsert?: post_app_album_imagesUpsertWithWhereUniqueWithoutAlbumInput | post_app_album_imagesUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: post_app_album_imagesCreateManyAlbumInputEnvelope
    set?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    disconnect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    delete?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    connect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    update?: post_app_album_imagesUpdateWithWhereUniqueWithoutAlbumInput | post_app_album_imagesUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: post_app_album_imagesUpdateManyWithWhereWithoutAlbumInput | post_app_album_imagesUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: post_app_album_imagesScalarWhereInput | post_app_album_imagesScalarWhereInput[]
  }

  export type post_app_album_tagsUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<post_app_album_tagsCreateWithoutAlbumInput, post_app_album_tagsUncheckedCreateWithoutAlbumInput> | post_app_album_tagsCreateWithoutAlbumInput[] | post_app_album_tagsUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: post_app_album_tagsCreateOrConnectWithoutAlbumInput | post_app_album_tagsCreateOrConnectWithoutAlbumInput[]
    upsert?: post_app_album_tagsUpsertWithWhereUniqueWithoutAlbumInput | post_app_album_tagsUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: post_app_album_tagsCreateManyAlbumInputEnvelope
    set?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    disconnect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    delete?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    connect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    update?: post_app_album_tagsUpdateWithWhereUniqueWithoutAlbumInput | post_app_album_tagsUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: post_app_album_tagsUpdateManyWithWhereWithoutAlbumInput | post_app_album_tagsUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: post_app_album_tagsScalarWhereInput | post_app_album_tagsScalarWhereInput[]
  }

  export type AlbumCreateNestedOneWithoutImagesInput = {
    create?: XOR<AlbumCreateWithoutImagesInput, AlbumUncheckedCreateWithoutImagesInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutImagesInput
    connect?: AlbumWhereUniqueInput
  }

  export type ImageCreateNestedOneWithoutAlbum_imagesInput = {
    create?: XOR<ImageCreateWithoutAlbum_imagesInput, ImageUncheckedCreateWithoutAlbum_imagesInput>
    connectOrCreate?: ImageCreateOrConnectWithoutAlbum_imagesInput
    connect?: ImageWhereUniqueInput
  }

  export type AlbumUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<AlbumCreateWithoutImagesInput, AlbumUncheckedCreateWithoutImagesInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutImagesInput
    upsert?: AlbumUpsertWithoutImagesInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutImagesInput, AlbumUpdateWithoutImagesInput>, AlbumUncheckedUpdateWithoutImagesInput>
  }

  export type ImageUpdateOneRequiredWithoutAlbum_imagesNestedInput = {
    create?: XOR<ImageCreateWithoutAlbum_imagesInput, ImageUncheckedCreateWithoutAlbum_imagesInput>
    connectOrCreate?: ImageCreateOrConnectWithoutAlbum_imagesInput
    upsert?: ImageUpsertWithoutAlbum_imagesInput
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutAlbum_imagesInput, ImageUpdateWithoutAlbum_imagesInput>, ImageUncheckedUpdateWithoutAlbum_imagesInput>
  }

  export type AlbumCreateNestedOneWithoutTopicInput = {
    create?: XOR<AlbumCreateWithoutTopicInput, AlbumUncheckedCreateWithoutTopicInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutTopicInput
    connect?: AlbumWhereUniqueInput
  }

  export type TagsCreateNestedOneWithoutAlbum_tagsInput = {
    create?: XOR<TagsCreateWithoutAlbum_tagsInput, TagsUncheckedCreateWithoutAlbum_tagsInput>
    connectOrCreate?: TagsCreateOrConnectWithoutAlbum_tagsInput
    connect?: TagsWhereUniqueInput
  }

  export type AlbumUpdateOneRequiredWithoutTopicNestedInput = {
    create?: XOR<AlbumCreateWithoutTopicInput, AlbumUncheckedCreateWithoutTopicInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutTopicInput
    upsert?: AlbumUpsertWithoutTopicInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutTopicInput, AlbumUpdateWithoutTopicInput>, AlbumUncheckedUpdateWithoutTopicInput>
  }

  export type TagsUpdateOneRequiredWithoutAlbum_tagsNestedInput = {
    create?: XOR<TagsCreateWithoutAlbum_tagsInput, TagsUncheckedCreateWithoutAlbum_tagsInput>
    connectOrCreate?: TagsCreateOrConnectWithoutAlbum_tagsInput
    upsert?: TagsUpsertWithoutAlbum_tagsInput
    connect?: TagsWhereUniqueInput
    update?: XOR<XOR<TagsUpdateToOneWithWhereWithoutAlbum_tagsInput, TagsUpdateWithoutAlbum_tagsInput>, TagsUncheckedUpdateWithoutAlbum_tagsInput>
  }

  export type chat_app_chatgroup_membersCreateNestedManyWithoutChat_groupInput = {
    create?: XOR<chat_app_chatgroup_membersCreateWithoutChat_groupInput, chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput> | chat_app_chatgroup_membersCreateWithoutChat_groupInput[] | chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput[]
    connectOrCreate?: chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput | chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput[]
    createMany?: chat_app_chatgroup_membersCreateManyChat_groupInputEnvelope
    connect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutAdministered_groupsInput = {
    create?: XOR<ProfileCreateWithoutAdministered_groupsInput, ProfileUncheckedCreateWithoutAdministered_groupsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAdministered_groupsInput
    connect?: ProfileWhereUniqueInput
  }

  export type ChatMessageCreateNestedManyWithoutChat_groupInput = {
    create?: XOR<ChatMessageCreateWithoutChat_groupInput, ChatMessageUncheckedCreateWithoutChat_groupInput> | ChatMessageCreateWithoutChat_groupInput[] | ChatMessageUncheckedCreateWithoutChat_groupInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChat_groupInput | ChatMessageCreateOrConnectWithoutChat_groupInput[]
    createMany?: ChatMessageCreateManyChat_groupInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutChat_groupInput = {
    create?: XOR<chat_app_chatgroup_membersCreateWithoutChat_groupInput, chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput> | chat_app_chatgroup_membersCreateWithoutChat_groupInput[] | chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput[]
    connectOrCreate?: chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput | chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput[]
    createMany?: chat_app_chatgroup_membersCreateManyChat_groupInputEnvelope
    connect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutChat_groupInput = {
    create?: XOR<ChatMessageCreateWithoutChat_groupInput, ChatMessageUncheckedCreateWithoutChat_groupInput> | ChatMessageCreateWithoutChat_groupInput[] | ChatMessageUncheckedCreateWithoutChat_groupInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChat_groupInput | ChatMessageCreateOrConnectWithoutChat_groupInput[]
    createMany?: ChatMessageCreateManyChat_groupInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type chat_app_chatgroup_membersUpdateManyWithoutChat_groupNestedInput = {
    create?: XOR<chat_app_chatgroup_membersCreateWithoutChat_groupInput, chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput> | chat_app_chatgroup_membersCreateWithoutChat_groupInput[] | chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput[]
    connectOrCreate?: chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput | chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput[]
    upsert?: chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutChat_groupInput | chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutChat_groupInput[]
    createMany?: chat_app_chatgroup_membersCreateManyChat_groupInputEnvelope
    set?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    disconnect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    delete?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    connect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    update?: chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutChat_groupInput | chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutChat_groupInput[]
    updateMany?: chat_app_chatgroup_membersUpdateManyWithWhereWithoutChat_groupInput | chat_app_chatgroup_membersUpdateManyWithWhereWithoutChat_groupInput[]
    deleteMany?: chat_app_chatgroup_membersScalarWhereInput | chat_app_chatgroup_membersScalarWhereInput[]
  }

  export type ProfileUpdateOneRequiredWithoutAdministered_groupsNestedInput = {
    create?: XOR<ProfileCreateWithoutAdministered_groupsInput, ProfileUncheckedCreateWithoutAdministered_groupsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAdministered_groupsInput
    upsert?: ProfileUpsertWithoutAdministered_groupsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutAdministered_groupsInput, ProfileUpdateWithoutAdministered_groupsInput>, ProfileUncheckedUpdateWithoutAdministered_groupsInput>
  }

  export type ChatMessageUpdateManyWithoutChat_groupNestedInput = {
    create?: XOR<ChatMessageCreateWithoutChat_groupInput, ChatMessageUncheckedCreateWithoutChat_groupInput> | ChatMessageCreateWithoutChat_groupInput[] | ChatMessageUncheckedCreateWithoutChat_groupInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChat_groupInput | ChatMessageCreateOrConnectWithoutChat_groupInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutChat_groupInput | ChatMessageUpsertWithWhereUniqueWithoutChat_groupInput[]
    createMany?: ChatMessageCreateManyChat_groupInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutChat_groupInput | ChatMessageUpdateWithWhereUniqueWithoutChat_groupInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutChat_groupInput | ChatMessageUpdateManyWithWhereWithoutChat_groupInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type chat_app_chatgroup_membersUncheckedUpdateManyWithoutChat_groupNestedInput = {
    create?: XOR<chat_app_chatgroup_membersCreateWithoutChat_groupInput, chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput> | chat_app_chatgroup_membersCreateWithoutChat_groupInput[] | chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput[]
    connectOrCreate?: chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput | chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput[]
    upsert?: chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutChat_groupInput | chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutChat_groupInput[]
    createMany?: chat_app_chatgroup_membersCreateManyChat_groupInputEnvelope
    set?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    disconnect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    delete?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    connect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    update?: chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutChat_groupInput | chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutChat_groupInput[]
    updateMany?: chat_app_chatgroup_membersUpdateManyWithWhereWithoutChat_groupInput | chat_app_chatgroup_membersUpdateManyWithWhereWithoutChat_groupInput[]
    deleteMany?: chat_app_chatgroup_membersScalarWhereInput | chat_app_chatgroup_membersScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutChat_groupNestedInput = {
    create?: XOR<ChatMessageCreateWithoutChat_groupInput, ChatMessageUncheckedCreateWithoutChat_groupInput> | ChatMessageCreateWithoutChat_groupInput[] | ChatMessageUncheckedCreateWithoutChat_groupInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChat_groupInput | ChatMessageCreateOrConnectWithoutChat_groupInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutChat_groupInput | ChatMessageUpsertWithWhereUniqueWithoutChat_groupInput[]
    createMany?: ChatMessageCreateManyChat_groupInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutChat_groupInput | ChatMessageUpdateWithWhereUniqueWithoutChat_groupInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutChat_groupInput | ChatMessageUpdateManyWithWhereWithoutChat_groupInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutChat_messagesInput = {
    create?: XOR<ProfileCreateWithoutChat_messagesInput, ProfileUncheckedCreateWithoutChat_messagesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutChat_messagesInput
    connect?: ProfileWhereUniqueInput
  }

  export type ChatGroupCreateNestedOneWithoutChat_messagesInput = {
    create?: XOR<ChatGroupCreateWithoutChat_messagesInput, ChatGroupUncheckedCreateWithoutChat_messagesInput>
    connectOrCreate?: ChatGroupCreateOrConnectWithoutChat_messagesInput
    connect?: ChatGroupWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutChat_messagesNestedInput = {
    create?: XOR<ProfileCreateWithoutChat_messagesInput, ProfileUncheckedCreateWithoutChat_messagesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutChat_messagesInput
    upsert?: ProfileUpsertWithoutChat_messagesInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutChat_messagesInput, ProfileUpdateWithoutChat_messagesInput>, ProfileUncheckedUpdateWithoutChat_messagesInput>
  }

  export type ChatGroupUpdateOneRequiredWithoutChat_messagesNestedInput = {
    create?: XOR<ChatGroupCreateWithoutChat_messagesInput, ChatGroupUncheckedCreateWithoutChat_messagesInput>
    connectOrCreate?: ChatGroupCreateOrConnectWithoutChat_messagesInput
    upsert?: ChatGroupUpsertWithoutChat_messagesInput
    connect?: ChatGroupWhereUniqueInput
    update?: XOR<XOR<ChatGroupUpdateToOneWithWhereWithoutChat_messagesInput, ChatGroupUpdateWithoutChat_messagesInput>, ChatGroupUncheckedUpdateWithoutChat_messagesInput>
  }

  export type ChatGroupCreateNestedOneWithoutMembersInput = {
    create?: XOR<ChatGroupCreateWithoutMembersInput, ChatGroupUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ChatGroupCreateOrConnectWithoutMembersInput
    connect?: ChatGroupWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutChat_group_membersInput = {
    create?: XOR<ProfileCreateWithoutChat_group_membersInput, ProfileUncheckedCreateWithoutChat_group_membersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutChat_group_membersInput
    connect?: ProfileWhereUniqueInput
  }

  export type ChatGroupUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<ChatGroupCreateWithoutMembersInput, ChatGroupUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ChatGroupCreateOrConnectWithoutMembersInput
    upsert?: ChatGroupUpsertWithoutMembersInput
    connect?: ChatGroupWhereUniqueInput
    update?: XOR<XOR<ChatGroupUpdateToOneWithWhereWithoutMembersInput, ChatGroupUpdateWithoutMembersInput>, ChatGroupUncheckedUpdateWithoutMembersInput>
  }

  export type ProfileUpdateOneRequiredWithoutChat_group_membersNestedInput = {
    create?: XOR<ProfileCreateWithoutChat_group_membersInput, ProfileUncheckedCreateWithoutChat_group_membersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutChat_group_membersInput
    upsert?: ProfileUpsertWithoutChat_group_membersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutChat_group_membersInput, ProfileUpdateWithoutChat_group_membersInput>, ProfileUncheckedUpdateWithoutChat_group_membersInput>
  }

  export type ProfileCreateNestedOneWithoutFriendship_fromInput = {
    create?: XOR<ProfileCreateWithoutFriendship_fromInput, ProfileUncheckedCreateWithoutFriendship_fromInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFriendship_fromInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutFriendship_toInput = {
    create?: XOR<ProfileCreateWithoutFriendship_toInput, ProfileUncheckedCreateWithoutFriendship_toInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFriendship_toInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutFriendship_fromNestedInput = {
    create?: XOR<ProfileCreateWithoutFriendship_fromInput, ProfileUncheckedCreateWithoutFriendship_fromInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFriendship_fromInput
    upsert?: ProfileUpsertWithoutFriendship_fromInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutFriendship_fromInput, ProfileUpdateWithoutFriendship_fromInput>, ProfileUncheckedUpdateWithoutFriendship_fromInput>
  }

  export type ProfileUpdateOneRequiredWithoutFriendship_toNestedInput = {
    create?: XOR<ProfileCreateWithoutFriendship_toInput, ProfileUncheckedCreateWithoutFriendship_toInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutFriendship_toInput
    upsert?: ProfileUpsertWithoutFriendship_toInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutFriendship_toInput, ProfileUpdateWithoutFriendship_toInput>, ProfileUncheckedUpdateWithoutFriendship_toInput>
  }

  export type post_app_album_imagesCreateNestedManyWithoutImageInput = {
    create?: XOR<post_app_album_imagesCreateWithoutImageInput, post_app_album_imagesUncheckedCreateWithoutImageInput> | post_app_album_imagesCreateWithoutImageInput[] | post_app_album_imagesUncheckedCreateWithoutImageInput[]
    connectOrCreate?: post_app_album_imagesCreateOrConnectWithoutImageInput | post_app_album_imagesCreateOrConnectWithoutImageInput[]
    createMany?: post_app_album_imagesCreateManyImageInputEnvelope
    connect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
  }

  export type post_app_post_imageCreateNestedManyWithoutImageInput = {
    create?: XOR<post_app_post_imageCreateWithoutImageInput, post_app_post_imageUncheckedCreateWithoutImageInput> | post_app_post_imageCreateWithoutImageInput[] | post_app_post_imageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: post_app_post_imageCreateOrConnectWithoutImageInput | post_app_post_imageCreateOrConnectWithoutImageInput[]
    createMany?: post_app_post_imageCreateManyImageInputEnvelope
    connect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
  }

  export type post_app_album_imagesUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<post_app_album_imagesCreateWithoutImageInput, post_app_album_imagesUncheckedCreateWithoutImageInput> | post_app_album_imagesCreateWithoutImageInput[] | post_app_album_imagesUncheckedCreateWithoutImageInput[]
    connectOrCreate?: post_app_album_imagesCreateOrConnectWithoutImageInput | post_app_album_imagesCreateOrConnectWithoutImageInput[]
    createMany?: post_app_album_imagesCreateManyImageInputEnvelope
    connect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
  }

  export type post_app_post_imageUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<post_app_post_imageCreateWithoutImageInput, post_app_post_imageUncheckedCreateWithoutImageInput> | post_app_post_imageCreateWithoutImageInput[] | post_app_post_imageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: post_app_post_imageCreateOrConnectWithoutImageInput | post_app_post_imageCreateOrConnectWithoutImageInput[]
    createMany?: post_app_post_imageCreateManyImageInputEnvelope
    connect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
  }

  export type post_app_album_imagesUpdateManyWithoutImageNestedInput = {
    create?: XOR<post_app_album_imagesCreateWithoutImageInput, post_app_album_imagesUncheckedCreateWithoutImageInput> | post_app_album_imagesCreateWithoutImageInput[] | post_app_album_imagesUncheckedCreateWithoutImageInput[]
    connectOrCreate?: post_app_album_imagesCreateOrConnectWithoutImageInput | post_app_album_imagesCreateOrConnectWithoutImageInput[]
    upsert?: post_app_album_imagesUpsertWithWhereUniqueWithoutImageInput | post_app_album_imagesUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: post_app_album_imagesCreateManyImageInputEnvelope
    set?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    disconnect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    delete?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    connect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    update?: post_app_album_imagesUpdateWithWhereUniqueWithoutImageInput | post_app_album_imagesUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: post_app_album_imagesUpdateManyWithWhereWithoutImageInput | post_app_album_imagesUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: post_app_album_imagesScalarWhereInput | post_app_album_imagesScalarWhereInput[]
  }

  export type post_app_post_imageUpdateManyWithoutImageNestedInput = {
    create?: XOR<post_app_post_imageCreateWithoutImageInput, post_app_post_imageUncheckedCreateWithoutImageInput> | post_app_post_imageCreateWithoutImageInput[] | post_app_post_imageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: post_app_post_imageCreateOrConnectWithoutImageInput | post_app_post_imageCreateOrConnectWithoutImageInput[]
    upsert?: post_app_post_imageUpsertWithWhereUniqueWithoutImageInput | post_app_post_imageUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: post_app_post_imageCreateManyImageInputEnvelope
    set?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    disconnect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    delete?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    connect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    update?: post_app_post_imageUpdateWithWhereUniqueWithoutImageInput | post_app_post_imageUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: post_app_post_imageUpdateManyWithWhereWithoutImageInput | post_app_post_imageUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: post_app_post_imageScalarWhereInput | post_app_post_imageScalarWhereInput[]
  }

  export type post_app_album_imagesUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<post_app_album_imagesCreateWithoutImageInput, post_app_album_imagesUncheckedCreateWithoutImageInput> | post_app_album_imagesCreateWithoutImageInput[] | post_app_album_imagesUncheckedCreateWithoutImageInput[]
    connectOrCreate?: post_app_album_imagesCreateOrConnectWithoutImageInput | post_app_album_imagesCreateOrConnectWithoutImageInput[]
    upsert?: post_app_album_imagesUpsertWithWhereUniqueWithoutImageInput | post_app_album_imagesUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: post_app_album_imagesCreateManyImageInputEnvelope
    set?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    disconnect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    delete?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    connect?: post_app_album_imagesWhereUniqueInput | post_app_album_imagesWhereUniqueInput[]
    update?: post_app_album_imagesUpdateWithWhereUniqueWithoutImageInput | post_app_album_imagesUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: post_app_album_imagesUpdateManyWithWhereWithoutImageInput | post_app_album_imagesUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: post_app_album_imagesScalarWhereInput | post_app_album_imagesScalarWhereInput[]
  }

  export type post_app_post_imageUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<post_app_post_imageCreateWithoutImageInput, post_app_post_imageUncheckedCreateWithoutImageInput> | post_app_post_imageCreateWithoutImageInput[] | post_app_post_imageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: post_app_post_imageCreateOrConnectWithoutImageInput | post_app_post_imageCreateOrConnectWithoutImageInput[]
    upsert?: post_app_post_imageUpsertWithWhereUniqueWithoutImageInput | post_app_post_imageUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: post_app_post_imageCreateManyImageInputEnvelope
    set?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    disconnect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    delete?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    connect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    update?: post_app_post_imageUpdateWithWhereUniqueWithoutImageInput | post_app_post_imageUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: post_app_post_imageUpdateManyWithWhereWithoutImageInput | post_app_post_imageUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: post_app_post_imageScalarWhereInput | post_app_post_imageScalarWhereInput[]
  }

  export type post_app_post_tagCreateNestedManyWithoutPostInput = {
    create?: XOR<post_app_post_tagCreateWithoutPostInput, post_app_post_tagUncheckedCreateWithoutPostInput> | post_app_post_tagCreateWithoutPostInput[] | post_app_post_tagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_tagCreateOrConnectWithoutPostInput | post_app_post_tagCreateOrConnectWithoutPostInput[]
    createMany?: post_app_post_tagCreateManyPostInputEnvelope
    connect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
  }

  export type post_app_post_imageCreateNestedManyWithoutPostInput = {
    create?: XOR<post_app_post_imageCreateWithoutPostInput, post_app_post_imageUncheckedCreateWithoutPostInput> | post_app_post_imageCreateWithoutPostInput[] | post_app_post_imageUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_imageCreateOrConnectWithoutPostInput | post_app_post_imageCreateOrConnectWithoutPostInput[]
    createMany?: post_app_post_imageCreateManyPostInputEnvelope
    connect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
  }

  export type post_app_post_viewsCreateNestedManyWithoutPostInput = {
    create?: XOR<post_app_post_viewsCreateWithoutPostInput, post_app_post_viewsUncheckedCreateWithoutPostInput> | post_app_post_viewsCreateWithoutPostInput[] | post_app_post_viewsUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_viewsCreateOrConnectWithoutPostInput | post_app_post_viewsCreateOrConnectWithoutPostInput[]
    createMany?: post_app_post_viewsCreateManyPostInputEnvelope
    connect?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
  }

  export type post_app_post_likesCreateNestedManyWithoutPostInput = {
    create?: XOR<post_app_post_likesCreateWithoutPostInput, post_app_post_likesUncheckedCreateWithoutPostInput> | post_app_post_likesCreateWithoutPostInput[] | post_app_post_likesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_likesCreateOrConnectWithoutPostInput | post_app_post_likesCreateOrConnectWithoutPostInput[]
    createMany?: post_app_post_likesCreateManyPostInputEnvelope
    connect?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutPostInput = {
    create?: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPostInput
    connect?: ProfileWhereUniqueInput
  }

  export type LinkCreateNestedOneWithoutPostInput = {
    create?: XOR<LinkCreateWithoutPostInput, LinkUncheckedCreateWithoutPostInput>
    connectOrCreate?: LinkCreateOrConnectWithoutPostInput
    connect?: LinkWhereUniqueInput
  }

  export type post_app_post_tagUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<post_app_post_tagCreateWithoutPostInput, post_app_post_tagUncheckedCreateWithoutPostInput> | post_app_post_tagCreateWithoutPostInput[] | post_app_post_tagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_tagCreateOrConnectWithoutPostInput | post_app_post_tagCreateOrConnectWithoutPostInput[]
    createMany?: post_app_post_tagCreateManyPostInputEnvelope
    connect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
  }

  export type post_app_post_imageUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<post_app_post_imageCreateWithoutPostInput, post_app_post_imageUncheckedCreateWithoutPostInput> | post_app_post_imageCreateWithoutPostInput[] | post_app_post_imageUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_imageCreateOrConnectWithoutPostInput | post_app_post_imageCreateOrConnectWithoutPostInput[]
    createMany?: post_app_post_imageCreateManyPostInputEnvelope
    connect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
  }

  export type post_app_post_viewsUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<post_app_post_viewsCreateWithoutPostInput, post_app_post_viewsUncheckedCreateWithoutPostInput> | post_app_post_viewsCreateWithoutPostInput[] | post_app_post_viewsUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_viewsCreateOrConnectWithoutPostInput | post_app_post_viewsCreateOrConnectWithoutPostInput[]
    createMany?: post_app_post_viewsCreateManyPostInputEnvelope
    connect?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
  }

  export type post_app_post_likesUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<post_app_post_likesCreateWithoutPostInput, post_app_post_likesUncheckedCreateWithoutPostInput> | post_app_post_likesCreateWithoutPostInput[] | post_app_post_likesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_likesCreateOrConnectWithoutPostInput | post_app_post_likesCreateOrConnectWithoutPostInput[]
    createMany?: post_app_post_likesCreateManyPostInputEnvelope
    connect?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
  }

  export type post_app_post_tagUpdateManyWithoutPostNestedInput = {
    create?: XOR<post_app_post_tagCreateWithoutPostInput, post_app_post_tagUncheckedCreateWithoutPostInput> | post_app_post_tagCreateWithoutPostInput[] | post_app_post_tagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_tagCreateOrConnectWithoutPostInput | post_app_post_tagCreateOrConnectWithoutPostInput[]
    upsert?: post_app_post_tagUpsertWithWhereUniqueWithoutPostInput | post_app_post_tagUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: post_app_post_tagCreateManyPostInputEnvelope
    set?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    disconnect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    delete?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    connect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    update?: post_app_post_tagUpdateWithWhereUniqueWithoutPostInput | post_app_post_tagUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: post_app_post_tagUpdateManyWithWhereWithoutPostInput | post_app_post_tagUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: post_app_post_tagScalarWhereInput | post_app_post_tagScalarWhereInput[]
  }

  export type post_app_post_imageUpdateManyWithoutPostNestedInput = {
    create?: XOR<post_app_post_imageCreateWithoutPostInput, post_app_post_imageUncheckedCreateWithoutPostInput> | post_app_post_imageCreateWithoutPostInput[] | post_app_post_imageUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_imageCreateOrConnectWithoutPostInput | post_app_post_imageCreateOrConnectWithoutPostInput[]
    upsert?: post_app_post_imageUpsertWithWhereUniqueWithoutPostInput | post_app_post_imageUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: post_app_post_imageCreateManyPostInputEnvelope
    set?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    disconnect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    delete?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    connect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    update?: post_app_post_imageUpdateWithWhereUniqueWithoutPostInput | post_app_post_imageUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: post_app_post_imageUpdateManyWithWhereWithoutPostInput | post_app_post_imageUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: post_app_post_imageScalarWhereInput | post_app_post_imageScalarWhereInput[]
  }

  export type post_app_post_viewsUpdateManyWithoutPostNestedInput = {
    create?: XOR<post_app_post_viewsCreateWithoutPostInput, post_app_post_viewsUncheckedCreateWithoutPostInput> | post_app_post_viewsCreateWithoutPostInput[] | post_app_post_viewsUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_viewsCreateOrConnectWithoutPostInput | post_app_post_viewsCreateOrConnectWithoutPostInput[]
    upsert?: post_app_post_viewsUpsertWithWhereUniqueWithoutPostInput | post_app_post_viewsUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: post_app_post_viewsCreateManyPostInputEnvelope
    set?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
    disconnect?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
    delete?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
    connect?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
    update?: post_app_post_viewsUpdateWithWhereUniqueWithoutPostInput | post_app_post_viewsUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: post_app_post_viewsUpdateManyWithWhereWithoutPostInput | post_app_post_viewsUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: post_app_post_viewsScalarWhereInput | post_app_post_viewsScalarWhereInput[]
  }

  export type post_app_post_likesUpdateManyWithoutPostNestedInput = {
    create?: XOR<post_app_post_likesCreateWithoutPostInput, post_app_post_likesUncheckedCreateWithoutPostInput> | post_app_post_likesCreateWithoutPostInput[] | post_app_post_likesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_likesCreateOrConnectWithoutPostInput | post_app_post_likesCreateOrConnectWithoutPostInput[]
    upsert?: post_app_post_likesUpsertWithWhereUniqueWithoutPostInput | post_app_post_likesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: post_app_post_likesCreateManyPostInputEnvelope
    set?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
    disconnect?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
    delete?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
    connect?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
    update?: post_app_post_likesUpdateWithWhereUniqueWithoutPostInput | post_app_post_likesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: post_app_post_likesUpdateManyWithWhereWithoutPostInput | post_app_post_likesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: post_app_post_likesScalarWhereInput | post_app_post_likesScalarWhereInput[]
  }

  export type ProfileUpdateOneRequiredWithoutPostNestedInput = {
    create?: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPostInput
    upsert?: ProfileUpsertWithoutPostInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutPostInput, ProfileUpdateWithoutPostInput>, ProfileUncheckedUpdateWithoutPostInput>
  }

  export type LinkUpdateOneWithoutPostNestedInput = {
    create?: XOR<LinkCreateWithoutPostInput, LinkUncheckedCreateWithoutPostInput>
    connectOrCreate?: LinkCreateOrConnectWithoutPostInput
    upsert?: LinkUpsertWithoutPostInput
    disconnect?: LinkWhereInput | boolean
    delete?: LinkWhereInput | boolean
    connect?: LinkWhereUniqueInput
    update?: XOR<XOR<LinkUpdateToOneWithWhereWithoutPostInput, LinkUpdateWithoutPostInput>, LinkUncheckedUpdateWithoutPostInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type post_app_post_tagUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<post_app_post_tagCreateWithoutPostInput, post_app_post_tagUncheckedCreateWithoutPostInput> | post_app_post_tagCreateWithoutPostInput[] | post_app_post_tagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_tagCreateOrConnectWithoutPostInput | post_app_post_tagCreateOrConnectWithoutPostInput[]
    upsert?: post_app_post_tagUpsertWithWhereUniqueWithoutPostInput | post_app_post_tagUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: post_app_post_tagCreateManyPostInputEnvelope
    set?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    disconnect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    delete?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    connect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    update?: post_app_post_tagUpdateWithWhereUniqueWithoutPostInput | post_app_post_tagUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: post_app_post_tagUpdateManyWithWhereWithoutPostInput | post_app_post_tagUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: post_app_post_tagScalarWhereInput | post_app_post_tagScalarWhereInput[]
  }

  export type post_app_post_imageUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<post_app_post_imageCreateWithoutPostInput, post_app_post_imageUncheckedCreateWithoutPostInput> | post_app_post_imageCreateWithoutPostInput[] | post_app_post_imageUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_imageCreateOrConnectWithoutPostInput | post_app_post_imageCreateOrConnectWithoutPostInput[]
    upsert?: post_app_post_imageUpsertWithWhereUniqueWithoutPostInput | post_app_post_imageUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: post_app_post_imageCreateManyPostInputEnvelope
    set?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    disconnect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    delete?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    connect?: post_app_post_imageWhereUniqueInput | post_app_post_imageWhereUniqueInput[]
    update?: post_app_post_imageUpdateWithWhereUniqueWithoutPostInput | post_app_post_imageUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: post_app_post_imageUpdateManyWithWhereWithoutPostInput | post_app_post_imageUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: post_app_post_imageScalarWhereInput | post_app_post_imageScalarWhereInput[]
  }

  export type post_app_post_viewsUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<post_app_post_viewsCreateWithoutPostInput, post_app_post_viewsUncheckedCreateWithoutPostInput> | post_app_post_viewsCreateWithoutPostInput[] | post_app_post_viewsUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_viewsCreateOrConnectWithoutPostInput | post_app_post_viewsCreateOrConnectWithoutPostInput[]
    upsert?: post_app_post_viewsUpsertWithWhereUniqueWithoutPostInput | post_app_post_viewsUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: post_app_post_viewsCreateManyPostInputEnvelope
    set?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
    disconnect?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
    delete?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
    connect?: post_app_post_viewsWhereUniqueInput | post_app_post_viewsWhereUniqueInput[]
    update?: post_app_post_viewsUpdateWithWhereUniqueWithoutPostInput | post_app_post_viewsUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: post_app_post_viewsUpdateManyWithWhereWithoutPostInput | post_app_post_viewsUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: post_app_post_viewsScalarWhereInput | post_app_post_viewsScalarWhereInput[]
  }

  export type post_app_post_likesUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<post_app_post_likesCreateWithoutPostInput, post_app_post_likesUncheckedCreateWithoutPostInput> | post_app_post_likesCreateWithoutPostInput[] | post_app_post_likesUncheckedCreateWithoutPostInput[]
    connectOrCreate?: post_app_post_likesCreateOrConnectWithoutPostInput | post_app_post_likesCreateOrConnectWithoutPostInput[]
    upsert?: post_app_post_likesUpsertWithWhereUniqueWithoutPostInput | post_app_post_likesUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: post_app_post_likesCreateManyPostInputEnvelope
    set?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
    disconnect?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
    delete?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
    connect?: post_app_post_likesWhereUniqueInput | post_app_post_likesWhereUniqueInput[]
    update?: post_app_post_likesUpdateWithWhereUniqueWithoutPostInput | post_app_post_likesUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: post_app_post_likesUpdateManyWithWhereWithoutPostInput | post_app_post_likesUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: post_app_post_likesScalarWhereInput | post_app_post_likesScalarWhereInput[]
  }

  export type post_app_post_tagCreateNestedManyWithoutTagInput = {
    create?: XOR<post_app_post_tagCreateWithoutTagInput, post_app_post_tagUncheckedCreateWithoutTagInput> | post_app_post_tagCreateWithoutTagInput[] | post_app_post_tagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: post_app_post_tagCreateOrConnectWithoutTagInput | post_app_post_tagCreateOrConnectWithoutTagInput[]
    createMany?: post_app_post_tagCreateManyTagInputEnvelope
    connect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
  }

  export type post_app_album_tagsCreateNestedManyWithoutTagInput = {
    create?: XOR<post_app_album_tagsCreateWithoutTagInput, post_app_album_tagsUncheckedCreateWithoutTagInput> | post_app_album_tagsCreateWithoutTagInput[] | post_app_album_tagsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: post_app_album_tagsCreateOrConnectWithoutTagInput | post_app_album_tagsCreateOrConnectWithoutTagInput[]
    createMany?: post_app_album_tagsCreateManyTagInputEnvelope
    connect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
  }

  export type post_app_post_tagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<post_app_post_tagCreateWithoutTagInput, post_app_post_tagUncheckedCreateWithoutTagInput> | post_app_post_tagCreateWithoutTagInput[] | post_app_post_tagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: post_app_post_tagCreateOrConnectWithoutTagInput | post_app_post_tagCreateOrConnectWithoutTagInput[]
    createMany?: post_app_post_tagCreateManyTagInputEnvelope
    connect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
  }

  export type post_app_album_tagsUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<post_app_album_tagsCreateWithoutTagInput, post_app_album_tagsUncheckedCreateWithoutTagInput> | post_app_album_tagsCreateWithoutTagInput[] | post_app_album_tagsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: post_app_album_tagsCreateOrConnectWithoutTagInput | post_app_album_tagsCreateOrConnectWithoutTagInput[]
    createMany?: post_app_album_tagsCreateManyTagInputEnvelope
    connect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
  }

  export type post_app_post_tagUpdateManyWithoutTagNestedInput = {
    create?: XOR<post_app_post_tagCreateWithoutTagInput, post_app_post_tagUncheckedCreateWithoutTagInput> | post_app_post_tagCreateWithoutTagInput[] | post_app_post_tagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: post_app_post_tagCreateOrConnectWithoutTagInput | post_app_post_tagCreateOrConnectWithoutTagInput[]
    upsert?: post_app_post_tagUpsertWithWhereUniqueWithoutTagInput | post_app_post_tagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: post_app_post_tagCreateManyTagInputEnvelope
    set?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    disconnect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    delete?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    connect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    update?: post_app_post_tagUpdateWithWhereUniqueWithoutTagInput | post_app_post_tagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: post_app_post_tagUpdateManyWithWhereWithoutTagInput | post_app_post_tagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: post_app_post_tagScalarWhereInput | post_app_post_tagScalarWhereInput[]
  }

  export type post_app_album_tagsUpdateManyWithoutTagNestedInput = {
    create?: XOR<post_app_album_tagsCreateWithoutTagInput, post_app_album_tagsUncheckedCreateWithoutTagInput> | post_app_album_tagsCreateWithoutTagInput[] | post_app_album_tagsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: post_app_album_tagsCreateOrConnectWithoutTagInput | post_app_album_tagsCreateOrConnectWithoutTagInput[]
    upsert?: post_app_album_tagsUpsertWithWhereUniqueWithoutTagInput | post_app_album_tagsUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: post_app_album_tagsCreateManyTagInputEnvelope
    set?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    disconnect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    delete?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    connect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    update?: post_app_album_tagsUpdateWithWhereUniqueWithoutTagInput | post_app_album_tagsUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: post_app_album_tagsUpdateManyWithWhereWithoutTagInput | post_app_album_tagsUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: post_app_album_tagsScalarWhereInput | post_app_album_tagsScalarWhereInput[]
  }

  export type post_app_post_tagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<post_app_post_tagCreateWithoutTagInput, post_app_post_tagUncheckedCreateWithoutTagInput> | post_app_post_tagCreateWithoutTagInput[] | post_app_post_tagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: post_app_post_tagCreateOrConnectWithoutTagInput | post_app_post_tagCreateOrConnectWithoutTagInput[]
    upsert?: post_app_post_tagUpsertWithWhereUniqueWithoutTagInput | post_app_post_tagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: post_app_post_tagCreateManyTagInputEnvelope
    set?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    disconnect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    delete?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    connect?: post_app_post_tagWhereUniqueInput | post_app_post_tagWhereUniqueInput[]
    update?: post_app_post_tagUpdateWithWhereUniqueWithoutTagInput | post_app_post_tagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: post_app_post_tagUpdateManyWithWhereWithoutTagInput | post_app_post_tagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: post_app_post_tagScalarWhereInput | post_app_post_tagScalarWhereInput[]
  }

  export type post_app_album_tagsUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<post_app_album_tagsCreateWithoutTagInput, post_app_album_tagsUncheckedCreateWithoutTagInput> | post_app_album_tagsCreateWithoutTagInput[] | post_app_album_tagsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: post_app_album_tagsCreateOrConnectWithoutTagInput | post_app_album_tagsCreateOrConnectWithoutTagInput[]
    upsert?: post_app_album_tagsUpsertWithWhereUniqueWithoutTagInput | post_app_album_tagsUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: post_app_album_tagsCreateManyTagInputEnvelope
    set?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    disconnect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    delete?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    connect?: post_app_album_tagsWhereUniqueInput | post_app_album_tagsWhereUniqueInput[]
    update?: post_app_album_tagsUpdateWithWhereUniqueWithoutTagInput | post_app_album_tagsUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: post_app_album_tagsUpdateManyWithWhereWithoutTagInput | post_app_album_tagsUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: post_app_album_tagsScalarWhereInput | post_app_album_tagsScalarWhereInput[]
  }

  export type PostCreateNestedManyWithoutLinkInput = {
    create?: XOR<PostCreateWithoutLinkInput, PostUncheckedCreateWithoutLinkInput> | PostCreateWithoutLinkInput[] | PostUncheckedCreateWithoutLinkInput[]
    connectOrCreate?: PostCreateOrConnectWithoutLinkInput | PostCreateOrConnectWithoutLinkInput[]
    createMany?: PostCreateManyLinkInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutLinkInput = {
    create?: XOR<PostCreateWithoutLinkInput, PostUncheckedCreateWithoutLinkInput> | PostCreateWithoutLinkInput[] | PostUncheckedCreateWithoutLinkInput[]
    connectOrCreate?: PostCreateOrConnectWithoutLinkInput | PostCreateOrConnectWithoutLinkInput[]
    createMany?: PostCreateManyLinkInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostUpdateManyWithoutLinkNestedInput = {
    create?: XOR<PostCreateWithoutLinkInput, PostUncheckedCreateWithoutLinkInput> | PostCreateWithoutLinkInput[] | PostUncheckedCreateWithoutLinkInput[]
    connectOrCreate?: PostCreateOrConnectWithoutLinkInput | PostCreateOrConnectWithoutLinkInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutLinkInput | PostUpsertWithWhereUniqueWithoutLinkInput[]
    createMany?: PostCreateManyLinkInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutLinkInput | PostUpdateWithWhereUniqueWithoutLinkInput[]
    updateMany?: PostUpdateManyWithWhereWithoutLinkInput | PostUpdateManyWithWhereWithoutLinkInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutLinkNestedInput = {
    create?: XOR<PostCreateWithoutLinkInput, PostUncheckedCreateWithoutLinkInput> | PostCreateWithoutLinkInput[] | PostUncheckedCreateWithoutLinkInput[]
    connectOrCreate?: PostCreateOrConnectWithoutLinkInput | PostCreateOrConnectWithoutLinkInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutLinkInput | PostUpsertWithWhereUniqueWithoutLinkInput[]
    createMany?: PostCreateManyLinkInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutLinkInput | PostUpdateWithWhereUniqueWithoutLinkInput[]
    updateMany?: PostUpdateManyWithWhereWithoutLinkInput | PostUpdateManyWithWhereWithoutLinkInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutTagsInput = {
    create?: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>
    connectOrCreate?: PostCreateOrConnectWithoutTagsInput
    connect?: PostWhereUniqueInput
  }

  export type TagsCreateNestedOneWithoutPostsInput = {
    create?: XOR<TagsCreateWithoutPostsInput, TagsUncheckedCreateWithoutPostsInput>
    connectOrCreate?: TagsCreateOrConnectWithoutPostsInput
    connect?: TagsWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>
    connectOrCreate?: PostCreateOrConnectWithoutTagsInput
    upsert?: PostUpsertWithoutTagsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutTagsInput, PostUpdateWithoutTagsInput>, PostUncheckedUpdateWithoutTagsInput>
  }

  export type TagsUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<TagsCreateWithoutPostsInput, TagsUncheckedCreateWithoutPostsInput>
    connectOrCreate?: TagsCreateOrConnectWithoutPostsInput
    upsert?: TagsUpsertWithoutPostsInput
    connect?: TagsWhereUniqueInput
    update?: XOR<XOR<TagsUpdateToOneWithWhereWithoutPostsInput, TagsUpdateWithoutPostsInput>, TagsUncheckedUpdateWithoutPostsInput>
  }

  export type PostCreateNestedOneWithoutLikesInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    connect?: PostWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    upsert?: PostUpsertWithoutLikesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutLikesInput, PostUpdateWithoutLikesInput>, PostUncheckedUpdateWithoutLikesInput>
  }

  export type PostCreateNestedOneWithoutViewsInput = {
    create?: XOR<PostCreateWithoutViewsInput, PostUncheckedCreateWithoutViewsInput>
    connectOrCreate?: PostCreateOrConnectWithoutViewsInput
    connect?: PostWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutViewsNestedInput = {
    create?: XOR<PostCreateWithoutViewsInput, PostUncheckedCreateWithoutViewsInput>
    connectOrCreate?: PostCreateOrConnectWithoutViewsInput
    upsert?: PostUpsertWithoutViewsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutViewsInput, PostUpdateWithoutViewsInput>, PostUncheckedUpdateWithoutViewsInput>
  }

  export type PostCreateNestedOneWithoutImagesInput = {
    create?: XOR<PostCreateWithoutImagesInput, PostUncheckedCreateWithoutImagesInput>
    connectOrCreate?: PostCreateOrConnectWithoutImagesInput
    connect?: PostWhereUniqueInput
  }

  export type ImageCreateNestedOneWithoutPostImagesInput = {
    create?: XOR<ImageCreateWithoutPostImagesInput, ImageUncheckedCreateWithoutPostImagesInput>
    connectOrCreate?: ImageCreateOrConnectWithoutPostImagesInput
    connect?: ImageWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<PostCreateWithoutImagesInput, PostUncheckedCreateWithoutImagesInput>
    connectOrCreate?: PostCreateOrConnectWithoutImagesInput
    upsert?: PostUpsertWithoutImagesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutImagesInput, PostUpdateWithoutImagesInput>, PostUncheckedUpdateWithoutImagesInput>
  }

  export type ImageUpdateOneRequiredWithoutPostImagesNestedInput = {
    create?: XOR<ImageCreateWithoutPostImagesInput, ImageUncheckedCreateWithoutPostImagesInput>
    connectOrCreate?: ImageCreateOrConnectWithoutPostImagesInput
    upsert?: ImageUpsertWithoutPostImagesInput
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutPostImagesInput, ImageUpdateWithoutPostImagesInput>, ImageUncheckedUpdateWithoutPostImagesInput>
  }

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type AlbumCreateNestedManyWithoutAuthorInput = {
    create?: XOR<AlbumCreateWithoutAuthorInput, AlbumUncheckedCreateWithoutAuthorInput> | AlbumCreateWithoutAuthorInput[] | AlbumUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutAuthorInput | AlbumCreateOrConnectWithoutAuthorInput[]
    createMany?: AlbumCreateManyAuthorInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type ChatGroupCreateNestedManyWithoutAdminInput = {
    create?: XOR<ChatGroupCreateWithoutAdminInput, ChatGroupUncheckedCreateWithoutAdminInput> | ChatGroupCreateWithoutAdminInput[] | ChatGroupUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ChatGroupCreateOrConnectWithoutAdminInput | ChatGroupCreateOrConnectWithoutAdminInput[]
    createMany?: ChatGroupCreateManyAdminInputEnvelope
    connect?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput> | ChatMessageCreateWithoutAuthorInput[] | ChatMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutAuthorInput | ChatMessageCreateOrConnectWithoutAuthorInput[]
    createMany?: ChatMessageCreateManyAuthorInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type AvatarCreateNestedOneWithoutProfileInput = {
    create?: XOR<AvatarCreateWithoutProfileInput, AvatarUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutProfileInput
    connect?: AvatarWhereUniqueInput
  }

  export type FriendshipCreateNestedManyWithoutProfile1Input = {
    create?: XOR<FriendshipCreateWithoutProfile1Input, FriendshipUncheckedCreateWithoutProfile1Input> | FriendshipCreateWithoutProfile1Input[] | FriendshipUncheckedCreateWithoutProfile1Input[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutProfile1Input | FriendshipCreateOrConnectWithoutProfile1Input[]
    createMany?: FriendshipCreateManyProfile1InputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type FriendshipCreateNestedManyWithoutProfile2Input = {
    create?: XOR<FriendshipCreateWithoutProfile2Input, FriendshipUncheckedCreateWithoutProfile2Input> | FriendshipCreateWithoutProfile2Input[] | FriendshipUncheckedCreateWithoutProfile2Input[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutProfile2Input | FriendshipCreateOrConnectWithoutProfile2Input[]
    createMany?: FriendshipCreateManyProfile2InputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput = {
    create?: XOR<chat_app_chatgroup_membersCreateWithoutProfileInput, chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput> | chat_app_chatgroup_membersCreateWithoutProfileInput[] | chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput | chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput[]
    createMany?: chat_app_chatgroup_membersCreateManyProfileInputEnvelope
    connect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type AlbumUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<AlbumCreateWithoutAuthorInput, AlbumUncheckedCreateWithoutAuthorInput> | AlbumCreateWithoutAuthorInput[] | AlbumUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutAuthorInput | AlbumCreateOrConnectWithoutAuthorInput[]
    createMany?: AlbumCreateManyAuthorInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type ChatGroupUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<ChatGroupCreateWithoutAdminInput, ChatGroupUncheckedCreateWithoutAdminInput> | ChatGroupCreateWithoutAdminInput[] | ChatGroupUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ChatGroupCreateOrConnectWithoutAdminInput | ChatGroupCreateOrConnectWithoutAdminInput[]
    createMany?: ChatGroupCreateManyAdminInputEnvelope
    connect?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput> | ChatMessageCreateWithoutAuthorInput[] | ChatMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutAuthorInput | ChatMessageCreateOrConnectWithoutAuthorInput[]
    createMany?: ChatMessageCreateManyAuthorInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type AvatarUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<AvatarCreateWithoutProfileInput, AvatarUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutProfileInput
    connect?: AvatarWhereUniqueInput
  }

  export type FriendshipUncheckedCreateNestedManyWithoutProfile1Input = {
    create?: XOR<FriendshipCreateWithoutProfile1Input, FriendshipUncheckedCreateWithoutProfile1Input> | FriendshipCreateWithoutProfile1Input[] | FriendshipUncheckedCreateWithoutProfile1Input[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutProfile1Input | FriendshipCreateOrConnectWithoutProfile1Input[]
    createMany?: FriendshipCreateManyProfile1InputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type FriendshipUncheckedCreateNestedManyWithoutProfile2Input = {
    create?: XOR<FriendshipCreateWithoutProfile2Input, FriendshipUncheckedCreateWithoutProfile2Input> | FriendshipCreateWithoutProfile2Input[] | FriendshipUncheckedCreateWithoutProfile2Input[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutProfile2Input | FriendshipCreateOrConnectWithoutProfile2Input[]
    createMany?: FriendshipCreateManyProfile2InputEnvelope
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
  }

  export type chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<chat_app_chatgroup_membersCreateWithoutProfileInput, chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput> | chat_app_chatgroup_membersCreateWithoutProfileInput[] | chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput | chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput[]
    createMany?: chat_app_chatgroup_membersCreateManyProfileInputEnvelope
    connect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type AlbumUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<AlbumCreateWithoutAuthorInput, AlbumUncheckedCreateWithoutAuthorInput> | AlbumCreateWithoutAuthorInput[] | AlbumUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutAuthorInput | AlbumCreateOrConnectWithoutAuthorInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutAuthorInput | AlbumUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: AlbumCreateManyAuthorInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutAuthorInput | AlbumUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutAuthorInput | AlbumUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type ChatGroupUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ChatGroupCreateWithoutAdminInput, ChatGroupUncheckedCreateWithoutAdminInput> | ChatGroupCreateWithoutAdminInput[] | ChatGroupUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ChatGroupCreateOrConnectWithoutAdminInput | ChatGroupCreateOrConnectWithoutAdminInput[]
    upsert?: ChatGroupUpsertWithWhereUniqueWithoutAdminInput | ChatGroupUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ChatGroupCreateManyAdminInputEnvelope
    set?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
    disconnect?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
    delete?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
    connect?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
    update?: ChatGroupUpdateWithWhereUniqueWithoutAdminInput | ChatGroupUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ChatGroupUpdateManyWithWhereWithoutAdminInput | ChatGroupUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ChatGroupScalarWhereInput | ChatGroupScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput> | ChatMessageCreateWithoutAuthorInput[] | ChatMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutAuthorInput | ChatMessageCreateOrConnectWithoutAuthorInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutAuthorInput | ChatMessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ChatMessageCreateManyAuthorInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutAuthorInput | ChatMessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutAuthorInput | ChatMessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type AvatarUpdateOneWithoutProfileNestedInput = {
    create?: XOR<AvatarCreateWithoutProfileInput, AvatarUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutProfileInput
    upsert?: AvatarUpsertWithoutProfileInput
    disconnect?: AvatarWhereInput | boolean
    delete?: AvatarWhereInput | boolean
    connect?: AvatarWhereUniqueInput
    update?: XOR<XOR<AvatarUpdateToOneWithWhereWithoutProfileInput, AvatarUpdateWithoutProfileInput>, AvatarUncheckedUpdateWithoutProfileInput>
  }

  export type FriendshipUpdateManyWithoutProfile1NestedInput = {
    create?: XOR<FriendshipCreateWithoutProfile1Input, FriendshipUncheckedCreateWithoutProfile1Input> | FriendshipCreateWithoutProfile1Input[] | FriendshipUncheckedCreateWithoutProfile1Input[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutProfile1Input | FriendshipCreateOrConnectWithoutProfile1Input[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutProfile1Input | FriendshipUpsertWithWhereUniqueWithoutProfile1Input[]
    createMany?: FriendshipCreateManyProfile1InputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutProfile1Input | FriendshipUpdateWithWhereUniqueWithoutProfile1Input[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutProfile1Input | FriendshipUpdateManyWithWhereWithoutProfile1Input[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type FriendshipUpdateManyWithoutProfile2NestedInput = {
    create?: XOR<FriendshipCreateWithoutProfile2Input, FriendshipUncheckedCreateWithoutProfile2Input> | FriendshipCreateWithoutProfile2Input[] | FriendshipUncheckedCreateWithoutProfile2Input[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutProfile2Input | FriendshipCreateOrConnectWithoutProfile2Input[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutProfile2Input | FriendshipUpsertWithWhereUniqueWithoutProfile2Input[]
    createMany?: FriendshipCreateManyProfile2InputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutProfile2Input | FriendshipUpdateWithWhereUniqueWithoutProfile2Input[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutProfile2Input | FriendshipUpdateManyWithWhereWithoutProfile2Input[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput = {
    create?: XOR<chat_app_chatgroup_membersCreateWithoutProfileInput, chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput> | chat_app_chatgroup_membersCreateWithoutProfileInput[] | chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput | chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput[]
    upsert?: chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutProfileInput | chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: chat_app_chatgroup_membersCreateManyProfileInputEnvelope
    set?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    disconnect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    delete?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    connect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    update?: chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutProfileInput | chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: chat_app_chatgroup_membersUpdateManyWithWhereWithoutProfileInput | chat_app_chatgroup_membersUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: chat_app_chatgroup_membersScalarWhereInput | chat_app_chatgroup_membersScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type AlbumUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<AlbumCreateWithoutAuthorInput, AlbumUncheckedCreateWithoutAuthorInput> | AlbumCreateWithoutAuthorInput[] | AlbumUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutAuthorInput | AlbumCreateOrConnectWithoutAuthorInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutAuthorInput | AlbumUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: AlbumCreateManyAuthorInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutAuthorInput | AlbumUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutAuthorInput | AlbumUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type ChatGroupUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ChatGroupCreateWithoutAdminInput, ChatGroupUncheckedCreateWithoutAdminInput> | ChatGroupCreateWithoutAdminInput[] | ChatGroupUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ChatGroupCreateOrConnectWithoutAdminInput | ChatGroupCreateOrConnectWithoutAdminInput[]
    upsert?: ChatGroupUpsertWithWhereUniqueWithoutAdminInput | ChatGroupUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ChatGroupCreateManyAdminInputEnvelope
    set?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
    disconnect?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
    delete?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
    connect?: ChatGroupWhereUniqueInput | ChatGroupWhereUniqueInput[]
    update?: ChatGroupUpdateWithWhereUniqueWithoutAdminInput | ChatGroupUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ChatGroupUpdateManyWithWhereWithoutAdminInput | ChatGroupUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ChatGroupScalarWhereInput | ChatGroupScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput> | ChatMessageCreateWithoutAuthorInput[] | ChatMessageUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutAuthorInput | ChatMessageCreateOrConnectWithoutAuthorInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutAuthorInput | ChatMessageUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ChatMessageCreateManyAuthorInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutAuthorInput | ChatMessageUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutAuthorInput | ChatMessageUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type AvatarUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<AvatarCreateWithoutProfileInput, AvatarUncheckedCreateWithoutProfileInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutProfileInput
    upsert?: AvatarUpsertWithoutProfileInput
    disconnect?: AvatarWhereInput | boolean
    delete?: AvatarWhereInput | boolean
    connect?: AvatarWhereUniqueInput
    update?: XOR<XOR<AvatarUpdateToOneWithWhereWithoutProfileInput, AvatarUpdateWithoutProfileInput>, AvatarUncheckedUpdateWithoutProfileInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutProfile1NestedInput = {
    create?: XOR<FriendshipCreateWithoutProfile1Input, FriendshipUncheckedCreateWithoutProfile1Input> | FriendshipCreateWithoutProfile1Input[] | FriendshipUncheckedCreateWithoutProfile1Input[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutProfile1Input | FriendshipCreateOrConnectWithoutProfile1Input[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutProfile1Input | FriendshipUpsertWithWhereUniqueWithoutProfile1Input[]
    createMany?: FriendshipCreateManyProfile1InputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutProfile1Input | FriendshipUpdateWithWhereUniqueWithoutProfile1Input[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutProfile1Input | FriendshipUpdateManyWithWhereWithoutProfile1Input[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type FriendshipUncheckedUpdateManyWithoutProfile2NestedInput = {
    create?: XOR<FriendshipCreateWithoutProfile2Input, FriendshipUncheckedCreateWithoutProfile2Input> | FriendshipCreateWithoutProfile2Input[] | FriendshipUncheckedCreateWithoutProfile2Input[]
    connectOrCreate?: FriendshipCreateOrConnectWithoutProfile2Input | FriendshipCreateOrConnectWithoutProfile2Input[]
    upsert?: FriendshipUpsertWithWhereUniqueWithoutProfile2Input | FriendshipUpsertWithWhereUniqueWithoutProfile2Input[]
    createMany?: FriendshipCreateManyProfile2InputEnvelope
    set?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    disconnect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    delete?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    connect?: FriendshipWhereUniqueInput | FriendshipWhereUniqueInput[]
    update?: FriendshipUpdateWithWhereUniqueWithoutProfile2Input | FriendshipUpdateWithWhereUniqueWithoutProfile2Input[]
    updateMany?: FriendshipUpdateManyWithWhereWithoutProfile2Input | FriendshipUpdateManyWithWhereWithoutProfile2Input[]
    deleteMany?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
  }

  export type chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<chat_app_chatgroup_membersCreateWithoutProfileInput, chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput> | chat_app_chatgroup_membersCreateWithoutProfileInput[] | chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput | chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput[]
    upsert?: chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutProfileInput | chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: chat_app_chatgroup_membersCreateManyProfileInputEnvelope
    set?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    disconnect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    delete?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    connect?: chat_app_chatgroup_membersWhereUniqueInput | chat_app_chatgroup_membersWhereUniqueInput[]
    update?: chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutProfileInput | chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: chat_app_chatgroup_membersUpdateManyWithWhereWithoutProfileInput | chat_app_chatgroup_membersUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: chat_app_chatgroup_membersScalarWhereInput | chat_app_chatgroup_membersScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutAvatarInput = {
    create?: XOR<ProfileCreateWithoutAvatarInput, ProfileUncheckedCreateWithoutAvatarInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAvatarInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutAvatarNestedInput = {
    create?: XOR<ProfileCreateWithoutAvatarInput, ProfileUncheckedCreateWithoutAvatarInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAvatarInput
    upsert?: ProfileUpsertWithoutAvatarInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutAvatarInput, ProfileUpdateWithoutAvatarInput>, ProfileUncheckedUpdateWithoutAvatarInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type post_app_album_imagesCreateWithoutAlbumInput = {
    image: ImageCreateNestedOneWithoutAlbum_imagesInput
  }

  export type post_app_album_imagesUncheckedCreateWithoutAlbumInput = {
    id?: number
    image_id: number
  }

  export type post_app_album_imagesCreateOrConnectWithoutAlbumInput = {
    where: post_app_album_imagesWhereUniqueInput
    create: XOR<post_app_album_imagesCreateWithoutAlbumInput, post_app_album_imagesUncheckedCreateWithoutAlbumInput>
  }

  export type post_app_album_imagesCreateManyAlbumInputEnvelope = {
    data: post_app_album_imagesCreateManyAlbumInput | post_app_album_imagesCreateManyAlbumInput[]
  }

  export type post_app_album_tagsCreateWithoutAlbumInput = {
    tag: TagsCreateNestedOneWithoutAlbum_tagsInput
  }

  export type post_app_album_tagsUncheckedCreateWithoutAlbumInput = {
    tag_id: number
    id?: number
  }

  export type post_app_album_tagsCreateOrConnectWithoutAlbumInput = {
    where: post_app_album_tagsWhereUniqueInput
    create: XOR<post_app_album_tagsCreateWithoutAlbumInput, post_app_album_tagsUncheckedCreateWithoutAlbumInput>
  }

  export type post_app_album_tagsCreateManyAlbumInputEnvelope = {
    data: post_app_album_tagsCreateManyAlbumInput | post_app_album_tagsCreateManyAlbumInput[]
  }

  export type ProfileCreateWithoutAlbumInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageCreateNestedManyWithoutAuthorInput
    avatar?: AvatarCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutAlbumInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupUncheckedCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    avatar?: AvatarUncheckedCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipUncheckedCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipUncheckedCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutAlbumInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutAlbumInput, ProfileUncheckedCreateWithoutAlbumInput>
  }

  export type post_app_album_imagesUpsertWithWhereUniqueWithoutAlbumInput = {
    where: post_app_album_imagesWhereUniqueInput
    update: XOR<post_app_album_imagesUpdateWithoutAlbumInput, post_app_album_imagesUncheckedUpdateWithoutAlbumInput>
    create: XOR<post_app_album_imagesCreateWithoutAlbumInput, post_app_album_imagesUncheckedCreateWithoutAlbumInput>
  }

  export type post_app_album_imagesUpdateWithWhereUniqueWithoutAlbumInput = {
    where: post_app_album_imagesWhereUniqueInput
    data: XOR<post_app_album_imagesUpdateWithoutAlbumInput, post_app_album_imagesUncheckedUpdateWithoutAlbumInput>
  }

  export type post_app_album_imagesUpdateManyWithWhereWithoutAlbumInput = {
    where: post_app_album_imagesScalarWhereInput
    data: XOR<post_app_album_imagesUpdateManyMutationInput, post_app_album_imagesUncheckedUpdateManyWithoutAlbumInput>
  }

  export type post_app_album_imagesScalarWhereInput = {
    AND?: post_app_album_imagesScalarWhereInput | post_app_album_imagesScalarWhereInput[]
    OR?: post_app_album_imagesScalarWhereInput[]
    NOT?: post_app_album_imagesScalarWhereInput | post_app_album_imagesScalarWhereInput[]
    id?: IntFilter<"post_app_album_images"> | number
    album_id?: IntFilter<"post_app_album_images"> | number
    image_id?: IntFilter<"post_app_album_images"> | number
  }

  export type post_app_album_tagsUpsertWithWhereUniqueWithoutAlbumInput = {
    where: post_app_album_tagsWhereUniqueInput
    update: XOR<post_app_album_tagsUpdateWithoutAlbumInput, post_app_album_tagsUncheckedUpdateWithoutAlbumInput>
    create: XOR<post_app_album_tagsCreateWithoutAlbumInput, post_app_album_tagsUncheckedCreateWithoutAlbumInput>
  }

  export type post_app_album_tagsUpdateWithWhereUniqueWithoutAlbumInput = {
    where: post_app_album_tagsWhereUniqueInput
    data: XOR<post_app_album_tagsUpdateWithoutAlbumInput, post_app_album_tagsUncheckedUpdateWithoutAlbumInput>
  }

  export type post_app_album_tagsUpdateManyWithWhereWithoutAlbumInput = {
    where: post_app_album_tagsScalarWhereInput
    data: XOR<post_app_album_tagsUpdateManyMutationInput, post_app_album_tagsUncheckedUpdateManyWithoutAlbumInput>
  }

  export type post_app_album_tagsScalarWhereInput = {
    AND?: post_app_album_tagsScalarWhereInput | post_app_album_tagsScalarWhereInput[]
    OR?: post_app_album_tagsScalarWhereInput[]
    NOT?: post_app_album_tagsScalarWhereInput | post_app_album_tagsScalarWhereInput[]
    album_id?: IntFilter<"post_app_album_tags"> | number
    tag_id?: IntFilter<"post_app_album_tags"> | number
    id?: IntFilter<"post_app_album_tags"> | number
  }

  export type ProfileUpsertWithoutAlbumInput = {
    update: XOR<ProfileUpdateWithoutAlbumInput, ProfileUncheckedUpdateWithoutAlbumInput>
    create: XOR<ProfileCreateWithoutAlbumInput, ProfileUncheckedCreateWithoutAlbumInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutAlbumInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutAlbumInput, ProfileUncheckedUpdateWithoutAlbumInput>
  }

  export type ProfileUpdateWithoutAlbumInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUncheckedUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUncheckedUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUncheckedUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUncheckedUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type AlbumCreateWithoutImagesInput = {
    name: string
    created_at?: Date | string
    shown?: boolean
    topic?: post_app_album_tagsCreateNestedManyWithoutAlbumInput
    author: ProfileCreateNestedOneWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutImagesInput = {
    id?: number
    name: string
    created_at?: Date | string
    shown?: boolean
    author_id: number
    topic?: post_app_album_tagsUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutImagesInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutImagesInput, AlbumUncheckedCreateWithoutImagesInput>
  }

  export type ImageCreateWithoutAlbum_imagesInput = {
    filename: string
    file: string
    uploaded_at?: Date | string
    PostImages?: post_app_post_imageCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateWithoutAlbum_imagesInput = {
    id?: number
    filename: string
    file: string
    uploaded_at?: Date | string
    PostImages?: post_app_post_imageUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageCreateOrConnectWithoutAlbum_imagesInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutAlbum_imagesInput, ImageUncheckedCreateWithoutAlbum_imagesInput>
  }

  export type AlbumUpsertWithoutImagesInput = {
    update: XOR<AlbumUpdateWithoutImagesInput, AlbumUncheckedUpdateWithoutImagesInput>
    create: XOR<AlbumCreateWithoutImagesInput, AlbumUncheckedCreateWithoutImagesInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutImagesInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutImagesInput, AlbumUncheckedUpdateWithoutImagesInput>
  }

  export type AlbumUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    topic?: post_app_album_tagsUpdateManyWithoutAlbumNestedInput
    author?: ProfileUpdateOneRequiredWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    author_id?: IntFieldUpdateOperationsInput | number
    topic?: post_app_album_tagsUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type ImageUpsertWithoutAlbum_imagesInput = {
    update: XOR<ImageUpdateWithoutAlbum_imagesInput, ImageUncheckedUpdateWithoutAlbum_imagesInput>
    create: XOR<ImageCreateWithoutAlbum_imagesInput, ImageUncheckedCreateWithoutAlbum_imagesInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutAlbum_imagesInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutAlbum_imagesInput, ImageUncheckedUpdateWithoutAlbum_imagesInput>
  }

  export type ImageUpdateWithoutAlbum_imagesInput = {
    filename?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    PostImages?: post_app_post_imageUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateWithoutAlbum_imagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    PostImages?: post_app_post_imageUncheckedUpdateManyWithoutImageNestedInput
  }

  export type AlbumCreateWithoutTopicInput = {
    name: string
    created_at?: Date | string
    shown?: boolean
    images?: post_app_album_imagesCreateNestedManyWithoutAlbumInput
    author: ProfileCreateNestedOneWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutTopicInput = {
    id?: number
    name: string
    created_at?: Date | string
    shown?: boolean
    author_id: number
    images?: post_app_album_imagesUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutTopicInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutTopicInput, AlbumUncheckedCreateWithoutTopicInput>
  }

  export type TagsCreateWithoutAlbum_tagsInput = {
    name: string
    posts?: post_app_post_tagCreateNestedManyWithoutTagInput
  }

  export type TagsUncheckedCreateWithoutAlbum_tagsInput = {
    id?: number
    name: string
    posts?: post_app_post_tagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagsCreateOrConnectWithoutAlbum_tagsInput = {
    where: TagsWhereUniqueInput
    create: XOR<TagsCreateWithoutAlbum_tagsInput, TagsUncheckedCreateWithoutAlbum_tagsInput>
  }

  export type AlbumUpsertWithoutTopicInput = {
    update: XOR<AlbumUpdateWithoutTopicInput, AlbumUncheckedUpdateWithoutTopicInput>
    create: XOR<AlbumCreateWithoutTopicInput, AlbumUncheckedCreateWithoutTopicInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutTopicInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutTopicInput, AlbumUncheckedUpdateWithoutTopicInput>
  }

  export type AlbumUpdateWithoutTopicInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    images?: post_app_album_imagesUpdateManyWithoutAlbumNestedInput
    author?: ProfileUpdateOneRequiredWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutTopicInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    author_id?: IntFieldUpdateOperationsInput | number
    images?: post_app_album_imagesUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type TagsUpsertWithoutAlbum_tagsInput = {
    update: XOR<TagsUpdateWithoutAlbum_tagsInput, TagsUncheckedUpdateWithoutAlbum_tagsInput>
    create: XOR<TagsCreateWithoutAlbum_tagsInput, TagsUncheckedCreateWithoutAlbum_tagsInput>
    where?: TagsWhereInput
  }

  export type TagsUpdateToOneWithWhereWithoutAlbum_tagsInput = {
    where?: TagsWhereInput
    data: XOR<TagsUpdateWithoutAlbum_tagsInput, TagsUncheckedUpdateWithoutAlbum_tagsInput>
  }

  export type TagsUpdateWithoutAlbum_tagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    posts?: post_app_post_tagUpdateManyWithoutTagNestedInput
  }

  export type TagsUncheckedUpdateWithoutAlbum_tagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    posts?: post_app_post_tagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type chat_app_chatgroup_membersCreateWithoutChat_groupInput = {
    profile: ProfileCreateNestedOneWithoutChat_group_membersInput
  }

  export type chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput = {
    profile_id: number
  }

  export type chat_app_chatgroup_membersCreateOrConnectWithoutChat_groupInput = {
    where: chat_app_chatgroup_membersWhereUniqueInput
    create: XOR<chat_app_chatgroup_membersCreateWithoutChat_groupInput, chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput>
  }

  export type chat_app_chatgroup_membersCreateManyChat_groupInputEnvelope = {
    data: chat_app_chatgroup_membersCreateManyChat_groupInput | chat_app_chatgroup_membersCreateManyChat_groupInput[]
  }

  export type ProfileCreateWithoutAdministered_groupsInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostCreateNestedManyWithoutAuthorInput
    album?: AlbumCreateNestedManyWithoutAuthorInput
    chat_messages?: ChatMessageCreateNestedManyWithoutAuthorInput
    avatar?: AvatarCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutAdministered_groupsInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput
    album?: AlbumUncheckedCreateNestedManyWithoutAuthorInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    avatar?: AvatarUncheckedCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipUncheckedCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipUncheckedCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutAdministered_groupsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutAdministered_groupsInput, ProfileUncheckedCreateWithoutAdministered_groupsInput>
  }

  export type ChatMessageCreateWithoutChat_groupInput = {
    content: string
    sent_at?: Date | string
    attached_image: string
    author: ProfileCreateNestedOneWithoutChat_messagesInput
  }

  export type ChatMessageUncheckedCreateWithoutChat_groupInput = {
    id?: number
    content: string
    sent_at?: Date | string
    author_id: number
    attached_image: string
  }

  export type ChatMessageCreateOrConnectWithoutChat_groupInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutChat_groupInput, ChatMessageUncheckedCreateWithoutChat_groupInput>
  }

  export type ChatMessageCreateManyChat_groupInputEnvelope = {
    data: ChatMessageCreateManyChat_groupInput | ChatMessageCreateManyChat_groupInput[]
  }

  export type chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutChat_groupInput = {
    where: chat_app_chatgroup_membersWhereUniqueInput
    update: XOR<chat_app_chatgroup_membersUpdateWithoutChat_groupInput, chat_app_chatgroup_membersUncheckedUpdateWithoutChat_groupInput>
    create: XOR<chat_app_chatgroup_membersCreateWithoutChat_groupInput, chat_app_chatgroup_membersUncheckedCreateWithoutChat_groupInput>
  }

  export type chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutChat_groupInput = {
    where: chat_app_chatgroup_membersWhereUniqueInput
    data: XOR<chat_app_chatgroup_membersUpdateWithoutChat_groupInput, chat_app_chatgroup_membersUncheckedUpdateWithoutChat_groupInput>
  }

  export type chat_app_chatgroup_membersUpdateManyWithWhereWithoutChat_groupInput = {
    where: chat_app_chatgroup_membersScalarWhereInput
    data: XOR<chat_app_chatgroup_membersUpdateManyMutationInput, chat_app_chatgroup_membersUncheckedUpdateManyWithoutChat_groupInput>
  }

  export type chat_app_chatgroup_membersScalarWhereInput = {
    AND?: chat_app_chatgroup_membersScalarWhereInput | chat_app_chatgroup_membersScalarWhereInput[]
    OR?: chat_app_chatgroup_membersScalarWhereInput[]
    NOT?: chat_app_chatgroup_membersScalarWhereInput | chat_app_chatgroup_membersScalarWhereInput[]
    chat_groupId?: IntFilter<"chat_app_chatgroup_members"> | number
    profile_id?: IntFilter<"chat_app_chatgroup_members"> | number
  }

  export type ProfileUpsertWithoutAdministered_groupsInput = {
    update: XOR<ProfileUpdateWithoutAdministered_groupsInput, ProfileUncheckedUpdateWithoutAdministered_groupsInput>
    create: XOR<ProfileCreateWithoutAdministered_groupsInput, ProfileUncheckedCreateWithoutAdministered_groupsInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutAdministered_groupsInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutAdministered_groupsInput, ProfileUncheckedUpdateWithoutAdministered_groupsInput>
  }

  export type ProfileUpdateWithoutAdministered_groupsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateManyWithoutAuthorNestedInput
    album?: AlbumUpdateManyWithoutAuthorNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutAdministered_groupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    album?: AlbumUncheckedUpdateManyWithoutAuthorNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUncheckedUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUncheckedUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUncheckedUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutChat_groupInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutChat_groupInput, ChatMessageUncheckedUpdateWithoutChat_groupInput>
    create: XOR<ChatMessageCreateWithoutChat_groupInput, ChatMessageUncheckedCreateWithoutChat_groupInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutChat_groupInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutChat_groupInput, ChatMessageUncheckedUpdateWithoutChat_groupInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutChat_groupInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutChat_groupInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: IntFilter<"ChatMessage"> | number
    content?: StringFilter<"ChatMessage"> | string
    sent_at?: DateTimeFilter<"ChatMessage"> | Date | string
    author_id?: IntFilter<"ChatMessage"> | number
    chat_groupId?: IntFilter<"ChatMessage"> | number
    attached_image?: StringFilter<"ChatMessage"> | string
  }

  export type ProfileCreateWithoutChat_messagesInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostCreateNestedManyWithoutAuthorInput
    album?: AlbumCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupCreateNestedManyWithoutAdminInput
    avatar?: AvatarCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutChat_messagesInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput
    album?: AlbumUncheckedCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupUncheckedCreateNestedManyWithoutAdminInput
    avatar?: AvatarUncheckedCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipUncheckedCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipUncheckedCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutChat_messagesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutChat_messagesInput, ProfileUncheckedCreateWithoutChat_messagesInput>
  }

  export type ChatGroupCreateWithoutChat_messagesInput = {
    name: string
    is_personal_chat?: boolean
    avatar: string
    members?: chat_app_chatgroup_membersCreateNestedManyWithoutChat_groupInput
    admin: ProfileCreateNestedOneWithoutAdministered_groupsInput
  }

  export type ChatGroupUncheckedCreateWithoutChat_messagesInput = {
    id?: number
    name: string
    is_personal_chat?: boolean
    admin_id: number
    avatar: string
    members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutChat_groupInput
  }

  export type ChatGroupCreateOrConnectWithoutChat_messagesInput = {
    where: ChatGroupWhereUniqueInput
    create: XOR<ChatGroupCreateWithoutChat_messagesInput, ChatGroupUncheckedCreateWithoutChat_messagesInput>
  }

  export type ProfileUpsertWithoutChat_messagesInput = {
    update: XOR<ProfileUpdateWithoutChat_messagesInput, ProfileUncheckedUpdateWithoutChat_messagesInput>
    create: XOR<ProfileCreateWithoutChat_messagesInput, ProfileUncheckedCreateWithoutChat_messagesInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutChat_messagesInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutChat_messagesInput, ProfileUncheckedUpdateWithoutChat_messagesInput>
  }

  export type ProfileUpdateWithoutChat_messagesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateManyWithoutAuthorNestedInput
    album?: AlbumUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUpdateManyWithoutAdminNestedInput
    avatar?: AvatarUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutChat_messagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    album?: AlbumUncheckedUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUncheckedUpdateManyWithoutAdminNestedInput
    avatar?: AvatarUncheckedUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUncheckedUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUncheckedUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ChatGroupUpsertWithoutChat_messagesInput = {
    update: XOR<ChatGroupUpdateWithoutChat_messagesInput, ChatGroupUncheckedUpdateWithoutChat_messagesInput>
    create: XOR<ChatGroupCreateWithoutChat_messagesInput, ChatGroupUncheckedCreateWithoutChat_messagesInput>
    where?: ChatGroupWhereInput
  }

  export type ChatGroupUpdateToOneWithWhereWithoutChat_messagesInput = {
    where?: ChatGroupWhereInput
    data: XOR<ChatGroupUpdateWithoutChat_messagesInput, ChatGroupUncheckedUpdateWithoutChat_messagesInput>
  }

  export type ChatGroupUpdateWithoutChat_messagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
    members?: chat_app_chatgroup_membersUpdateManyWithoutChat_groupNestedInput
    admin?: ProfileUpdateOneRequiredWithoutAdministered_groupsNestedInput
  }

  export type ChatGroupUncheckedUpdateWithoutChat_messagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    admin_id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutChat_groupNestedInput
  }

  export type ChatGroupCreateWithoutMembersInput = {
    name: string
    is_personal_chat?: boolean
    avatar: string
    admin: ProfileCreateNestedOneWithoutAdministered_groupsInput
    chat_messages?: ChatMessageCreateNestedManyWithoutChat_groupInput
  }

  export type ChatGroupUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    is_personal_chat?: boolean
    admin_id: number
    avatar: string
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutChat_groupInput
  }

  export type ChatGroupCreateOrConnectWithoutMembersInput = {
    where: ChatGroupWhereUniqueInput
    create: XOR<ChatGroupCreateWithoutMembersInput, ChatGroupUncheckedCreateWithoutMembersInput>
  }

  export type ProfileCreateWithoutChat_group_membersInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostCreateNestedManyWithoutAuthorInput
    album?: AlbumCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageCreateNestedManyWithoutAuthorInput
    avatar?: AvatarCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipCreateNestedManyWithoutProfile2Input
  }

  export type ProfileUncheckedCreateWithoutChat_group_membersInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput
    album?: AlbumUncheckedCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupUncheckedCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    avatar?: AvatarUncheckedCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipUncheckedCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipUncheckedCreateNestedManyWithoutProfile2Input
  }

  export type ProfileCreateOrConnectWithoutChat_group_membersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutChat_group_membersInput, ProfileUncheckedCreateWithoutChat_group_membersInput>
  }

  export type ChatGroupUpsertWithoutMembersInput = {
    update: XOR<ChatGroupUpdateWithoutMembersInput, ChatGroupUncheckedUpdateWithoutMembersInput>
    create: XOR<ChatGroupCreateWithoutMembersInput, ChatGroupUncheckedCreateWithoutMembersInput>
    where?: ChatGroupWhereInput
  }

  export type ChatGroupUpdateToOneWithWhereWithoutMembersInput = {
    where?: ChatGroupWhereInput
    data: XOR<ChatGroupUpdateWithoutMembersInput, ChatGroupUncheckedUpdateWithoutMembersInput>
  }

  export type ChatGroupUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
    admin?: ProfileUpdateOneRequiredWithoutAdministered_groupsNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutChat_groupNestedInput
  }

  export type ChatGroupUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    admin_id?: IntFieldUpdateOperationsInput | number
    avatar?: StringFieldUpdateOperationsInput | string
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutChat_groupNestedInput
  }

  export type ProfileUpsertWithoutChat_group_membersInput = {
    update: XOR<ProfileUpdateWithoutChat_group_membersInput, ProfileUncheckedUpdateWithoutChat_group_membersInput>
    create: XOR<ProfileCreateWithoutChat_group_membersInput, ProfileUncheckedCreateWithoutChat_group_membersInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutChat_group_membersInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutChat_group_membersInput, ProfileUncheckedUpdateWithoutChat_group_membersInput>
  }

  export type ProfileUpdateWithoutChat_group_membersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateManyWithoutAuthorNestedInput
    album?: AlbumUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUpdateManyWithoutProfile2NestedInput
  }

  export type ProfileUncheckedUpdateWithoutChat_group_membersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    album?: AlbumUncheckedUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUncheckedUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUncheckedUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUncheckedUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUncheckedUpdateManyWithoutProfile2NestedInput
  }

  export type ProfileCreateWithoutFriendship_fromInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostCreateNestedManyWithoutAuthorInput
    album?: AlbumCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageCreateNestedManyWithoutAuthorInput
    avatar?: AvatarCreateNestedOneWithoutProfileInput
    friendship_to?: FriendshipCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutFriendship_fromInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput
    album?: AlbumUncheckedCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupUncheckedCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    avatar?: AvatarUncheckedCreateNestedOneWithoutProfileInput
    friendship_to?: FriendshipUncheckedCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutFriendship_fromInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutFriendship_fromInput, ProfileUncheckedCreateWithoutFriendship_fromInput>
  }

  export type ProfileCreateWithoutFriendship_toInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostCreateNestedManyWithoutAuthorInput
    album?: AlbumCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageCreateNestedManyWithoutAuthorInput
    avatar?: AvatarCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipCreateNestedManyWithoutProfile1Input
    chat_group_members?: chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutFriendship_toInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput
    album?: AlbumUncheckedCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupUncheckedCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    avatar?: AvatarUncheckedCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipUncheckedCreateNestedManyWithoutProfile1Input
    chat_group_members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutFriendship_toInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutFriendship_toInput, ProfileUncheckedCreateWithoutFriendship_toInput>
  }

  export type ProfileUpsertWithoutFriendship_fromInput = {
    update: XOR<ProfileUpdateWithoutFriendship_fromInput, ProfileUncheckedUpdateWithoutFriendship_fromInput>
    create: XOR<ProfileCreateWithoutFriendship_fromInput, ProfileUncheckedCreateWithoutFriendship_fromInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutFriendship_fromInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutFriendship_fromInput, ProfileUncheckedUpdateWithoutFriendship_fromInput>
  }

  export type ProfileUpdateWithoutFriendship_fromInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateManyWithoutAuthorNestedInput
    album?: AlbumUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUpdateOneWithoutProfileNestedInput
    friendship_to?: FriendshipUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutFriendship_fromInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    album?: AlbumUncheckedUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUncheckedUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUncheckedUpdateOneWithoutProfileNestedInput
    friendship_to?: FriendshipUncheckedUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUpsertWithoutFriendship_toInput = {
    update: XOR<ProfileUpdateWithoutFriendship_toInput, ProfileUncheckedUpdateWithoutFriendship_toInput>
    create: XOR<ProfileCreateWithoutFriendship_toInput, ProfileUncheckedCreateWithoutFriendship_toInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutFriendship_toInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutFriendship_toInput, ProfileUncheckedUpdateWithoutFriendship_toInput>
  }

  export type ProfileUpdateWithoutFriendship_toInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateManyWithoutAuthorNestedInput
    album?: AlbumUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUpdateManyWithoutProfile1NestedInput
    chat_group_members?: chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutFriendship_toInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    album?: AlbumUncheckedUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUncheckedUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUncheckedUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUncheckedUpdateManyWithoutProfile1NestedInput
    chat_group_members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type post_app_album_imagesCreateWithoutImageInput = {
    album: AlbumCreateNestedOneWithoutImagesInput
  }

  export type post_app_album_imagesUncheckedCreateWithoutImageInput = {
    id?: number
    album_id: number
  }

  export type post_app_album_imagesCreateOrConnectWithoutImageInput = {
    where: post_app_album_imagesWhereUniqueInput
    create: XOR<post_app_album_imagesCreateWithoutImageInput, post_app_album_imagesUncheckedCreateWithoutImageInput>
  }

  export type post_app_album_imagesCreateManyImageInputEnvelope = {
    data: post_app_album_imagesCreateManyImageInput | post_app_album_imagesCreateManyImageInput[]
  }

  export type post_app_post_imageCreateWithoutImageInput = {
    post: PostCreateNestedOneWithoutImagesInput
  }

  export type post_app_post_imageUncheckedCreateWithoutImageInput = {
    post_id: number
    id?: number
  }

  export type post_app_post_imageCreateOrConnectWithoutImageInput = {
    where: post_app_post_imageWhereUniqueInput
    create: XOR<post_app_post_imageCreateWithoutImageInput, post_app_post_imageUncheckedCreateWithoutImageInput>
  }

  export type post_app_post_imageCreateManyImageInputEnvelope = {
    data: post_app_post_imageCreateManyImageInput | post_app_post_imageCreateManyImageInput[]
  }

  export type post_app_album_imagesUpsertWithWhereUniqueWithoutImageInput = {
    where: post_app_album_imagesWhereUniqueInput
    update: XOR<post_app_album_imagesUpdateWithoutImageInput, post_app_album_imagesUncheckedUpdateWithoutImageInput>
    create: XOR<post_app_album_imagesCreateWithoutImageInput, post_app_album_imagesUncheckedCreateWithoutImageInput>
  }

  export type post_app_album_imagesUpdateWithWhereUniqueWithoutImageInput = {
    where: post_app_album_imagesWhereUniqueInput
    data: XOR<post_app_album_imagesUpdateWithoutImageInput, post_app_album_imagesUncheckedUpdateWithoutImageInput>
  }

  export type post_app_album_imagesUpdateManyWithWhereWithoutImageInput = {
    where: post_app_album_imagesScalarWhereInput
    data: XOR<post_app_album_imagesUpdateManyMutationInput, post_app_album_imagesUncheckedUpdateManyWithoutImageInput>
  }

  export type post_app_post_imageUpsertWithWhereUniqueWithoutImageInput = {
    where: post_app_post_imageWhereUniqueInput
    update: XOR<post_app_post_imageUpdateWithoutImageInput, post_app_post_imageUncheckedUpdateWithoutImageInput>
    create: XOR<post_app_post_imageCreateWithoutImageInput, post_app_post_imageUncheckedCreateWithoutImageInput>
  }

  export type post_app_post_imageUpdateWithWhereUniqueWithoutImageInput = {
    where: post_app_post_imageWhereUniqueInput
    data: XOR<post_app_post_imageUpdateWithoutImageInput, post_app_post_imageUncheckedUpdateWithoutImageInput>
  }

  export type post_app_post_imageUpdateManyWithWhereWithoutImageInput = {
    where: post_app_post_imageScalarWhereInput
    data: XOR<post_app_post_imageUpdateManyMutationInput, post_app_post_imageUncheckedUpdateManyWithoutImageInput>
  }

  export type post_app_post_imageScalarWhereInput = {
    AND?: post_app_post_imageScalarWhereInput | post_app_post_imageScalarWhereInput[]
    OR?: post_app_post_imageScalarWhereInput[]
    NOT?: post_app_post_imageScalarWhereInput | post_app_post_imageScalarWhereInput[]
    post_id?: IntFilter<"post_app_post_image"> | number
    image_id?: IntFilter<"post_app_post_image"> | number
    id?: IntFilter<"post_app_post_image"> | number
  }

  export type post_app_post_tagCreateWithoutPostInput = {
    tag: TagsCreateNestedOneWithoutPostsInput
  }

  export type post_app_post_tagUncheckedCreateWithoutPostInput = {
    tag_id: number
    id?: number
  }

  export type post_app_post_tagCreateOrConnectWithoutPostInput = {
    where: post_app_post_tagWhereUniqueInput
    create: XOR<post_app_post_tagCreateWithoutPostInput, post_app_post_tagUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_tagCreateManyPostInputEnvelope = {
    data: post_app_post_tagCreateManyPostInput | post_app_post_tagCreateManyPostInput[]
  }

  export type post_app_post_imageCreateWithoutPostInput = {
    image: ImageCreateNestedOneWithoutPostImagesInput
  }

  export type post_app_post_imageUncheckedCreateWithoutPostInput = {
    image_id: number
    id?: number
  }

  export type post_app_post_imageCreateOrConnectWithoutPostInput = {
    where: post_app_post_imageWhereUniqueInput
    create: XOR<post_app_post_imageCreateWithoutPostInput, post_app_post_imageUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_imageCreateManyPostInputEnvelope = {
    data: post_app_post_imageCreateManyPostInput | post_app_post_imageCreateManyPostInput[]
  }

  export type post_app_post_viewsCreateWithoutPostInput = {

  }

  export type post_app_post_viewsUncheckedCreateWithoutPostInput = {
    id?: number
  }

  export type post_app_post_viewsCreateOrConnectWithoutPostInput = {
    where: post_app_post_viewsWhereUniqueInput
    create: XOR<post_app_post_viewsCreateWithoutPostInput, post_app_post_viewsUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_viewsCreateManyPostInputEnvelope = {
    data: post_app_post_viewsCreateManyPostInput | post_app_post_viewsCreateManyPostInput[]
  }

  export type post_app_post_likesCreateWithoutPostInput = {

  }

  export type post_app_post_likesUncheckedCreateWithoutPostInput = {
    id?: number
  }

  export type post_app_post_likesCreateOrConnectWithoutPostInput = {
    where: post_app_post_likesWhereUniqueInput
    create: XOR<post_app_post_likesCreateWithoutPostInput, post_app_post_likesUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_likesCreateManyPostInputEnvelope = {
    data: post_app_post_likesCreateManyPostInput | post_app_post_likesCreateManyPostInput[]
  }

  export type ProfileCreateWithoutPostInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    album?: AlbumCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageCreateNestedManyWithoutAuthorInput
    avatar?: AvatarCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutPostInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    album?: AlbumUncheckedCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupUncheckedCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    avatar?: AvatarUncheckedCreateNestedOneWithoutProfileInput
    friendship_from?: FriendshipUncheckedCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipUncheckedCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutPostInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
  }

  export type LinkCreateWithoutPostInput = {
    url: string
  }

  export type LinkUncheckedCreateWithoutPostInput = {
    id?: number
    url: string
  }

  export type LinkCreateOrConnectWithoutPostInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutPostInput, LinkUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_tagUpsertWithWhereUniqueWithoutPostInput = {
    where: post_app_post_tagWhereUniqueInput
    update: XOR<post_app_post_tagUpdateWithoutPostInput, post_app_post_tagUncheckedUpdateWithoutPostInput>
    create: XOR<post_app_post_tagCreateWithoutPostInput, post_app_post_tagUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_tagUpdateWithWhereUniqueWithoutPostInput = {
    where: post_app_post_tagWhereUniqueInput
    data: XOR<post_app_post_tagUpdateWithoutPostInput, post_app_post_tagUncheckedUpdateWithoutPostInput>
  }

  export type post_app_post_tagUpdateManyWithWhereWithoutPostInput = {
    where: post_app_post_tagScalarWhereInput
    data: XOR<post_app_post_tagUpdateManyMutationInput, post_app_post_tagUncheckedUpdateManyWithoutPostInput>
  }

  export type post_app_post_tagScalarWhereInput = {
    AND?: post_app_post_tagScalarWhereInput | post_app_post_tagScalarWhereInput[]
    OR?: post_app_post_tagScalarWhereInput[]
    NOT?: post_app_post_tagScalarWhereInput | post_app_post_tagScalarWhereInput[]
    post_id?: IntFilter<"post_app_post_tag"> | number
    tag_id?: IntFilter<"post_app_post_tag"> | number
    id?: IntFilter<"post_app_post_tag"> | number
  }

  export type post_app_post_imageUpsertWithWhereUniqueWithoutPostInput = {
    where: post_app_post_imageWhereUniqueInput
    update: XOR<post_app_post_imageUpdateWithoutPostInput, post_app_post_imageUncheckedUpdateWithoutPostInput>
    create: XOR<post_app_post_imageCreateWithoutPostInput, post_app_post_imageUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_imageUpdateWithWhereUniqueWithoutPostInput = {
    where: post_app_post_imageWhereUniqueInput
    data: XOR<post_app_post_imageUpdateWithoutPostInput, post_app_post_imageUncheckedUpdateWithoutPostInput>
  }

  export type post_app_post_imageUpdateManyWithWhereWithoutPostInput = {
    where: post_app_post_imageScalarWhereInput
    data: XOR<post_app_post_imageUpdateManyMutationInput, post_app_post_imageUncheckedUpdateManyWithoutPostInput>
  }

  export type post_app_post_viewsUpsertWithWhereUniqueWithoutPostInput = {
    where: post_app_post_viewsWhereUniqueInput
    update: XOR<post_app_post_viewsUpdateWithoutPostInput, post_app_post_viewsUncheckedUpdateWithoutPostInput>
    create: XOR<post_app_post_viewsCreateWithoutPostInput, post_app_post_viewsUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_viewsUpdateWithWhereUniqueWithoutPostInput = {
    where: post_app_post_viewsWhereUniqueInput
    data: XOR<post_app_post_viewsUpdateWithoutPostInput, post_app_post_viewsUncheckedUpdateWithoutPostInput>
  }

  export type post_app_post_viewsUpdateManyWithWhereWithoutPostInput = {
    where: post_app_post_viewsScalarWhereInput
    data: XOR<post_app_post_viewsUpdateManyMutationInput, post_app_post_viewsUncheckedUpdateManyWithoutPostInput>
  }

  export type post_app_post_viewsScalarWhereInput = {
    AND?: post_app_post_viewsScalarWhereInput | post_app_post_viewsScalarWhereInput[]
    OR?: post_app_post_viewsScalarWhereInput[]
    NOT?: post_app_post_viewsScalarWhereInput | post_app_post_viewsScalarWhereInput[]
    post_id?: IntFilter<"post_app_post_views"> | number
    id?: IntFilter<"post_app_post_views"> | number
  }

  export type post_app_post_likesUpsertWithWhereUniqueWithoutPostInput = {
    where: post_app_post_likesWhereUniqueInput
    update: XOR<post_app_post_likesUpdateWithoutPostInput, post_app_post_likesUncheckedUpdateWithoutPostInput>
    create: XOR<post_app_post_likesCreateWithoutPostInput, post_app_post_likesUncheckedCreateWithoutPostInput>
  }

  export type post_app_post_likesUpdateWithWhereUniqueWithoutPostInput = {
    where: post_app_post_likesWhereUniqueInput
    data: XOR<post_app_post_likesUpdateWithoutPostInput, post_app_post_likesUncheckedUpdateWithoutPostInput>
  }

  export type post_app_post_likesUpdateManyWithWhereWithoutPostInput = {
    where: post_app_post_likesScalarWhereInput
    data: XOR<post_app_post_likesUpdateManyMutationInput, post_app_post_likesUncheckedUpdateManyWithoutPostInput>
  }

  export type post_app_post_likesScalarWhereInput = {
    AND?: post_app_post_likesScalarWhereInput | post_app_post_likesScalarWhereInput[]
    OR?: post_app_post_likesScalarWhereInput[]
    NOT?: post_app_post_likesScalarWhereInput | post_app_post_likesScalarWhereInput[]
    post_id?: IntFilter<"post_app_post_likes"> | number
    id?: IntFilter<"post_app_post_likes"> | number
  }

  export type ProfileUpsertWithoutPostInput = {
    update: XOR<ProfileUpdateWithoutPostInput, ProfileUncheckedUpdateWithoutPostInput>
    create: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutPostInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutPostInput, ProfileUncheckedUpdateWithoutPostInput>
  }

  export type ProfileUpdateWithoutPostInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    album?: AlbumUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    album?: AlbumUncheckedUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUncheckedUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    avatar?: AvatarUncheckedUpdateOneWithoutProfileNestedInput
    friendship_from?: FriendshipUncheckedUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUncheckedUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type LinkUpsertWithoutPostInput = {
    update: XOR<LinkUpdateWithoutPostInput, LinkUncheckedUpdateWithoutPostInput>
    create: XOR<LinkCreateWithoutPostInput, LinkUncheckedCreateWithoutPostInput>
    where?: LinkWhereInput
  }

  export type LinkUpdateToOneWithWhereWithoutPostInput = {
    where?: LinkWhereInput
    data: XOR<LinkUpdateWithoutPostInput, LinkUncheckedUpdateWithoutPostInput>
  }

  export type LinkUpdateWithoutPostInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type LinkUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type post_app_post_tagCreateWithoutTagInput = {
    post: PostCreateNestedOneWithoutTagsInput
  }

  export type post_app_post_tagUncheckedCreateWithoutTagInput = {
    post_id: number
    id?: number
  }

  export type post_app_post_tagCreateOrConnectWithoutTagInput = {
    where: post_app_post_tagWhereUniqueInput
    create: XOR<post_app_post_tagCreateWithoutTagInput, post_app_post_tagUncheckedCreateWithoutTagInput>
  }

  export type post_app_post_tagCreateManyTagInputEnvelope = {
    data: post_app_post_tagCreateManyTagInput | post_app_post_tagCreateManyTagInput[]
  }

  export type post_app_album_tagsCreateWithoutTagInput = {
    album: AlbumCreateNestedOneWithoutTopicInput
  }

  export type post_app_album_tagsUncheckedCreateWithoutTagInput = {
    album_id: number
    id?: number
  }

  export type post_app_album_tagsCreateOrConnectWithoutTagInput = {
    where: post_app_album_tagsWhereUniqueInput
    create: XOR<post_app_album_tagsCreateWithoutTagInput, post_app_album_tagsUncheckedCreateWithoutTagInput>
  }

  export type post_app_album_tagsCreateManyTagInputEnvelope = {
    data: post_app_album_tagsCreateManyTagInput | post_app_album_tagsCreateManyTagInput[]
  }

  export type post_app_post_tagUpsertWithWhereUniqueWithoutTagInput = {
    where: post_app_post_tagWhereUniqueInput
    update: XOR<post_app_post_tagUpdateWithoutTagInput, post_app_post_tagUncheckedUpdateWithoutTagInput>
    create: XOR<post_app_post_tagCreateWithoutTagInput, post_app_post_tagUncheckedCreateWithoutTagInput>
  }

  export type post_app_post_tagUpdateWithWhereUniqueWithoutTagInput = {
    where: post_app_post_tagWhereUniqueInput
    data: XOR<post_app_post_tagUpdateWithoutTagInput, post_app_post_tagUncheckedUpdateWithoutTagInput>
  }

  export type post_app_post_tagUpdateManyWithWhereWithoutTagInput = {
    where: post_app_post_tagScalarWhereInput
    data: XOR<post_app_post_tagUpdateManyMutationInput, post_app_post_tagUncheckedUpdateManyWithoutTagInput>
  }

  export type post_app_album_tagsUpsertWithWhereUniqueWithoutTagInput = {
    where: post_app_album_tagsWhereUniqueInput
    update: XOR<post_app_album_tagsUpdateWithoutTagInput, post_app_album_tagsUncheckedUpdateWithoutTagInput>
    create: XOR<post_app_album_tagsCreateWithoutTagInput, post_app_album_tagsUncheckedCreateWithoutTagInput>
  }

  export type post_app_album_tagsUpdateWithWhereUniqueWithoutTagInput = {
    where: post_app_album_tagsWhereUniqueInput
    data: XOR<post_app_album_tagsUpdateWithoutTagInput, post_app_album_tagsUncheckedUpdateWithoutTagInput>
  }

  export type post_app_album_tagsUpdateManyWithWhereWithoutTagInput = {
    where: post_app_album_tagsScalarWhereInput
    data: XOR<post_app_album_tagsUpdateManyMutationInput, post_app_album_tagsUncheckedUpdateManyWithoutTagInput>
  }

  export type PostCreateWithoutLinkInput = {
    title: string
    content: string
    tags?: post_app_post_tagCreateNestedManyWithoutPostInput
    images?: post_app_post_imageCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesCreateNestedManyWithoutPostInput
    author: ProfileCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutLinkInput = {
    id?: number
    title: string
    content: string
    author_id: number
    tags?: post_app_post_tagUncheckedCreateNestedManyWithoutPostInput
    images?: post_app_post_imageUncheckedCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsUncheckedCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutLinkInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutLinkInput, PostUncheckedCreateWithoutLinkInput>
  }

  export type PostCreateManyLinkInputEnvelope = {
    data: PostCreateManyLinkInput | PostCreateManyLinkInput[]
  }

  export type PostUpsertWithWhereUniqueWithoutLinkInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutLinkInput, PostUncheckedUpdateWithoutLinkInput>
    create: XOR<PostCreateWithoutLinkInput, PostUncheckedCreateWithoutLinkInput>
  }

  export type PostUpdateWithWhereUniqueWithoutLinkInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutLinkInput, PostUncheckedUpdateWithoutLinkInput>
  }

  export type PostUpdateManyWithWhereWithoutLinkInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutLinkInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: IntFilter<"Post"> | number
    title?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    author_id?: IntFilter<"Post"> | number
    linkId?: IntNullableFilter<"Post"> | number | null
  }

  export type PostCreateWithoutTagsInput = {
    title: string
    content: string
    images?: post_app_post_imageCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesCreateNestedManyWithoutPostInput
    author: ProfileCreateNestedOneWithoutPostInput
    link?: LinkCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutTagsInput = {
    id?: number
    title: string
    content: string
    author_id: number
    linkId?: number | null
    images?: post_app_post_imageUncheckedCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsUncheckedCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutTagsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>
  }

  export type TagsCreateWithoutPostsInput = {
    name: string
    album_tags?: post_app_album_tagsCreateNestedManyWithoutTagInput
  }

  export type TagsUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    album_tags?: post_app_album_tagsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagsCreateOrConnectWithoutPostsInput = {
    where: TagsWhereUniqueInput
    create: XOR<TagsCreateWithoutPostsInput, TagsUncheckedCreateWithoutPostsInput>
  }

  export type PostUpsertWithoutTagsInput = {
    update: XOR<PostUpdateWithoutTagsInput, PostUncheckedUpdateWithoutTagsInput>
    create: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutTagsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutTagsInput, PostUncheckedUpdateWithoutTagsInput>
  }

  export type PostUpdateWithoutTagsInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    images?: post_app_post_imageUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUpdateManyWithoutPostNestedInput
    author?: ProfileUpdateOneRequiredWithoutPostNestedInput
    link?: LinkUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    linkId?: NullableIntFieldUpdateOperationsInput | number | null
    images?: post_app_post_imageUncheckedUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUncheckedUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type TagsUpsertWithoutPostsInput = {
    update: XOR<TagsUpdateWithoutPostsInput, TagsUncheckedUpdateWithoutPostsInput>
    create: XOR<TagsCreateWithoutPostsInput, TagsUncheckedCreateWithoutPostsInput>
    where?: TagsWhereInput
  }

  export type TagsUpdateToOneWithWhereWithoutPostsInput = {
    where?: TagsWhereInput
    data: XOR<TagsUpdateWithoutPostsInput, TagsUncheckedUpdateWithoutPostsInput>
  }

  export type TagsUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    album_tags?: post_app_album_tagsUpdateManyWithoutTagNestedInput
  }

  export type TagsUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    album_tags?: post_app_album_tagsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type PostCreateWithoutLikesInput = {
    title: string
    content: string
    tags?: post_app_post_tagCreateNestedManyWithoutPostInput
    images?: post_app_post_imageCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsCreateNestedManyWithoutPostInput
    author: ProfileCreateNestedOneWithoutPostInput
    link?: LinkCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutLikesInput = {
    id?: number
    title: string
    content: string
    author_id: number
    linkId?: number | null
    tags?: post_app_post_tagUncheckedCreateNestedManyWithoutPostInput
    images?: post_app_post_imageUncheckedCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutLikesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
  }

  export type PostUpsertWithoutLikesInput = {
    update: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutLikesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
  }

  export type PostUpdateWithoutLikesInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: post_app_post_tagUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUpdateManyWithoutPostNestedInput
    author?: ProfileUpdateOneRequiredWithoutPostNestedInput
    link?: LinkUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    linkId?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: post_app_post_tagUncheckedUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUncheckedUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateWithoutViewsInput = {
    title: string
    content: string
    tags?: post_app_post_tagCreateNestedManyWithoutPostInput
    images?: post_app_post_imageCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesCreateNestedManyWithoutPostInput
    author: ProfileCreateNestedOneWithoutPostInput
    link?: LinkCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutViewsInput = {
    id?: number
    title: string
    content: string
    author_id: number
    linkId?: number | null
    tags?: post_app_post_tagUncheckedCreateNestedManyWithoutPostInput
    images?: post_app_post_imageUncheckedCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutViewsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutViewsInput, PostUncheckedCreateWithoutViewsInput>
  }

  export type PostUpsertWithoutViewsInput = {
    update: XOR<PostUpdateWithoutViewsInput, PostUncheckedUpdateWithoutViewsInput>
    create: XOR<PostCreateWithoutViewsInput, PostUncheckedCreateWithoutViewsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutViewsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutViewsInput, PostUncheckedUpdateWithoutViewsInput>
  }

  export type PostUpdateWithoutViewsInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: post_app_post_tagUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUpdateManyWithoutPostNestedInput
    author?: ProfileUpdateOneRequiredWithoutPostNestedInput
    link?: LinkUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutViewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    linkId?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: post_app_post_tagUncheckedUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUncheckedUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateWithoutImagesInput = {
    title: string
    content: string
    tags?: post_app_post_tagCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesCreateNestedManyWithoutPostInput
    author: ProfileCreateNestedOneWithoutPostInput
    link?: LinkCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutImagesInput = {
    id?: number
    title: string
    content: string
    author_id: number
    linkId?: number | null
    tags?: post_app_post_tagUncheckedCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsUncheckedCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutImagesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutImagesInput, PostUncheckedCreateWithoutImagesInput>
  }

  export type ImageCreateWithoutPostImagesInput = {
    filename: string
    file: string
    uploaded_at?: Date | string
    album_images?: post_app_album_imagesCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateWithoutPostImagesInput = {
    id?: number
    filename: string
    file: string
    uploaded_at?: Date | string
    album_images?: post_app_album_imagesUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageCreateOrConnectWithoutPostImagesInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutPostImagesInput, ImageUncheckedCreateWithoutPostImagesInput>
  }

  export type PostUpsertWithoutImagesInput = {
    update: XOR<PostUpdateWithoutImagesInput, PostUncheckedUpdateWithoutImagesInput>
    create: XOR<PostCreateWithoutImagesInput, PostUncheckedCreateWithoutImagesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutImagesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutImagesInput, PostUncheckedUpdateWithoutImagesInput>
  }

  export type PostUpdateWithoutImagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: post_app_post_tagUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUpdateManyWithoutPostNestedInput
    author?: ProfileUpdateOneRequiredWithoutPostNestedInput
    link?: LinkUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    linkId?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: post_app_post_tagUncheckedUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUncheckedUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ImageUpsertWithoutPostImagesInput = {
    update: XOR<ImageUpdateWithoutPostImagesInput, ImageUncheckedUpdateWithoutPostImagesInput>
    create: XOR<ImageCreateWithoutPostImagesInput, ImageUncheckedCreateWithoutPostImagesInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutPostImagesInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutPostImagesInput, ImageUncheckedUpdateWithoutPostImagesInput>
  }

  export type ImageUpdateWithoutPostImagesInput = {
    filename?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    album_images?: post_app_album_imagesUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateWithoutPostImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    album_images?: post_app_album_imagesUncheckedUpdateManyWithoutImageNestedInput
  }

  export type PostCreateWithoutAuthorInput = {
    title: string
    content: string
    tags?: post_app_post_tagCreateNestedManyWithoutPostInput
    images?: post_app_post_imageCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesCreateNestedManyWithoutPostInput
    link?: LinkCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    content: string
    linkId?: number | null
    tags?: post_app_post_tagUncheckedCreateNestedManyWithoutPostInput
    images?: post_app_post_imageUncheckedCreateNestedManyWithoutPostInput
    views?: post_app_post_viewsUncheckedCreateNestedManyWithoutPostInput
    likes?: post_app_post_likesUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostCreateManyAuthorInputEnvelope = {
    data: PostCreateManyAuthorInput | PostCreateManyAuthorInput[]
  }

  export type AlbumCreateWithoutAuthorInput = {
    name: string
    created_at?: Date | string
    shown?: boolean
    images?: post_app_album_imagesCreateNestedManyWithoutAlbumInput
    topic?: post_app_album_tagsCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutAuthorInput = {
    id?: number
    name: string
    created_at?: Date | string
    shown?: boolean
    images?: post_app_album_imagesUncheckedCreateNestedManyWithoutAlbumInput
    topic?: post_app_album_tagsUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutAuthorInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutAuthorInput, AlbumUncheckedCreateWithoutAuthorInput>
  }

  export type AlbumCreateManyAuthorInputEnvelope = {
    data: AlbumCreateManyAuthorInput | AlbumCreateManyAuthorInput[]
  }

  export type ChatGroupCreateWithoutAdminInput = {
    name: string
    is_personal_chat?: boolean
    avatar: string
    members?: chat_app_chatgroup_membersCreateNestedManyWithoutChat_groupInput
    chat_messages?: ChatMessageCreateNestedManyWithoutChat_groupInput
  }

  export type ChatGroupUncheckedCreateWithoutAdminInput = {
    id?: number
    name: string
    is_personal_chat?: boolean
    avatar: string
    members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutChat_groupInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutChat_groupInput
  }

  export type ChatGroupCreateOrConnectWithoutAdminInput = {
    where: ChatGroupWhereUniqueInput
    create: XOR<ChatGroupCreateWithoutAdminInput, ChatGroupUncheckedCreateWithoutAdminInput>
  }

  export type ChatGroupCreateManyAdminInputEnvelope = {
    data: ChatGroupCreateManyAdminInput | ChatGroupCreateManyAdminInput[]
  }

  export type ChatMessageCreateWithoutAuthorInput = {
    content: string
    sent_at?: Date | string
    attached_image: string
    chat_group: ChatGroupCreateNestedOneWithoutChat_messagesInput
  }

  export type ChatMessageUncheckedCreateWithoutAuthorInput = {
    id?: number
    content: string
    sent_at?: Date | string
    chat_groupId: number
    attached_image: string
  }

  export type ChatMessageCreateOrConnectWithoutAuthorInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput>
  }

  export type ChatMessageCreateManyAuthorInputEnvelope = {
    data: ChatMessageCreateManyAuthorInput | ChatMessageCreateManyAuthorInput[]
  }

  export type AvatarCreateWithoutProfileInput = {
    image: string
    shown?: boolean
    active?: boolean
  }

  export type AvatarUncheckedCreateWithoutProfileInput = {
    id?: number
    image: string
    shown?: boolean
    active?: boolean
  }

  export type AvatarCreateOrConnectWithoutProfileInput = {
    where: AvatarWhereUniqueInput
    create: XOR<AvatarCreateWithoutProfileInput, AvatarUncheckedCreateWithoutProfileInput>
  }

  export type FriendshipCreateWithoutProfile1Input = {
    accepted?: boolean
    profile2: ProfileCreateNestedOneWithoutFriendship_toInput
  }

  export type FriendshipUncheckedCreateWithoutProfile1Input = {
    id?: number
    profile2_id: number
    accepted?: boolean
  }

  export type FriendshipCreateOrConnectWithoutProfile1Input = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutProfile1Input, FriendshipUncheckedCreateWithoutProfile1Input>
  }

  export type FriendshipCreateManyProfile1InputEnvelope = {
    data: FriendshipCreateManyProfile1Input | FriendshipCreateManyProfile1Input[]
  }

  export type FriendshipCreateWithoutProfile2Input = {
    accepted?: boolean
    profile1: ProfileCreateNestedOneWithoutFriendship_fromInput
  }

  export type FriendshipUncheckedCreateWithoutProfile2Input = {
    id?: number
    profile1_id: number
    accepted?: boolean
  }

  export type FriendshipCreateOrConnectWithoutProfile2Input = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutProfile2Input, FriendshipUncheckedCreateWithoutProfile2Input>
  }

  export type FriendshipCreateManyProfile2InputEnvelope = {
    data: FriendshipCreateManyProfile2Input | FriendshipCreateManyProfile2Input[]
  }

  export type chat_app_chatgroup_membersCreateWithoutProfileInput = {
    chat_group: ChatGroupCreateNestedOneWithoutMembersInput
  }

  export type chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput = {
    chat_groupId: number
  }

  export type chat_app_chatgroup_membersCreateOrConnectWithoutProfileInput = {
    where: chat_app_chatgroup_membersWhereUniqueInput
    create: XOR<chat_app_chatgroup_membersCreateWithoutProfileInput, chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput>
  }

  export type chat_app_chatgroup_membersCreateManyProfileInputEnvelope = {
    data: chat_app_chatgroup_membersCreateManyProfileInput | chat_app_chatgroup_membersCreateManyProfileInput[]
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type AlbumUpsertWithWhereUniqueWithoutAuthorInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutAuthorInput, AlbumUncheckedUpdateWithoutAuthorInput>
    create: XOR<AlbumCreateWithoutAuthorInput, AlbumUncheckedCreateWithoutAuthorInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutAuthorInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutAuthorInput, AlbumUncheckedUpdateWithoutAuthorInput>
  }

  export type AlbumUpdateManyWithWhereWithoutAuthorInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutAuthorInput>
  }

  export type AlbumScalarWhereInput = {
    AND?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
    OR?: AlbumScalarWhereInput[]
    NOT?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
    id?: IntFilter<"Album"> | number
    name?: StringFilter<"Album"> | string
    created_at?: DateTimeFilter<"Album"> | Date | string
    shown?: BoolFilter<"Album"> | boolean
    author_id?: IntFilter<"Album"> | number
  }

  export type ChatGroupUpsertWithWhereUniqueWithoutAdminInput = {
    where: ChatGroupWhereUniqueInput
    update: XOR<ChatGroupUpdateWithoutAdminInput, ChatGroupUncheckedUpdateWithoutAdminInput>
    create: XOR<ChatGroupCreateWithoutAdminInput, ChatGroupUncheckedCreateWithoutAdminInput>
  }

  export type ChatGroupUpdateWithWhereUniqueWithoutAdminInput = {
    where: ChatGroupWhereUniqueInput
    data: XOR<ChatGroupUpdateWithoutAdminInput, ChatGroupUncheckedUpdateWithoutAdminInput>
  }

  export type ChatGroupUpdateManyWithWhereWithoutAdminInput = {
    where: ChatGroupScalarWhereInput
    data: XOR<ChatGroupUpdateManyMutationInput, ChatGroupUncheckedUpdateManyWithoutAdminInput>
  }

  export type ChatGroupScalarWhereInput = {
    AND?: ChatGroupScalarWhereInput | ChatGroupScalarWhereInput[]
    OR?: ChatGroupScalarWhereInput[]
    NOT?: ChatGroupScalarWhereInput | ChatGroupScalarWhereInput[]
    id?: IntFilter<"ChatGroup"> | number
    name?: StringFilter<"ChatGroup"> | string
    is_personal_chat?: BoolFilter<"ChatGroup"> | boolean
    admin_id?: IntFilter<"ChatGroup"> | number
    avatar?: StringFilter<"ChatGroup"> | string
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutAuthorInput, ChatMessageUncheckedUpdateWithoutAuthorInput>
    create: XOR<ChatMessageCreateWithoutAuthorInput, ChatMessageUncheckedCreateWithoutAuthorInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutAuthorInput, ChatMessageUncheckedUpdateWithoutAuthorInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutAuthorInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutAuthorInput>
  }

  export type AvatarUpsertWithoutProfileInput = {
    update: XOR<AvatarUpdateWithoutProfileInput, AvatarUncheckedUpdateWithoutProfileInput>
    create: XOR<AvatarCreateWithoutProfileInput, AvatarUncheckedCreateWithoutProfileInput>
    where?: AvatarWhereInput
  }

  export type AvatarUpdateToOneWithWhereWithoutProfileInput = {
    where?: AvatarWhereInput
    data: XOR<AvatarUpdateWithoutProfileInput, AvatarUncheckedUpdateWithoutProfileInput>
  }

  export type AvatarUpdateWithoutProfileInput = {
    image?: StringFieldUpdateOperationsInput | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AvatarUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUpsertWithWhereUniqueWithoutProfile1Input = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutProfile1Input, FriendshipUncheckedUpdateWithoutProfile1Input>
    create: XOR<FriendshipCreateWithoutProfile1Input, FriendshipUncheckedCreateWithoutProfile1Input>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutProfile1Input = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutProfile1Input, FriendshipUncheckedUpdateWithoutProfile1Input>
  }

  export type FriendshipUpdateManyWithWhereWithoutProfile1Input = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutProfile1Input>
  }

  export type FriendshipScalarWhereInput = {
    AND?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
    OR?: FriendshipScalarWhereInput[]
    NOT?: FriendshipScalarWhereInput | FriendshipScalarWhereInput[]
    id?: IntFilter<"Friendship"> | number
    profile1_id?: IntFilter<"Friendship"> | number
    profile2_id?: IntFilter<"Friendship"> | number
    accepted?: BoolFilter<"Friendship"> | boolean
  }

  export type FriendshipUpsertWithWhereUniqueWithoutProfile2Input = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutProfile2Input, FriendshipUncheckedUpdateWithoutProfile2Input>
    create: XOR<FriendshipCreateWithoutProfile2Input, FriendshipUncheckedCreateWithoutProfile2Input>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutProfile2Input = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutProfile2Input, FriendshipUncheckedUpdateWithoutProfile2Input>
  }

  export type FriendshipUpdateManyWithWhereWithoutProfile2Input = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutProfile2Input>
  }

  export type chat_app_chatgroup_membersUpsertWithWhereUniqueWithoutProfileInput = {
    where: chat_app_chatgroup_membersWhereUniqueInput
    update: XOR<chat_app_chatgroup_membersUpdateWithoutProfileInput, chat_app_chatgroup_membersUncheckedUpdateWithoutProfileInput>
    create: XOR<chat_app_chatgroup_membersCreateWithoutProfileInput, chat_app_chatgroup_membersUncheckedCreateWithoutProfileInput>
  }

  export type chat_app_chatgroup_membersUpdateWithWhereUniqueWithoutProfileInput = {
    where: chat_app_chatgroup_membersWhereUniqueInput
    data: XOR<chat_app_chatgroup_membersUpdateWithoutProfileInput, chat_app_chatgroup_membersUncheckedUpdateWithoutProfileInput>
  }

  export type chat_app_chatgroup_membersUpdateManyWithWhereWithoutProfileInput = {
    where: chat_app_chatgroup_membersScalarWhereInput
    data: XOR<chat_app_chatgroup_membersUpdateManyMutationInput, chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileInput>
  }

  export type ProfileCreateWithoutAvatarInput = {
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostCreateNestedManyWithoutAuthorInput
    album?: AlbumCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageCreateNestedManyWithoutAuthorInput
    friendship_from?: FriendshipCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutAvatarInput = {
    id?: number
    name?: string | null
    username?: string | null
    surname?: string | null
    date_of_birth?: Date | string | null
    email: string
    password: string
    image?: string | null
    about?: string | null
    signature?: string | null
    post?: PostUncheckedCreateNestedManyWithoutAuthorInput
    album?: AlbumUncheckedCreateNestedManyWithoutAuthorInput
    administered_groups?: ChatGroupUncheckedCreateNestedManyWithoutAdminInput
    chat_messages?: ChatMessageUncheckedCreateNestedManyWithoutAuthorInput
    friendship_from?: FriendshipUncheckedCreateNestedManyWithoutProfile1Input
    friendship_to?: FriendshipUncheckedCreateNestedManyWithoutProfile2Input
    chat_group_members?: chat_app_chatgroup_membersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutAvatarInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutAvatarInput, ProfileUncheckedCreateWithoutAvatarInput>
  }

  export type ProfileUpsertWithoutAvatarInput = {
    update: XOR<ProfileUpdateWithoutAvatarInput, ProfileUncheckedUpdateWithoutAvatarInput>
    create: XOR<ProfileCreateWithoutAvatarInput, ProfileUncheckedCreateWithoutAvatarInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutAvatarInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutAvatarInput, ProfileUncheckedUpdateWithoutAvatarInput>
  }

  export type ProfileUpdateWithoutAvatarInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateManyWithoutAuthorNestedInput
    album?: AlbumUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutAuthorNestedInput
    friendship_from?: FriendshipUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    album?: AlbumUncheckedUpdateManyWithoutAuthorNestedInput
    administered_groups?: ChatGroupUncheckedUpdateManyWithoutAdminNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutAuthorNestedInput
    friendship_from?: FriendshipUncheckedUpdateManyWithoutProfile1NestedInput
    friendship_to?: FriendshipUncheckedUpdateManyWithoutProfile2NestedInput
    chat_group_members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type post_app_album_imagesCreateManyAlbumInput = {
    id?: number
    image_id: number
  }

  export type post_app_album_tagsCreateManyAlbumInput = {
    tag_id: number
    id?: number
  }

  export type post_app_album_imagesUpdateWithoutAlbumInput = {
    image?: ImageUpdateOneRequiredWithoutAlbum_imagesNestedInput
  }

  export type post_app_album_imagesUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_imagesUncheckedUpdateManyWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_tagsUpdateWithoutAlbumInput = {
    tag?: TagsUpdateOneRequiredWithoutAlbum_tagsNestedInput
  }

  export type post_app_album_tagsUncheckedUpdateWithoutAlbumInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_tagsUncheckedUpdateManyWithoutAlbumInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type chat_app_chatgroup_membersCreateManyChat_groupInput = {
    profile_id: number
  }

  export type ChatMessageCreateManyChat_groupInput = {
    id?: number
    content: string
    sent_at?: Date | string
    author_id: number
    attached_image: string
  }

  export type chat_app_chatgroup_membersUpdateWithoutChat_groupInput = {
    profile?: ProfileUpdateOneRequiredWithoutChat_group_membersNestedInput
  }

  export type chat_app_chatgroup_membersUncheckedUpdateWithoutChat_groupInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
  }

  export type chat_app_chatgroup_membersUncheckedUpdateManyWithoutChat_groupInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
  }

  export type ChatMessageUpdateWithoutChat_groupInput = {
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    attached_image?: StringFieldUpdateOperationsInput | string
    author?: ProfileUpdateOneRequiredWithoutChat_messagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutChat_groupInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    attached_image?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutChat_groupInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    attached_image?: StringFieldUpdateOperationsInput | string
  }

  export type post_app_album_imagesCreateManyImageInput = {
    id?: number
    album_id: number
  }

  export type post_app_post_imageCreateManyImageInput = {
    post_id: number
    id?: number
  }

  export type post_app_album_imagesUpdateWithoutImageInput = {
    album?: AlbumUpdateOneRequiredWithoutImagesNestedInput
  }

  export type post_app_album_imagesUncheckedUpdateWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    album_id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_imagesUncheckedUpdateManyWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    album_id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_imageUpdateWithoutImageInput = {
    post?: PostUpdateOneRequiredWithoutImagesNestedInput
  }

  export type post_app_post_imageUncheckedUpdateWithoutImageInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_imageUncheckedUpdateManyWithoutImageInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_tagCreateManyPostInput = {
    tag_id: number
    id?: number
  }

  export type post_app_post_imageCreateManyPostInput = {
    image_id: number
    id?: number
  }

  export type post_app_post_viewsCreateManyPostInput = {
    id?: number
  }

  export type post_app_post_likesCreateManyPostInput = {
    id?: number
  }

  export type post_app_post_tagUpdateWithoutPostInput = {
    tag?: TagsUpdateOneRequiredWithoutPostsNestedInput
  }

  export type post_app_post_tagUncheckedUpdateWithoutPostInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_tagUncheckedUpdateManyWithoutPostInput = {
    tag_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_imageUpdateWithoutPostInput = {
    image?: ImageUpdateOneRequiredWithoutPostImagesNestedInput
  }

  export type post_app_post_imageUncheckedUpdateWithoutPostInput = {
    image_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_imageUncheckedUpdateManyWithoutPostInput = {
    image_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_viewsUpdateWithoutPostInput = {

  }

  export type post_app_post_viewsUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_viewsUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_likesUpdateWithoutPostInput = {

  }

  export type post_app_post_likesUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_likesUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_tagCreateManyTagInput = {
    post_id: number
    id?: number
  }

  export type post_app_album_tagsCreateManyTagInput = {
    album_id: number
    id?: number
  }

  export type post_app_post_tagUpdateWithoutTagInput = {
    post?: PostUpdateOneRequiredWithoutTagsNestedInput
  }

  export type post_app_post_tagUncheckedUpdateWithoutTagInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_post_tagUncheckedUpdateManyWithoutTagInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_tagsUpdateWithoutTagInput = {
    album?: AlbumUpdateOneRequiredWithoutTopicNestedInput
  }

  export type post_app_album_tagsUncheckedUpdateWithoutTagInput = {
    album_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type post_app_album_tagsUncheckedUpdateManyWithoutTagInput = {
    album_id?: IntFieldUpdateOperationsInput | number
    id?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateManyLinkInput = {
    id?: number
    title: string
    content: string
    author_id: number
  }

  export type PostUpdateWithoutLinkInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: post_app_post_tagUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUpdateManyWithoutPostNestedInput
    author?: ProfileUpdateOneRequiredWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutLinkInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    tags?: post_app_post_tagUncheckedUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUncheckedUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUncheckedUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutLinkInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateManyAuthorInput = {
    id?: number
    title: string
    content: string
    linkId?: number | null
  }

  export type AlbumCreateManyAuthorInput = {
    id?: number
    name: string
    created_at?: Date | string
    shown?: boolean
  }

  export type ChatGroupCreateManyAdminInput = {
    id?: number
    name: string
    is_personal_chat?: boolean
    avatar: string
  }

  export type ChatMessageCreateManyAuthorInput = {
    id?: number
    content: string
    sent_at?: Date | string
    chat_groupId: number
    attached_image: string
  }

  export type FriendshipCreateManyProfile1Input = {
    id?: number
    profile2_id: number
    accepted?: boolean
  }

  export type FriendshipCreateManyProfile2Input = {
    id?: number
    profile1_id: number
    accepted?: boolean
  }

  export type chat_app_chatgroup_membersCreateManyProfileInput = {
    chat_groupId: number
  }

  export type PostUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    tags?: post_app_post_tagUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUpdateManyWithoutPostNestedInput
    link?: LinkUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    linkId?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: post_app_post_tagUncheckedUpdateManyWithoutPostNestedInput
    images?: post_app_post_imageUncheckedUpdateManyWithoutPostNestedInput
    views?: post_app_post_viewsUncheckedUpdateManyWithoutPostNestedInput
    likes?: post_app_post_likesUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    linkId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AlbumUpdateWithoutAuthorInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    images?: post_app_album_imagesUpdateManyWithoutAlbumNestedInput
    topic?: post_app_album_tagsUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
    images?: post_app_album_imagesUncheckedUpdateManyWithoutAlbumNestedInput
    topic?: post_app_album_tagsUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    shown?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatGroupUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
    members?: chat_app_chatgroup_membersUpdateManyWithoutChat_groupNestedInput
    chat_messages?: ChatMessageUpdateManyWithoutChat_groupNestedInput
  }

  export type ChatGroupUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
    members?: chat_app_chatgroup_membersUncheckedUpdateManyWithoutChat_groupNestedInput
    chat_messages?: ChatMessageUncheckedUpdateManyWithoutChat_groupNestedInput
  }

  export type ChatGroupUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    is_personal_chat?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    attached_image?: StringFieldUpdateOperationsInput | string
    chat_group?: ChatGroupUpdateOneRequiredWithoutChat_messagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_groupId?: IntFieldUpdateOperationsInput | number
    attached_image?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sent_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_groupId?: IntFieldUpdateOperationsInput | number
    attached_image?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipUpdateWithoutProfile1Input = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    profile2?: ProfileUpdateOneRequiredWithoutFriendship_toNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutProfile1Input = {
    id?: IntFieldUpdateOperationsInput | number
    profile2_id?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyWithoutProfile1Input = {
    id?: IntFieldUpdateOperationsInput | number
    profile2_id?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUpdateWithoutProfile2Input = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    profile1?: ProfileUpdateOneRequiredWithoutFriendship_fromNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutProfile2Input = {
    id?: IntFieldUpdateOperationsInput | number
    profile1_id?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyWithoutProfile2Input = {
    id?: IntFieldUpdateOperationsInput | number
    profile1_id?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chat_app_chatgroup_membersUpdateWithoutProfileInput = {
    chat_group?: ChatGroupUpdateOneRequiredWithoutMembersNestedInput
  }

  export type chat_app_chatgroup_membersUncheckedUpdateWithoutProfileInput = {
    chat_groupId?: IntFieldUpdateOperationsInput | number
  }

  export type chat_app_chatgroup_membersUncheckedUpdateManyWithoutProfileInput = {
    chat_groupId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}